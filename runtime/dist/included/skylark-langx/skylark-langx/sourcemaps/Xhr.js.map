{"version":3,"sources":["Xhr.js"],"names":["define","arrays","Deferred","Evented","objects","funcs","types","each","mixin","noop","isArray","isFunction","isPlainObject","type","getAbsoluteUrl","a","url","document","createElement","href","Xhr","mimeToDataType","mime","split","htmlType","jsonType","scriptTypeRE","test","xmlTypeRE","appendQuery","query","replace","serializeData","options","data","processData","param","traditional","toUpperCase","undefined","serialize","params","obj","scope","t","array","hash","key","value","add","name","jsonpID","rscript","blankRE","XhrDefaultOptions","async","beforeSend","success","error","complete","context","global","accepts","script","json","xml","html","text","crossDomain","timeout","cache","xhrFields","withCredentials","this","push","escape","join","inherit","klassName","_request","args","_","self","xhr","XMLHttpRequest","dataType","handleAs","mimeType","headers","isFormData","FormData","basicAuthorizationToken","user","password","deferred","contentType","indexOf","overrideMimeType","finish","onloadend","onabort","onprogress","ontimeout","result","status","startsWith","getResponseHeader","responseText","eval","responseXML","JSON","parse","Blob","xhrObj","response","reponse","e","reject","resolve","Error","statusText","evt","progress","open","toLowerCase","hdr","setRequestHeader","send","promise","abort","request","get","post","patch","put","del","init","forEach","defaultOptions"],"mappings":"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","file":"../Xhr.js","sourcesContent":["define([\r\n    \"./arrays\",\r\n    \"./Deferred\",\r\n    \"./Evented\",\r\n    \"./objects\",\r\n    \"./funcs\",\r\n    \"./types\"\r\n],function(arrays,Deferred,Evented,objects,funcs,types){\r\n    var each = arrays.each,\r\n        mixin = objects.mixin,\r\n        noop = funcs.noop,\r\n        isArray = types.isArray,\r\n        isFunction = types.isFunction,\r\n        isPlainObject = types.isPlainObject,\r\n        type = types.type;\r\n \r\n     var getAbsoluteUrl = (function() {\r\n        var a;\r\n\r\n        return function(url) {\r\n            if (!a) a = document.createElement('a');\r\n            a.href = url;\r\n\r\n            return a.href;\r\n        };\r\n    })();\r\n   \r\n    var Xhr = (function(){\r\n        var jsonpID = 0,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/;\r\n\r\n        var XhrDefaultOptions = {\r\n            async: true,\r\n\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: noop,\r\n            // Callback that is executed if the request succeeds\r\n            success: noop,\r\n            // Callback that is executed the the server drops error\r\n            error: noop,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: noop,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json: 'application/json',\r\n                xml: 'application/xml, text/xml',\r\n                html: 'text/html',\r\n                text: 'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: true,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n\r\n            xhrFields : {\r\n                withCredentials : true\r\n            }\r\n        };\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) {\r\n                mime = mime.split(';', 2)[0];\r\n            }\r\n            if (mime) {\r\n                if (mime == htmlType) {\r\n                    return \"html\";\r\n                } else if (mime == jsonType) {\r\n                    return \"json\";\r\n                } else if (scriptTypeRE.test(mime)) {\r\n                    return \"script\";\r\n                } else if (xmlTypeRE.test(mime)) {\r\n                    return \"xml\";\r\n                }\r\n            }\r\n            return \"text\";\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            options.data = options.data || options.query;\r\n            if (options.processData && options.data && type(options.data) != \"string\") {\r\n                options.data = param(options.data, options.traditional);\r\n            }\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n                options.url = appendQuery(options.url, options.data);\r\n                options.data = undefined;\r\n            }\r\n        }\r\n\r\n        function serialize(params, obj, traditional, scope) {\r\n            var t, array = isArray(obj),\r\n                hash = isPlainObject(obj)\r\n            each(obj, function(key, value) {\r\n                t =type(value);\r\n                if (scope) key = traditional ? scope :\r\n                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (t == \"array\" || (!traditional && t == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        var param = function(obj, traditional) {\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if (isFunction(value)) value = value()\r\n                if (value == null) value = \"\"\r\n                this.push(escape(key) + '=' + escape(value))\r\n            }\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        };\r\n\r\n        var Xhr = Evented.inherit({\r\n            klassName : \"Xhr\",\r\n\r\n            _request  : function(args) {\r\n                var _ = this._,\r\n                    self = this,\r\n                    options = mixin({},XhrDefaultOptions,_.options,args),\r\n                    xhr = _.xhr = new XMLHttpRequest();\r\n\r\n                serializeData(options)\r\n\r\n                var dataType = options.dataType || options.handleAs,\r\n                    mime = options.mimeType || options.accepts[dataType],\r\n                    headers = options.headers,\r\n                    xhrFields = options.xhrFields,\r\n                    isFormData = options.data && options.data instanceof FormData,\r\n                    basicAuthorizationToken = options.basicAuthorizationToken,\r\n                    type = options.type,\r\n                    url = options.url,\r\n                    async = options.async,\r\n                    user = options.user , \r\n                    password = options.password,\r\n                    deferred = new Deferred(),\r\n                    contentType = isFormData ? false : 'application/x-www-form-urlencoded';\r\n\r\n                if (xhrFields) {\r\n                    for (name in xhrFields) {\r\n                        xhr[name] = xhrFields[name];\r\n                    }\r\n                }\r\n\r\n                if (mime && mime.indexOf(',') > -1) {\r\n                    mime = mime.split(',', 2)[0];\r\n                }\r\n                if (mime && xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(mime);\r\n                }\r\n\r\n                //if (dataType) {\r\n                //    xhr.responseType = dataType;\r\n                //}\r\n\r\n                var finish = function() {\r\n                    xhr.onloadend = noop;\r\n                    xhr.onabort = noop;\r\n                    xhr.onprogress = noop;\r\n                    xhr.ontimeout = noop;\r\n                    xhr = null;\r\n                }\r\n                var onloadend = function() {\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {\r\n                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));\r\n\r\n                        result = xhr.responseText;\r\n                        try {\r\n                            if (dataType == 'script') {\r\n                                eval(result);\r\n                            } else if (dataType == 'xml') {\r\n                                result = xhr.responseXML;\r\n                            } else if (dataType == 'json') {\r\n                                result = blankRE.test(result) ? null : JSON.parse(result);\r\n                            } else if (dataType == \"blob\") {\r\n                                result = Blob([xhrObj.response]);\r\n                            } else if (dataType == \"arraybuffer\") {\r\n                                result = xhr.reponse;\r\n                            }\r\n                        } catch (e) { \r\n                            error = e;\r\n                        }\r\n\r\n                        if (error) {\r\n                            deferred.reject(error,xhr.status,xhr);\r\n                        } else {\r\n                            deferred.resolve(result,xhr.status,xhr);\r\n                        }\r\n                    } else {\r\n                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);\r\n                    }\r\n                    finish();\r\n                };\r\n\r\n                var onabort = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"abort\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n \r\n                var ontimeout = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"timeout\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n\r\n                var onprogress = function(evt) {\r\n                    if (deferred) {\r\n                        deferred.progress(evt,xhr.status,xhr);\r\n                    }\r\n                }\r\n\r\n                xhr.onloadend = onloadend;\r\n                xhr.onabort = onabort;\r\n                xhr.ontimeout = ontimeout;\r\n                xhr.onprogress = onprogress;\r\n\r\n                xhr.open(type, url, async, user, password);\r\n               \r\n                if (headers) {\r\n                    for ( var key in headers) {\r\n                        var value = headers[key];\r\n \r\n                        if(key.toLowerCase() === 'content-type'){\r\n                            contentType = headers[hdr];\r\n                        } else {\r\n                           xhr.setRequestHeader(key, value);\r\n                        }\r\n                    }\r\n                }   \r\n\r\n                if  (contentType && contentType !== false){\r\n                    xhr.setRequestHeader('Content-Type', contentType);\r\n                }\r\n\r\n                if(!headers || !('X-Requested-With' in headers)){\r\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n                }\r\n\r\n\r\n                //If basicAuthorizationToken is defined set its value into \"Authorization\" header\r\n                if (basicAuthorizationToken) {\r\n                    xhr.setRequestHeader(\"Authorization\", basicAuthorizationToken);\r\n                }\r\n\r\n                xhr.send(options.data ? options.data : null);\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            \"abort\": function() {\r\n                var _ = this._,\r\n                    xhr = _.xhr;\r\n\r\n                if (xhr) {\r\n                    xhr.abort();\r\n                }    \r\n            },\r\n\r\n\r\n            \"request\": function(args) {\r\n                return this._request(args);\r\n            },\r\n\r\n            get : function(args) {\r\n                args = args || {};\r\n                args.type = \"GET\";\r\n                return this._request(args);\r\n            },\r\n\r\n            post : function(args) {\r\n                args = args || {};\r\n                args.type = \"POST\";\r\n                return this._request(args);\r\n            },\r\n\r\n            patch : function(args) {\r\n                args = args || {};\r\n                args.type = \"PATCH\";\r\n                return this._request(args);\r\n            },\r\n\r\n            put : function(args) {\r\n                args = args || {};\r\n                args.type = \"PUT\";\r\n                return this._request(args);\r\n            },\r\n\r\n            del : function(args) {\r\n                args = args || {};\r\n                args.type = \"DELETE\";\r\n                return this._request(args);\r\n            },\r\n\r\n            \"init\": function(options) {\r\n                this._ = {\r\n                    options : options || {}\r\n                };\r\n            }\r\n        });\r\n\r\n        [\"request\",\"get\",\"post\",\"put\",\"del\",\"patch\"].forEach(function(name){\r\n            Xhr[name] = function(url,args) {\r\n                var xhr = new Xhr({\"url\" : url});\r\n                return xhr[name](args);\r\n            };\r\n        });\r\n\r\n        Xhr.defaultOptions = XhrDefaultOptions;\r\n        Xhr.param = param;\r\n\r\n        return Xhr;\r\n    })();\r\n\r\n\treturn Xhr;\t\r\n});"]}