{"version":3,"sources":["filer.js"],"names":["define","skylark","langx","eventer","styler","selectFile","callback","selectFiles","pickedFiles","i","length","size","maxFileSize","splice","fileSelected","fileInput","input","document","createElement","type","style","position","left","top","opacity","body","appendChild","onchange","e","Array","prototype","slice","call","target","files","value","click","on","Deferred","attr","filer","mixin","dropzone","elm","params","hoverClass","droppedCallback","dropped","enterdCount","dataTransfer","types","indexOf","stop","addClass","removeClass","this","picker","pickedCallback","picked","preventDefault","readFile","file","d","reader","FileReader","onload","evt","resolve","result","onerror","code","error","alert","asArrayBuffer","readAsArrayBuffer","asDataUrl","readAsDataURL","asText","readAsText","promise","writeFile","data","name","window","navigator","msSaveBlob","isString","dataURItoBlob","a","Blob","URL","createObjectURL","href","setAttribute","dispatchEvent","CustomEvent"],"mappings":"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","file":"../filer.js","sourcesContent":["define([\n    \"./skylark\",\n    \"./langx\",\n    \"./eventer\",\n    \"./styler\"\n], function(skylark, langx, eventer,styler) {\n    var on = eventer.on,\n        attr = eventer.attr,\n        Deferred = langx.Deferred,\n\n        fileInput,\n        fileInputForm,\n        fileSelected,\n        maxFileSize = 1 / 0;\n\n    function dataURLtoBlob(dataurl) {\n        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n        while(n--){\n            u8arr[n] = bstr.charCodeAt(n);\n        }\n        return new Blob([u8arr], {type:mime});\n    }\n\n    function selectFile(callback) {\n        fileSelected = callback;\n        if (!fileInput) {\n            var input = fileInput = document.createElement(\"input\");\n\n            function selectFiles(pickedFiles) {\n                for (var i = pickedFiles.length; i--;) {\n                    if (pickedFiles[i].size > maxFileSize) {\n                        pickedFiles.splice(i, 1);\n                    }\n                }\n                fileSelected(pickedFiles);\n            }\n\n            input.type = \"file\";\n            input.style.position = \"fixed\",\n                input.style.left = 0,\n                input.style.top = 0,\n                input.style.opacity = .001,\n                document.body.appendChild(input);\n\n            input.onchange = function(e) {\n                selectFiles(Array.prototype.slice.call(e.target.files));\n                // reset to \"\", so selecting the same file next time still trigger the change handler\n                input.value = \"\";\n            };\n        }\n        fileInput.click();\n    }\n\n    function upload(files, url, params) {\n        params = params || {};\n        var chunkSize = params.chunkSize || 0,\n            maxSize = params.maxSize || 0,\n            progressCallback = params.progress,\n            errorCallback = params.error,\n            completedCallback = params.completed,\n            uploadedCallback = params.uploaded;\n\n\n        function uploadOneFile(fileItem,oneFileloadedSize, fileItems) {\n            function handleProcess(nowLoadedSize) {\n                var t;\n                speed = Math.ceil(oneFileloadedSize + nowLoadedSize / ((now() - uploadStartedTime) / 1e3)), \n                percent = Math.round((oneFileloadedSize + nowLoadedSize) / file.size * 100); \n                if (progressCallback) {\n                    progressCallback({\n                        name: file.name,\n                        loaded: oneFileloadedSize + nowLoadedSize,\n                        total: file.size,\n                        percent: percent,\n                        bytesPerSecond: speed,\n                        global: {\n                            loaded: allLoadedSize + oneFileloadedSize + nowLoadedSize,\n                            total: totalSize\n                        }\n                    });\n                }\n            }\n            var file = fileItem.file,\n                uploadChunkSize = chunkSize || file.size,\n                chunk = file.slice(oneFileloadedSize, oneFileloadedSize + uploadChunkSize);\n\n            xhr = createXmlHttpRequest();\n            //xhr.open(\"POST\", url + \n            //                \"?action=upload&path=\" + \n            //                encodeURIComponent(path) + \n            //                \"&name=\" + encodeURIComponent(file.name) + \n            //                \"&loaded=\" + oneFileloadedSize + \n            //                \"&total=\" + file.size + \n            //                \"&id=\" + id + \n            //                \"&csrf=\" + encodeURIComponent(token) + \n            //                \"&resolution=\" + \n            //                encodeURIComponent(fileItem.type));\n            xhr.upload.onprogress = function(event) {\n                handleProcess(event.loaded - (event.total - h.size))\n            };\n            xhr.onload = function() {\n                var response, i;\n                xhr.upload.onprogress({\n                    loaded: h.size,\n                    total: h.size\n                });\n                try {\n                    response = JSON.parse(xhr.responseText);\n                } catch (e) {\n                    i = {\n                        code: -1,\n                        message: \"Error response is not proper JSON\\n\\nResponse:\\n\" + xhr.responseText,\n                        data: {\n                            fileName: file.name,\n                            fileSize: file.size,\n                            maxSize: uploadMaxSize,\n                            extensions: extensions.join(\", \")\n                        },\n                        extra: extra\n                    };\n                    errorFileInfos.push(i);\n                    if (errorCallback) {\n                        errorCallback(i);\n                    }\n                    return uploadFiles(fileItems)\n                }\n                if (response.error) {\n\n                    i = {\n                        code: response.error.code,\n                        message: response.error.message,\n                        data: {\n                            fileName: file.name,\n                            fileSize: file.size,\n                            maxSize: uploadMaxSize,\n                            extensions: extensions.join(\", \")\n                        },\n                        extra: extra\n                    }; \n                    errorFileInfos.push(i); \n                    if (errorCallback) {\n                        errorCallback(i);\n                    }\n                    uploadFiles(fileItems);\n                } else {\n                    if (!response.error && oneFileloadedSize + uploadChunkSize < file.size) {\n                        uploadOneFile(fileItem, oneFileloadedSize + uploadChunkSize, fileItems);\n                    } else {\n                        if (response.result) {\n                            utils.each(response.result, function(e) {\n                                e = File.fromJSON(e);\n                                uploadFileItems.push(e);\n\n                                if (uploadedCallback) {\n                                    uploadedCallback({\n                                        file: e\n                                    });\n                                }\n                            }); \n\n                        } \n                        allLoadedSize += file.size;\n                        response.result && k.push(response.result);\n                        uploadFiles(fileItems);\n                    }                            \n                }     \n\n            };\n            handleProcess(0);\n            xhr.send(createFormData(h));\n        }\n\n        function uploadFiles(fileItems) {\n            var fileItem = fileItems.shift();\n            processedFilesCount++; \n            if (fileItem && fileItem.file.error) {\n                uploadFiles(fileItem);\n            } else {\n                if (uploadingFile) {\n                    uploadOneFile(fileItem, null, 0, fileItems);\n                } else {\n\n                    if (completedCallback) {\n                        completedCallback({\n                            files: new FileCollection(uploadFileItems),\n                            bytesPerSecond: I,\n                            errors: E(D),\n                            extra: extra\n                        });\n                    }\n                }  \n            }\n        }\n\n        var self = this,\n            fileItems = [],\n            processedFilesCount = -1,\n            xhr, \n            totalSize = 0,\n            allLoadedSize = 0,\n            k = [],\n            errorFileInfos = [],\n            startedTime = now(),\n            I = 0,\n            uploadFileItems = [];\n\n        for ( var  i = 0; i < files.length; i++) {\n            totalSize += files[i].size;\n            fileItems.push({\n                file : files[i]\n            });\n        }        \n\n        uploadFiles(fileItems);\n    }\n\n\n    var filer = function() {\n        return filer;\n    };\n\n    langx.mixin(filer , {\n        dropzone: function(elm, params) {\n            params = params || {};\n            var hoverClass = params.hoverClass || \"dropzone\",\n                droppedCallback = params.dropped;\n\n            var enterdCount = 0;\n            on(elm, \"dragenter\", function(e) {\n                if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\n                    eventer.stop(e);\n                    enterdCount ++;\n                    styler.addClass(elm,hoverClass)\n                }\n            });\n\n            on(elm, \"dragover\", function(e) {\n                if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\n                    eventer.stop(e);\n                }\n            });\n\n\n            on(elm, \"dragleave\", function(e) {\n                if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\n                    enterdCount--\n                    if (enterdCount==0) {\n                        styler.removeClass(elm,hoverClass);\n                    }\n                }\n            });\n\n            on(elm, \"drop\", function(e) {\n                if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\n                    styler.removeClass(elm,hoverClass)\n                    eventer.stop(e);\n                    if (droppedCallback) {\n                        droppedCallback(e.dataTransfer.files);\n                    }\n                }\n            });\n\n\n            return this;\n        },\n\n        picker: function(elm, params) {\n            params = params || {};\n\n            var pickedCallback = params.picked;\n\n            on(elm, \"click\", function(e) {\n                e.preventDefault();\n                selectFile(pickedCallback);\n            });\n            return this;\n        },\n\n        readFile : function(file,params) {\n            params = params || {};\n            var d = new Deferred,\n                reader = new FileReader();\n            \n            reader.onload = function(evt) {\n                d.resolve(evt.target.result);\n            };\n            reader.onerror = function(e) {\n                var code = e.target.error.code;\n                if (code === 2) {\n                    alert('please don\\'t open this page using protocol fill:///');\n                } else {\n                    alert('error code: ' + code);\n                }\n            };\n            \n            if (params.asArrayBuffer){\n                reader.readAsArrayBuffer(file);\n            } else if (params.asDataUrl) {\n                reader.readAsDataURL(file);                \n            } else if (params.asText) {\n                reader.readAsText(file);\n            } else {\n                reader.readAsArrayBuffer(file);\n            }\n\n            return d.promise;\n        },\n\n        writeFile : function(data,name) {\n            if (window.navigator.msSaveBlob) { \n               if (langx.isString(data)) {\n                   data = dataURItoBlob(data);\n               }\n               window.navigator.msSaveBlob(data, name);\n            } else {\n                var a = document.createElement('a');\n                if (data instanceof Blob) {\n                    data = langx.URL.createObjectURL(data);\n                }\n                a.href = data;\n                a.setAttribute('download', name || 'noname');\n                a.dispatchEvent(new CustomEvent('click'));\n            }              \n        }\n\n\n    });\n\n    return skylark.filer = filer;\n});\n"]}