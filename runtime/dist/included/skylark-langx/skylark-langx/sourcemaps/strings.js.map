{"version":3,"sources":["strings.js"],"names":["define","dasherize","str","replace","toLowerCase","deserializeValue","value","test","JSON","parse","e","trim","String","prototype","call","substitute","template","map","transform","thisObject","getObject","key","match","retVal","getValue","keys","obj","_k","pop","split","reverse","window","proxy","v","format","toString","camelCase","a","toUpperCase","lowerFirst","charAt","slice","serializeValue","stringify","upperFirst"],"mappings":";;;;;;;AAAAA,UACE,WAQE,QAASC,GAAUC,GACf,MAAOA,GAAIC,QAAQ,MAAO,KACrBA,QAAQ,wBAAyB,SACjCA,QAAQ,oBAAqB,SAC7BA,QAAQ,KAAM,KACdC,cAGT,QAASC,GAAiBC,GACtB,IACI,MAAOA,GACM,QAATA,GACU,SAATA,IACY,QAATA,EAAkB,MACjBA,EAAQ,IAAMA,GAASA,EACxB,UAAUC,KAAKD,GAASE,KAAKC,MAAMH,GACnCA,GAASA,EACnB,MAAOI,GACL,MAAOJ,IAIf,QAASK,GAAKT,GACV,MAAc,OAAPA,EAAc,GAAKU,OAAOC,UAAUF,KAAKG,KAAKZ,GAEzD,QAASa,GAAuBC,EAE5BC,EAEAC,EAEAC,GAmBA,QAASC,GAAUC,EAAKJ,GACpB,GAAII,EAAIC,MAAM,MAAO,CACjB,GAAIC,GACAC,EAAW,SAASC,EAAMC,GACtB,GAAIC,GAAKF,EAAKG,KACd,OAAID,GACKD,EAAIC,GACFH,EAASC,EAAMF,EAASG,EAAIC,IADd,KAGdJ,EAGnB,OAAOC,GAASH,EAAIQ,MAAM,KAAKC,UAAWb,GAE1C,MAAOA,GAAII,GAInB,MAxBAF,GAAaA,GAAcY,OAC3Bb,EAAYA,EACRc,MAAMb,EAAYD,GAAa,SAASe,GACpC,MAAOA,IAqBRjB,EAASb,QAAQ,yCACpB,SAASmB,EAAOD,EAAKa,GACjB,GAAI5B,GAAQc,EAAUC,EAAKJ,EAI3B,OAHIiB,KACA5B,EAAQc,EAAUc,EAAQf,GAAYL,KAAKK,EAAYb,EAAOe,IAE3DH,EAAUZ,EAAOe,GAAKc,aAI5C,OACOC,UAAW,SAASlC,GAChB,MAAOA,GAAIC,QAAQ,cAAe,SAASkC,GACvC,MAAOA,GAAEC,cAAcnC,QAAQ,IAAK,OAK5CF,UAAWA,EAEXI,iBAAkBA,EAElBkC,WAAY,SAASrC,GACjB,MAAOA,GAAIsC,OAAO,GAAGpC,cAAgBF,EAAIuC,MAAM,IAGnDC,eAAgB,SAASpC,GACrB,MAAOE,MAAKmC,UAAUrC,IAI1BS,WAAYA,EAEZJ,KAAMA,EAENiC,WAAY,SAAS1C,GACjB,MAAOA,GAAIsC,OAAO,GAAGF,cAAgBpC,EAAIuC,MAAM","file":"../strings.js","sourcesContent":["define([\r\n],function(){\r\n\r\n     /*\r\n     * Converts camel case into dashes.\r\n     * @param {String} str\r\n     * @return {String}\r\n     * @exapmle marginTop -> margin-top\r\n     */\r\n    function dasherize(str) {\r\n        return str.replace(/::/g, '/')\r\n            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n            .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n            .replace(/_/g, '-')\r\n            .toLowerCase();\r\n    }\r\n\r\n    function deserializeValue(value) {\r\n        try {\r\n            return value ?\r\n                value == \"true\" ||\r\n                (value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                    +value + \"\" == value ? +value :\r\n                    /^[\\[\\{]/.test(value) ? JSON.parse(value) :\r\n                    value) : value;\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function trim(str) {\r\n        return str == null ? \"\" : String.prototype.trim.call(str);\r\n    }\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n\treturn {\r\n        camelCase: function(str) {\r\n            return str.replace(/-([\\da-z])/g, function(a) {\r\n                return a.toUpperCase().replace('-', '');\r\n            });\r\n        },\r\n\r\n\r\n        dasherize: dasherize,\r\n\r\n        deserializeValue: deserializeValue,\r\n\r\n        lowerFirst: function(str) {\r\n            return str.charAt(0).toLowerCase() + str.slice(1);\r\n        },\r\n\r\n        serializeValue: function(value) {\r\n            return JSON.stringify(value)\r\n        },\r\n\r\n\r\n        substitute: substitute,\r\n\r\n        trim: trim,\r\n\r\n        upperFirst: function(str) {\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        }\r\n\t} ; \r\n\r\n});"]}