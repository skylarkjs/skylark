{"version":3,"sources":["datax.js"],"names":["define","skylark","langx","finder","setAttribute","elm","name","value","removeAttribute","aria","this","attr","undefined","attrName","hasAttribute","getAttribute","_attributeData","store","each","attributes","i","indexOf","camelCase","replace","deserializeValue","_store","confirm","_getData","camelName","capitalRE","toLowerCase","_setData","data","dataAttrName","cleanData","removeData","names","isString","split","forEach","pluck","nodes","property","map","call","prop","propMap","removeAttr","removeProp","text","txt","textContent","val","multiple","selectedOptions","filter","find","option","selected","datax","Array","prototype","tabindex","readonly","for","class","maxlength","cellspacing","cellpadding","rowspan","colspan","usemap","frameborder","contenteditable","mixin"],"mappings":"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","file":"../datax.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./finder\"\r\n], function(skylark, langx, finder) {\r\n    var map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        camelCase = langx.camelCase,\r\n        deserializeValue = langx.deserializeValue,\r\n\r\n        capitalRE = /([A-Z])/g,\r\n        propMap = {\r\n            'tabindex': 'tabIndex',\r\n            'readonly': 'readOnly',\r\n            'for': 'htmlFor',\r\n            'class': 'className',\r\n            'maxlength': 'maxLength',\r\n            'cellspacing': 'cellSpacing',\r\n            'cellpadding': 'cellPadding',\r\n            'rowspan': 'rowSpan',\r\n            'colspan': 'colSpan',\r\n            'usemap': 'useMap',\r\n            'frameborder': 'frameBorder',\r\n            'contenteditable': 'contentEditable'\r\n        };\r\n\r\n    function setAttribute(elm, name, value) {\r\n        if (value == null) {\r\n            elm.removeAttribute(name);\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    function aria(elm,name,value) {\r\n        return this.attr(elm, \"aria-\"+name, value);\r\n    }\r\n\r\n    function attr(elm, name, value) {\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var attrName in name) {\r\n                    attr(elm, attrName, name[attrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                if (elm.hasAttribute(name)) {\r\n                    return elm.getAttribute(name);\r\n                }\r\n            }\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // Read all \"data-*\" attributes from a node\r\n    function _attributeData(elm) {\r\n        var store = {}\r\n        langx.each(elm.attributes || [], function(i, attr) {\r\n            if (attr.name.indexOf('data-') == 0) {\r\n                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);\r\n            }\r\n        })\r\n        return store;\r\n    }\r\n\r\n    function _store(elm, confirm) {\r\n        var store = elm[\"_$_store\"];\r\n        if (!store && confirm) {\r\n            store = elm[\"_$_store\"] = _attributeData(elm);\r\n        }\r\n        return store;\r\n    }\r\n\r\n    function _getData(elm, name) {\r\n        if (name === undefined) {\r\n            return _store(elm, true);\r\n        } else {\r\n            var store = _store(elm);\r\n            if (store) {\r\n                if (name in store) {\r\n                    return store[name];\r\n                }\r\n                var camelName = camelCase(name);\r\n                if (camelName in store) {\r\n                    return store[camelName];\r\n                }\r\n            }\r\n            var attrName = 'data-' + name.replace(capitalRE, \"-$1\").toLowerCase()\r\n            return attr(elm, attrName);\r\n        }\r\n\r\n    }\r\n\r\n    function _setData(elm, name, value) {\r\n        var store = _store(elm, true);\r\n        store[camelCase(name)] = value;\r\n    }\r\n\r\n\r\n    function data(elm, name, value) {\r\n\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var dataAttrName in name) {\r\n                    _setData(elm, dataAttrName, name[dataAttrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                return _getData(elm, name);\r\n            }\r\n        } else {\r\n            _setData(elm, name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function cleanData(elm) {\r\n        if (elm[\"_$_store\"]) {\r\n            delete elm[\"_$_store\"];\r\n        }\r\n    }\r\n\r\n    function removeData(elm, names) {\r\n        if (langx.isString(names)) {\r\n            names = names.split(/\\s+/);\r\n        }\r\n        var store = _store(elm, true);\r\n        names.forEach(function(name) {\r\n            delete store[name];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function pluck(nodes, property) {\r\n        return map.call(nodes, function(elm) {\r\n            return elm[property];\r\n        });\r\n    }\r\n\r\n    function prop(elm, name, value) {\r\n        name = propMap[name] || name;\r\n        if (value === undefined) {\r\n            return elm[name];\r\n        } else {\r\n            elm[name] = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function removeAttr(elm, name) {\r\n        name.split(' ').forEach(function(attr) {\r\n            setAttribute(elm, attr);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function removeProp(elm, name) {\r\n        name.split(' ').forEach(function(prop) {\r\n            delete elm[prop];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function text(elm, txt) {\r\n        if (txt === undefined) {\r\n            return elm.textContent;\r\n        } else {\r\n            elm.textContent = txt == null ? '' : '' + txt;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function val(elm, value) {\r\n        if (value === undefined) {\r\n            if (elm.multiple) {\r\n                // select multiple values\r\n                var selectedOptions = filter.call(finder.find(elm, \"option\"), (function(option) {\r\n                    return option.selected;\r\n                }));\r\n                return pluck(selectedOptions, \"value\");\r\n            } else {\r\n                return elm.value;\r\n            }\r\n        } else {\r\n            elm.value = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function datax() {\r\n        return datax;\r\n    }\r\n\r\n    langx.mixin(datax, {\r\n        aria: aria,\r\n        \r\n        attr: attr,\r\n\r\n        cleanData : cleanData,\r\n        \r\n        data: data,\r\n\r\n        pluck: pluck,\r\n\r\n        prop: prop,\r\n\r\n        removeAttr: removeAttr,\r\n\r\n        removeData: removeData,\r\n\r\n        removeProp: removeProp,\r\n\r\n        text: text,\r\n\r\n        val: val\r\n    });\r\n\r\n    return skylark.datax = datax;\r\n});\r\n"]}