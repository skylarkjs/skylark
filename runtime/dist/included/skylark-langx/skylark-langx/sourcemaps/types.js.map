{"version":3,"sources":["types.js"],"names":["define","isArray","object","constructor","Array","isArrayLike","obj","isString","isHtmlNode","length","isFunction","isBoolean","isDefined","isDocument","nodeType","DOCUMENT_NODE","isEmptyObject","name","value","type","Node","isNumber","isObject","isPlainObject","isWindow","Object","getPrototypeOf","prototype","window","isSameOrigin","href","origin","location","protocol","hostname","port","startsWith","class2type","split","forEach","toLowerCase","String","toString","call"],"mappings":";;;;;;;AAAAA,UACE,WAeE,QAASC,GAAQC,GACb,MAAOA,IAAUA,EAAOC,cAAgBC,MAG5C,QAASC,GAAYC,GACjB,OAAQC,EAASD,KAASE,EAAWF,IAA6B,gBAAdA,GAAIG,SAAuBC,EAAWJ,GAG9F,QAASK,GAAUL,GACf,MAAuB,iBAAV,GAGjB,QAASM,GAAUN,GACf,MAAsB,mBAARA,GAGlB,QAASO,GAAWP,GAChB,MAAc,OAAPA,GAAeA,EAAIQ,UAAYR,EAAIS,cAG9C,QAASC,GAAcV,GACnB,GAAIW,EACJ,KAAKA,IAAQX,GACT,GAAkB,OAAdA,EAAIW,GACJ,OAAO,CAGf,QAAO,EAGX,QAASP,GAAWQ,GAChB,MAAsB,YAAfC,EAAKD,GAGhB,QAASV,GAAWF,GAChB,MAAOA,IAAQA,YAAec,MAsBlC,QAASC,GAASf,GACd,MAAqB,gBAAPA,GAGlB,QAASgB,GAAShB,GACd,MAAoB,UAAba,EAAKb,GAGhB,QAASiB,GAAcjB,GACnB,MAAOgB,GAAShB,KAASkB,EAASlB,IAAQmB,OAAOC,eAAepB,IAAQmB,OAAOE,UAGnF,QAASpB,GAASD,GACd,MAAsB,gBAARA,GAGlB,QAASkB,GAASlB,GACd,MAAOA,IAAOA,GAAOA,EAAIsB,OAG7B,QAASC,GAAaC,GAClB,GAAIA,EAAM,CACN,GAAIC,GAASC,SAASC,SAAW,KAAOD,SAASE,QAIjD,OAHIF,UAASG,OACTJ,GAAU,IAAMC,SAASG,MAEtBL,EAAKM,WAAWL,IAjG/B,GAAIZ,GAAO,WACP,GAAIkB,KAOJ,OAJA,gEAAgEC,MAAM,KAAKC,QAAQ,SAAStB,GACxFoB,EAAW,WAAapB,EAAO,KAAOA,EAAKuB,gBAGxC,SAAclC,GACjB,MAAc,OAAPA,EAAcmC,OAAOnC,GACxB+B,EAAWK,SAASC,KAAKrC,KAAS,YA2F9C,QAEIL,QAASA,EAETI,YAAaA,EAEbM,UAAWA,EAEXC,UAAWA,EAEXC,WAAYA,EAEZG,cAAeA,EAEfN,WAAYA,EAEZF,WAAYA,EAEZa,SAAUA,EAEVC,SAAUA,EAEVC,cAAeA,EAEfhB,SAAUA,EAEVsB,aAAcA,EAEdL,SAAUA,EAEVL,KAAMA","file":"../types.js","sourcesContent":["define([\r\n],function(){\r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        \"Boolean Number String Function Array Date RegExp Object Error\".split(\" \").forEach(function(name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n    function isArray(object) {\r\n        return object && object.constructor === Array;\r\n    }\r\n\r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    function isBoolean(obj) {\r\n        return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && (obj instanceof Node);\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isObject(obj) {\r\n        return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: isDefined,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isNumber: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isWindow: isWindow,\r\n\r\n        type: type\r\n    };\r\n\r\n});"]}