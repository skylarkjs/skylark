{"version":3,"sources":["css.js"],"names":["define","skylark","langx","noder","_createStyleSheet","external","options","node","props","type","id","count","media","create","mixin","rel","async","createElement","append","head","sheetsById","createStyleSheet","css","sheetId","addSheetRules","deleteSheetRule","rule","sheet","isNumber","deleteRuleFunc","call","each","rulesPropName","i","_rule","this","deleteRule","defaultSheetId","removeStyleSheet","Error","remove","insertRule","selector","index","insertSheetRule","addRules","rules","length","insertRuleFunc","isPlainObject","toString","createTextNode","isAtRule","str","startsWith","json","strAttr","name","value","depth","SPACE","repeat","trim","adjust","parentName","strAt","values","isString","strNode","n","adjusted","document","getElementsByTagName","defaultSheet","removeRule","_insertRule","addRule"],"mappings":";;;;;;;AAAAA,QACI,YACA,UACA,WACD,SAASC,EAASC,EAAOC,GAwCxB,QAASC,GAAkBC,EAASC,GAChC,GAAIC,GACAC,GACIC,KAAO,YAEXC,EAAMC,GAsBV,OApBAL,GAAUA,MACNA,EAAQM,QACRJ,EAAMI,MAAQN,EAAQM,OAItBL,EADAF,EACOF,EAAMU,OAAO,OAAOX,EAAMY,MAAMN,GACnCO,IAAO,aACPC,OAAQ,KAGLb,EAAMc,cAAc,QAAQT,GAGvCL,EAAMe,OAAOC,EAAKZ,GAClBa,EAAWV,IACPA,GAAKA,EACLH,KAAMA,GAGHG,EAGX,QAASW,GAAiBC,EAAIhB,GACrBA,IACDA,KAEJ,IAAIiB,GAAUnB,GAAkB,EAAME,EAKtC,OAJIgB,IACAE,EAAcD,EAAQD,GAGnBC,EAiCX,QAASE,GAAgBF,EAASG,GAC9B,GAAIC,GAAQP,EAAWG,EAWvB,OAVIrB,GAAM0B,SAASF,GACfG,EAAeC,KAAKH,EAAOD,GAE3BxB,EAAM6B,KAAKJ,EAAMK,GAAgB,SAASC,EAAGC,GACzC,GAAIR,IAASQ,EAET,MADAL,GAAeC,KAAKH,EAAOM,IACpB,IAIZE,KAGX,QAASC,GAAWV,GAEhB,MADAD,GAAgBY,EAAgBX,GACzBS,KAGX,QAASG,GAAiBf,GACtB,GAAIA,IAAYc,EACZ,KAAM,IAAIE,OAAM,4CAEpB,IAAIZ,GAAQP,EAAWG,EAIvB,cAHOH,GAAWG,GAElBpB,EAAMqC,OAAOb,EAAMpB,MACZ4B,KASX,QAASM,GAAWC,EAAUpB,EAAKqB,GAC/B,MAAOR,MAAKS,gBAAgBP,EAAgBK,EAAUpB,EAAKqB,GAO/D,QAASE,GAASC,GACd,MAAOX,MAAKU,SAASR,EAAeS,GAUxC,QAASF,GAAgBrB,EAASmB,EAAUpB,EAAKqB,GAC7C,IAAKD,IAAapB,EACd,QAGJ,IAAIK,GAAQP,EAAWG,EAGvB,OAFAoB,GAAQA,GAAShB,EAAMK,GAAee,OAE/BC,EAAelB,KAAKH,EAAOe,EAAUpB,EAAKqB,GAYrD,QAASnB,GAAcD,EAAQuB,GAC3B,GACIxB,GADAK,EAAQP,EAAWG,EAUvB,OAPID,GADApB,EAAM+C,cAAcH,GACdI,EAASJ,GAETA,EAGV3C,EAAMe,OAAOS,EAAMpB,KAAKJ,EAAMgD,eAAe7B,IAEtCa,KAGX,QAASiB,GAASC,GACd,MAAOA,GAAIC,WAAW,KAG1B,QAASJ,GAASK,GACd,GAAIC,GAAU,SAAUC,EAAMC,EAAOC,GACjC,MAAOrC,GAAIsC,MAAMC,OAAOF,GAASF,EAAKK,OAAS,KAAOJ,EAAMI,OAAS,OAGrEC,EAAS,SAASC,EAAWP,EAAKE,GAQlC,MAPIK,KACIZ,EAASY,GACTL,GAAS,EAETF,EAAQO,EAAaP,IAIzBA,KAAOA,EACPE,MAAQA,IAIZM,EAAQ,SAASR,EAAKS,EAAOP,GAC7B,GAAIN,GAAM,EACV,IAAInD,EAAMiE,SAASD,GACfb,EAAM/B,EAAIsC,MAAMC,OAAOF,GAASF,EAAKK,OAAS,KAAQI,EAAS,UAC5D,CAAA,IAAIhE,EAAM+C,cAAciB,GAM3B,KAAM,IAAI3B,OAAM,iBALhBc,IAAO/B,EAAIsC,MAAMC,OAAOF,GAASF,EAAKK,OAAS,OAC/CT,GAAOe,EAAQ,GAAGF,EAAOP,EAAM,GAC/BN,GAAO/B,EAAIsC,MAAMC,OAAOF,GAAS,MAKrC,MAAON,IAGPe,EAAU,SAAUX,EAAMS,EAAQP,GAClC,GAAIN,GAAM,EACV,IAAII,EAAM,CACNJ,GAAO/B,EAAIsC,MAAMC,OAAOF,GAASF,EAAKK,OAAS,MAE/C,KAAK,GAAIO,KAAKH,GAAQ,CAClB,GAAIR,GAAOQ,EAAOG,EACdnE,GAAMiE,SAAST,KAEfL,GAAOG,EAAQa,EAAEX,EAAMC,EAAM,IAIrCN,GAAO/B,EAAIsC,MAAMC,OAAOF,GAAS,MAGrC,IAAK,GAAIU,KAAKH,GAAQ,CAClB,GAAIR,GAAOQ,EAAOG,EAClB,IAAInE,EAAM+C,cAAcS,GAAQ,CAC5B,GAAIY,GAAWP,EAAON,EAAKY,EAAEV,EAC7BN,IAAQe,EAAQE,EAASb,KAAKC,EAAMY,EAASX,QAIrD,MAAON,IAGPA,EAAM,EACV,KAAK,GAAIgB,KAAKd,GAENF,GADAD,EAASiB,GACFJ,EAAMI,EAAEd,EAAKc,GAAG,GAEhBD,EAAQC,EAAEd,EAAKc,GAAG,EAGjC,OAAOhB,GAIX,QAAS/B,KACL,MAAOA,GAtRX,GAOI0B,GAPA7B,EAAOoD,SAASC,qBAAqB,QAAQ,GAC7C7D,EAAQ,EAERS,KACAiB,EAAiBjC,IACjBqE,EAAerD,EAAWiB,GAC1BL,EAAiB,YAAcyC,GAAgB,WAAa,QAE5D5C,EAAiB4C,EAAarC,YAAcqC,EAAaC,UAE7D,IAAID,EAAahC,WAAY,CACzB,GAAIkC,GAAcF,EAAahC,UAC/BO,GAAiB,SAASN,EAAUpB,EAAKqB,GACrCgC,EAAY7C,KAAKK,KAAMO,EAAW,IAAMpB,EAAM,IAAKqB,QAGvDK,GAAiByB,EAAaG,OA+RlC,OAtBA1E,GAAMY,MAAMQ,GACRsC,MAAQ,KAERf,SAAWA,EAEXrB,cAAgBA,EAEhBH,iBAAkBA,EAElBI,gBAAkBA,EAElBW,WAAaA,EAEbK,WAAaA,EAEbG,gBAAkBA,EAElBN,iBAAmBA,EAEnBY,SAAWA,IAGRjD,EAAQqB,IAAMA","file":"../css.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\"\r\n], function(skylark, langx, noder) {\r\n\r\n    var head = document.getElementsByTagName(\"head\")[0],\r\n        count = 0,\r\n        sheetsByUrl = {},\r\n        sheetsById = {},\r\n        defaultSheetId = _createStyleSheet(),\r\n        defaultSheet = sheetsById[defaultSheetId],\r\n        rulesPropName = (\"cssRules\" in defaultSheet) ? \"cssRules\" : \"rules\",\r\n        insertRuleFunc,\r\n        deleteRuleFunc = defaultSheet.deleteRule || defaultSheet.removeRule;\r\n\r\n    if (defaultSheet.insertRule) {\r\n        var _insertRule = defaultSheet.insertRule;\r\n        insertRuleFunc = function(selector, css, index) {\r\n            _insertRule.call(this, selector + \"{\" + css + \"}\", index);\r\n        };\r\n    } else {\r\n        insertRuleFunc = defaultSheet.addRule;\r\n    }\r\n\r\n    function normalizeSelector(selectorText) {\r\n        var selector = [],\r\n            last, len;\r\n        last = defaultSheet[rulesPropName].length;\r\n        insertRuleFunc.call(defaultSheet, selectorText, ';');\r\n        len = defaultSheet[rulesPropName].length;\r\n        for (var i = len - 1; i >= last; i--) {\r\n            selector.push(_sheet[_rules][i].selectorText);\r\n            deleteRuleFunc.call(defaultSheet, i);\r\n        }\r\n        return selector.reverse().join(', ');\r\n    }\r\n\r\n    /*\r\n     * create a stylesheet element.\r\n     * @param {Boolean} external\r\n     * @param {Object} options\r\n     * @param {String} [options.media = null]\r\n     */\r\n    function _createStyleSheet(external,options ) {\r\n        var node,\r\n            props = {\r\n                type : \"text/css\"\r\n            },\r\n            id = (count++);\r\n\r\n        options = options || {};\r\n        if (options.media) {\r\n            props.media = options.media;\r\n        }\r\n\r\n        if (external) {\r\n            node = noder.create(\"link\",langx.mixin(props,{\r\n                rel  : \"stylesheet\",\r\n                async : false\r\n            }));\r\n        } else {\r\n            node = noder.createElement(\"style\",props);\r\n        }\r\n\r\n        noder.append(head,node);\r\n        sheetsById[id] = {\r\n            id : id,\r\n            node :node\r\n        };\r\n\r\n        return id;\r\n    }\r\n\r\n    function createStyleSheet(css,options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var sheetId = _createStyleSheet(false,options);\r\n        if (css) {\r\n            addSheetRules(sheetId,css);\r\n        }\r\n\r\n        return sheetId;\r\n    }\r\n\r\n    function loadStyleSheet(url, options) {\r\n        var sheet = sheetsByUrl[url];\r\n        if (!sheet) {\r\n            var sheetId = _createStyleSheet(true,options);\r\n\r\n            sheet = sheetsByUrl[url] = sheetsById[sheetId];\r\n            langx.mixin(sheet,{\r\n                state: 0, //0:unload,1:loaded,-1:loaderror\r\n                url : url,\r\n                deferred : new langx.Deferred()\r\n            });\r\n\r\n            var node = sheet.node;\r\n\r\n            startTime = new Date().getTime();\r\n\r\n            node.onload = function() {\r\n                sheet.state = 1;\r\n                sheet.deferred.resolve(sheet.id);\r\n            },\r\n            node.onerror = function(e) {\r\n                sheet.state = -1;\r\n                sheet.deferred.reject(e);\r\n            };\r\n\r\n            node.href = sheet.url;\r\n        }\r\n        return sheet.deferred.promise;\r\n    }\r\n\r\n    function deleteSheetRule(sheetId, rule) {\r\n        var sheet = sheetsById[sheetId];\r\n        if (langx.isNumber(rule)) {\r\n            deleteRuleFunc.call(sheet, rule);\r\n        } else {\r\n            langx.each(sheet[rulesPropName], function(i, _rule) {\r\n                if (rule === _rule) {\r\n                    deleteRuleFunc.call(sheet, i);\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function deleteRule(rule) {\r\n        deleteSheetRule(defaultSheetId, rule);\r\n        return this;\r\n    }\r\n\r\n    function removeStyleSheet(sheetId) {\r\n        if (sheetId === defaultSheetId) {\r\n            throw new Error(\"The default stylesheet can not be deleted\");\r\n        }\r\n        var sheet = sheetsById[sheetId];\r\n        delete sheetsById[sheetId];\r\n\r\n        noder.remove(sheet.node);\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the default stylesheet.\r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertRule(selector, css, index) {\r\n        return this.insertSheetRule(defaultSheetId, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add rules to the default stylesheet.\r\n     * @param {Object} rules\r\n     */\r\n    function addRules(rules) {\r\n        return this.addRules(defaultSheetId,rules);\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the stylesheet specified by sheetId.\r\n     * @param {Number} sheetId  \r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertSheetRule(sheetId, selector, css, index) {\r\n        if (!selector || !css) {\r\n            return -1;\r\n        }\r\n\r\n        var sheet = sheetsById[sheetId];\r\n        index = index || sheet[rulesPropName].length;\r\n\r\n        return insertRuleFunc.call(sheet, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add  rules to stylesheet.\r\n     * @param {Number} sheetId  \r\n     * @param {Object|String} rules\r\n     * @return this\r\n     * @example insertSheetRules(sheetId,{\r\n     * \r\n     * });\r\n     */\r\n    function addSheetRules(sheetId,rules) {\r\n        var sheet = sheetsById[sheetId],\r\n            css;\r\n        if (langx.isPlainObject(rules)) {\r\n            css = toString(rules);\r\n        } else {\r\n            css = rules;\r\n        }\r\n\r\n        noder.append(sheet.node,noder.createTextNode(css));\r\n        \r\n        return this;\r\n    }\r\n\r\n    function isAtRule(str) {\r\n        return str.startsWith(\"@\");\r\n    }\r\n\r\n    function toString(json){\r\n        var strAttr = function (name, value, depth) {\r\n            return css.SPACE.repeat(depth) + name.trim() + ': ' + value.trim() + \";\\n\";\r\n        };\r\n\r\n        var adjust = function(parentName,name,depth) {\r\n            if (parentName) {\r\n                if (isAtRule(parentName)) {\r\n                    depth += 1;\r\n                } else {\r\n                    name =  parentName + name;\r\n                }                \r\n            }\r\n            return {\r\n                name : name,\r\n                depth : depth\r\n            }\r\n        };\r\n\r\n        var strAt = function(name,values,depth) {\r\n            var str = \"\";\r\n            if (langx.isString(values)) {\r\n                str = css.SPACE.repeat(depth) + name.trim() + \" \\\"\" + values + \" \\\";\";\r\n            } else if (langx.isPlainObject(values)) {\r\n                str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n                str += strNode(\"\",values,depth+1);\r\n                str += css.SPACE.repeat(depth) + \"}\\n\";\r\n\r\n            } else {\r\n                throw new Error(\"Invalid param!\");\r\n            }\r\n            return str;\r\n        };\r\n\r\n        var strNode = function (name, values, depth) {\r\n            var str = \"\";\r\n            if (name) {\r\n                str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n\r\n                for (var n in values) {\r\n                    var value =values[n];\r\n                    if (langx.isString(value)) {\r\n                        // css property\r\n                        str += strAttr(n,value,depth+1)\r\n                    }\r\n                }\r\n\r\n                str += css.SPACE.repeat(depth) + \"}\\n\";\r\n            }\r\n\r\n            for (var n in values) {\r\n                var value =values[n];\r\n                if (langx.isPlainObject(value)) {\r\n                    var adjusted = adjust(name,n,depth);\r\n                    str +=  strNode(adjusted.name,value,adjusted.depth);\r\n                } \r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n        var str = \"\";\r\n        for (var n in json) {\r\n            if (isAtRule(n)) {\r\n                str += strAt(n,json[n],0);\r\n            } else {\r\n                str += strNode(n,json[n],0);\r\n            }\r\n        }\r\n        return str;\r\n    };\r\n   \r\n\r\n    function css() {\r\n        return css;\r\n    }\r\n\r\n    langx.mixin(css, {\r\n        SPACE : \"\\t\",\r\n\r\n        addRules : addRules,\r\n\r\n        addSheetRules : addSheetRules,\r\n\r\n        createStyleSheet: createStyleSheet,\r\n\r\n        deleteSheetRule : deleteSheetRule,\r\n\r\n        deleteRule : deleteRule,\r\n\r\n        insertRule : insertRule,\r\n\r\n        insertSheetRule : insertSheetRule,\r\n\r\n        removeStyleSheet : removeStyleSheet,\r\n\r\n        toString : toString\r\n    });\r\n\r\n    return skylark.css = css;\r\n});\r\n"]}