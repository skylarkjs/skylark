{"version":3,"sources":["finder.js"],"names":["define","skylark","langx","browser","noder","velm","ancestor","node","selector","root","rootIsSelector","isString","parentNode","matches","ancestors","ret","push","byId","id","doc","getElementById","children","childNodes","i","length","nodeType","closest","descendants","elm","slice","call","querySelectorAll","matchError","local","query","descendant","querySelector","nodes","find","document","body","findAll","firstChild","first","nextSibling","lastChild","last","previousSibling","nativeMatchesSelector","replace","match","isArrayLike","inArray","isPlainObject","check","adjacent","nextSiblings","parent","previousSiblings","siblings","filter","Array","prototype","matchesSelector","parser","rawMatch","separator","combinator","combinatorChildren","tagName","className","attributeKey","attributeOperator","attributeQuote","attributeValue","pseudoMarker","pseudoClass","pseudoQuote","pseudoClassQuotedValue","pseudoClassValue","separatorIndex","parsed","expressions","combinatorIndex","currentSeparator","reversed","reverseCombinator","tag","currentParsed","reUnescape","classList","classes","value","regexp","RegExp","escapeRegExp","pseudos","key","type","test","indexOf","attributes","operator","cache","reverseCache","parse","expression","isReversed","Slick","currentCache","raw","reverse","this","exp","parts","j","cexp","from","to","string","apply","parseSelector","checked","contains","idx","text","$","disabled","enabled","eq","focus","activeElement","href","tabindex","gt","has","sel","hidden","lt","not","selected","visible","offsetWidth","divide","cond","nativeSelector","customPseudos","JSON","stringify","part","undefined","toUpperCase","nodeName","getAttribute","cls","pseudo","hasAttribute","simpleExpCounter","currentExpression","item","combine","bit","node1","op","prev","next","divided","single","currentBit","founds","found","currentItems","map","concat","finder","mixin"],"mappings":"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","file":"../finder.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./browser\",\r\n    \"./noder\"\r\n], function(skylark, langx, browser, noder, velm) {\r\n    var local = {},\r\n        filter = Array.prototype.filter,\r\n        slice = Array.prototype.slice,\r\n        nativeMatchesSelector = browser.matchesSelector;\r\n\r\n    /*\r\n    ---\r\n    name: Slick.Parser\r\n    description: Standalone CSS3 Selector parser\r\n    provides: Slick.Parser\r\n    ...\r\n    */\r\n    ;\r\n    (function() {\r\n\r\n        var parsed,\r\n            separatorIndex,\r\n            combinatorIndex,\r\n            reversed,\r\n            cache = {},\r\n            reverseCache = {},\r\n            reUnescape = /\\\\/g;\r\n\r\n        var parse = function(expression, isReversed) {\r\n            if (expression == null) return null;\r\n            if (expression.Slick === true) return expression;\r\n            expression = ('' + expression).replace(/^\\s+|\\s+$/g, '');\r\n            reversed = !!isReversed;\r\n            var currentCache = (reversed) ? reverseCache : cache;\r\n            if (currentCache[expression]) return currentCache[expression];\r\n            parsed = {\r\n                Slick: true,\r\n                expressions: [],\r\n                raw: expression,\r\n                reverse: function() {\r\n                    return parse(this.raw, true);\r\n                }\r\n            };\r\n            separatorIndex = -1;\r\n            while (expression != (expression = expression.replace(regexp, parser)));\r\n            parsed.length = parsed.expressions.length;\r\n            return currentCache[parsed.raw] = (reversed) ? reverse(parsed) : parsed;\r\n        };\r\n\r\n        var reverseCombinator = function(combinator) {\r\n            if (combinator === '!') return ' ';\r\n            else if (combinator === ' ') return '!';\r\n            else if ((/^!/).test(combinator)) return combinator.replace(/^!/, '');\r\n            else return '!' + combinator;\r\n        };\r\n\r\n        var reverse = function(expression) {\r\n            var expressions = expression.expressions;\r\n            for (var i = 0; i < expressions.length; i++) {\r\n                var exp = expressions[i];\r\n                var last = {\r\n                    parts: [],\r\n                    tag: '*',\r\n                    combinator: reverseCombinator(exp[0].combinator)\r\n                };\r\n\r\n                for (var j = 0; j < exp.length; j++) {\r\n                    var cexp = exp[j];\r\n                    if (!cexp.reverseCombinator) cexp.reverseCombinator = ' ';\r\n                    cexp.combinator = cexp.reverseCombinator;\r\n                    delete cexp.reverseCombinator;\r\n                }\r\n\r\n                exp.reverse().push(last);\r\n            }\r\n            return expression;\r\n        };\r\n\r\n        var escapeRegExp = (function() {\r\n            // Credit: XRegExp 0.6.1 (c) 2007-2008 Steven Levithan <http://stevenlevithan.com/regex/xregexp/> MIT License\r\n            var from = /(?=[\\-\\[\\]{}()*+?.\\\\\\^$|,#\\s])/g,\r\n                to = '\\\\';\r\n            return function(string) {\r\n                return string.replace(from, to)\r\n            }\r\n        }())\r\n\r\n        var regexp = new RegExp(\r\n            \"^(?:\\\\s*(,)\\\\s*|\\\\s*(<combinator>+)\\\\s*|(\\\\s+)|(<unicode>+|\\\\*)|\\\\#(<unicode>+)|\\\\.(<unicode>+)|\\\\[\\\\s*(<unicode1>+)(?:\\\\s*([*^$!~|]?=)(?:\\\\s*(?:([\\\"']?)(.*?)\\\\9)))?\\\\s*\\\\](?!\\\\])|(:+)(<unicode>+)(?:\\\\((?:(?:([\\\"'])([^\\\\13]*)\\\\13)|((?:\\\\([^)]+\\\\)|[^()]*)+))\\\\))?)\"\r\n            .replace(/<combinator>/, '[' + escapeRegExp(\">+~`!@$%^&={}\\\\;</\") + ']')\r\n            .replace(/<unicode>/g, '(?:[\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n            .replace(/<unicode1>/g, '(?:[:\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n        );\r\n\r\n        function parser(\r\n            rawMatch,\r\n\r\n            separator,\r\n            combinator,\r\n            combinatorChildren,\r\n\r\n            tagName,\r\n            id,\r\n            className,\r\n\r\n            attributeKey,\r\n            attributeOperator,\r\n            attributeQuote,\r\n            attributeValue,\r\n\r\n            pseudoMarker,\r\n            pseudoClass,\r\n            pseudoQuote,\r\n            pseudoClassQuotedValue,\r\n            pseudoClassValue\r\n        ) {\r\n            if (separator || separatorIndex === -1) {\r\n                parsed.expressions[++separatorIndex] = [];\r\n                combinatorIndex = -1;\r\n                if (separator) return '';\r\n            }\r\n\r\n            if (combinator || combinatorChildren || combinatorIndex === -1) {\r\n                combinator = combinator || ' ';\r\n                var currentSeparator = parsed.expressions[separatorIndex];\r\n                if (reversed && currentSeparator[combinatorIndex])\r\n                    currentSeparator[combinatorIndex].reverseCombinator = reverseCombinator(combinator);\r\n                currentSeparator[++combinatorIndex] = {\r\n                    combinator: combinator,\r\n                    tag: '*'\r\n                };\r\n            }\r\n\r\n            var currentParsed = parsed.expressions[separatorIndex][combinatorIndex];\r\n\r\n            if (tagName) {\r\n                currentParsed.tag = tagName.replace(reUnescape, '');\r\n\r\n            } else if (id) {\r\n                currentParsed.id = id.replace(reUnescape, '');\r\n\r\n            } else if (className) {\r\n                className = className.replace(reUnescape, '');\r\n\r\n                if (!currentParsed.classList) currentParsed.classList = [];\r\n                if (!currentParsed.classes) currentParsed.classes = [];\r\n                currentParsed.classList.push(className);\r\n                currentParsed.classes.push({\r\n                    value: className,\r\n                    regexp: new RegExp('(^|\\\\s)' + escapeRegExp(className) + '(\\\\s|$)')\r\n                });\r\n\r\n            } else if (pseudoClass) {\r\n                pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue;\r\n                pseudoClassValue = pseudoClassValue ? pseudoClassValue.replace(reUnescape, '') : null;\r\n\r\n                if (!currentParsed.pseudos) currentParsed.pseudos = [];\r\n                currentParsed.pseudos.push({\r\n                    key: pseudoClass.replace(reUnescape, ''),\r\n                    value: pseudoClassValue,\r\n                    type: pseudoMarker.length == 1 ? 'class' : 'element'\r\n                });\r\n\r\n            } else if (attributeKey) {\r\n                attributeKey = attributeKey.replace(reUnescape, '');\r\n                attributeValue = (attributeValue || '').replace(reUnescape, '');\r\n\r\n                var test, regexp;\r\n\r\n                switch (attributeOperator) {\r\n                    case '^=':\r\n                        regexp = new RegExp('^' + escapeRegExp(attributeValue));\r\n                        break;\r\n                    case '$=':\r\n                        regexp = new RegExp(escapeRegExp(attributeValue) + '$');\r\n                        break;\r\n                    case '~=':\r\n                        regexp = new RegExp('(^|\\\\s)' + escapeRegExp(attributeValue) + '(\\\\s|$)');\r\n                        break;\r\n                    case '|=':\r\n                        regexp = new RegExp('^' + escapeRegExp(attributeValue) + '(-|$)');\r\n                        break;\r\n                    case '=':\r\n                        test = function(value) {\r\n                            return attributeValue == value;\r\n                        };\r\n                        break;\r\n                    case '*=':\r\n                        test = function(value) {\r\n                            return value && value.indexOf(attributeValue) > -1;\r\n                        };\r\n                        break;\r\n                    case '!=':\r\n                        test = function(value) {\r\n                            return attributeValue != value;\r\n                        };\r\n                        break;\r\n                    default:\r\n                        test = function(value) {\r\n                            return !!value;\r\n                        };\r\n                }\r\n\r\n                if (attributeValue == '' && (/^[*$^]=$/).test(attributeOperator)) test = function() {\r\n                    return false;\r\n                };\r\n\r\n                if (!test) test = function(value) {\r\n                    return value && regexp.test(value);\r\n                };\r\n\r\n                if (!currentParsed.attributes) currentParsed.attributes = [];\r\n                currentParsed.attributes.push({\r\n                    key: attributeKey,\r\n                    operator: attributeOperator,\r\n                    value: attributeValue,\r\n                    test: test\r\n                });\r\n\r\n            }\r\n\r\n            return '';\r\n        };\r\n\r\n        // Slick NS\r\n\r\n        var Slick = (this.Slick || {});\r\n\r\n        Slick.parse = function(expression) {\r\n            return parse(expression);\r\n        };\r\n\r\n        Slick.escapeRegExp = escapeRegExp;\r\n\r\n        if (!this.Slick) this.Slick = Slick;\r\n\r\n    }).apply(local);\r\n\r\n\r\n    var simpleClassSelectorRE = /^\\.([\\w-]*)$/,\r\n        simpleIdSelectorRE = /^#([\\w-]*)$/,\r\n        slice = Array.prototype.slice;\r\n\r\n\r\n    local.parseSelector = local.Slick.parse;\r\n\r\n\r\n    local.pseudos = {\r\n        // custom pseudos\r\n        checked: function(elm) {\r\n            return !!elm.checked;\r\n        },\r\n\r\n        contains: function(elm, idx, nodes, text) {\r\n            if ($(this).text().indexOf(text) > -1) return this\r\n        },\r\n\r\n        'disabled': function(elm) {\r\n            return !!elm.disabled;\r\n        },\r\n\r\n        'enabled': function(elm) {\r\n            return !elm.disabled;\r\n        },\r\n\r\n        eq: function(elm, idx, nodes, value) {\r\n            return (idx == value);\r\n        },\r\n\r\n        'focus': function(elm) {\r\n            return document.activeElement === elm && (elm.href || elm.type || elm.tabindex);\r\n        },\r\n\r\n        first: function(elm, idx) {\r\n            return (idx === 0);\r\n        },\r\n\r\n        gt: function(elm, idx, nodes, value) {\r\n            return (idx > value);\r\n        },\r\n\r\n        has: function(elm, idx, nodes, sel) {\r\n            return local.querySelector(elm, sel).length > 0;\r\n        },\r\n\r\n\r\n        hidden: function(elm) {\r\n            return !local.pseudos[\"visible\"](elm);\r\n        },\r\n\r\n        last: function(elm, idx, nodes) {\r\n            return (idx === nodes.length - 1);\r\n        },\r\n\r\n        lt: function(elm, idx, nodes, value) {\r\n            return (idx < value);\r\n        },\r\n\r\n        not: function(elm, idx, nodes, sel) {\r\n            return local.match(elm, sel);\r\n        },\r\n\r\n        parent: function(elm) {\r\n            return !!elm.parentNode;\r\n        },\r\n\r\n        selected: function(elm) {\r\n            return !!elm.selected;\r\n        },\r\n\r\n        visible: function(elm) {\r\n            return elm.offsetWidth && elm.offsetWidth\r\n        }\r\n    };\r\n\r\n    local.divide = function(cond) {\r\n        var nativeSelector = \"\",\r\n            customPseudos = [],\r\n            tag,\r\n            id,\r\n            classes,\r\n            attributes,\r\n            pseudos;\r\n\r\n\r\n        if (id = cond.id) {\r\n            nativeSelector += (\"#\" + id);\r\n        }\r\n        if (classes = cond.classes) {\r\n            for (var i = classes.length; i--;) {\r\n                nativeSelector += (\".\" + classes[i].value);\r\n            }\r\n        }\r\n        if (attributes = cond.attributes) {\r\n            for (var i = 0; i < attributes.length; i++) {\r\n                if (attributes[i].operator) {\r\n                    nativeSelector += (\"[\" + attributes[i].key + attributes[i].operator + JSON.stringify(attributes[i].value)  +\"]\");\r\n                } else {\r\n                    nativeSelector += (\"[\" + attributes[i].key + \"]\");\r\n                }\r\n            }\r\n        }\r\n        if (pseudos = cond.pseudos) {\r\n            for (i = pseudos.length; i--;) {\r\n                part = pseudos[i];\r\n                if (this.pseudos[part.key]) {\r\n                    customPseudos.push(part);\r\n                } else {\r\n                    if (part.value !== undefined) {\r\n                        nativeSelector += (\":\" + part.key + \"(\" + JSON.stringify(part))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tag = cond.tag) {\r\n            nativeSelector = tag.toUpperCase() + nativeSelector;\r\n        }\r\n\r\n        if (!nativeSelector) {\r\n            nativeSelector = \"*\";\r\n        }\r\n\r\n        return {\r\n            nativeSelector: nativeSelector,\r\n            customPseudos: customPseudos\r\n        }\r\n\r\n    };\r\n\r\n    local.check = function(node, cond, idx, nodes) {\r\n        var tag,\r\n            id,\r\n            classes,\r\n            attributes,\r\n            pseudos;\r\n\r\n        if (tag = cond.tag) {\r\n            var nodeName = node.nodeName.toUpperCase();\r\n            if (tag == '*') {\r\n                if (nodeName < '@') return false; // Fix for comment nodes and closed nodes\r\n            } else {\r\n                if (nodeName != (tag || \"\").toUpperCase()) return false;\r\n            }\r\n        }\r\n\r\n        if (id = cond.id) {\r\n            if (node.getAttribute('id') != id) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        var i, part, cls, pseudo;\r\n\r\n        if (classes = cond.classes) {\r\n            for (i = classes.length; i--;) {\r\n                cls = node.getAttribute('class');\r\n                if (!(cls && classes[i].regexp.test(cls))) return false;\r\n            }\r\n        }\r\n\r\n        if (attributes)\r\n            for (i = attributes.length; i--;) {\r\n                part = attributes[i];\r\n                if (part.operator ? !part.test(node.getAttribute(part.key)) : !node.hasAttribute(part.key)) return false;\r\n            }\r\n        if (pseudos = cond.pseudos) {\r\n            for (i = pseudos.length; i--;) {\r\n                part = pseudos[i];\r\n                if (pseudo = this.pseudos[part.key]) {\r\n                    if (!pseudo(node, idx, nodes, part.value)) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    if (!nativeMatchesSelector.call(node, part.key)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    local.match = function(node, selector) {\r\n\r\n        var parsed = local.Slick.parse(selector);\r\n        if (!parsed) {\r\n            return true;\r\n        }\r\n\r\n        // simple (single) selectors\r\n        var expressions = parsed.expressions,\r\n            simpleExpCounter = 0,\r\n            i;\r\n        for (i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            if (currentExpression.length == 1) {\r\n                var exp = currentExpression[0];\r\n                if (this.check(node, exp)) {\r\n                    return true;\r\n                }\r\n                simpleExpCounter++;\r\n            }\r\n        }\r\n\r\n        if (simpleExpCounter == parsed.length) {\r\n            return false;\r\n        }\r\n\r\n        var nodes = this.query(document, parsed),\r\n            item;\r\n        for (i = 0; item = nodes[i++];) {\r\n            if (item === node) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    local.combine = function(elm, bit) {\r\n        var op = bit.combinator,\r\n            cond = bit,\r\n            node1,\r\n            nodes = [];\r\n\r\n        switch (op) {\r\n            case '>': // direct children\r\n                nodes = children(elm, cond);\r\n                break;\r\n            case '+': // next sibling\r\n                node1 = nextSibling(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '^': // first child\r\n                node1 = firstChild(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '~': // next siblings\r\n                nodes = nextSiblings(elm, cond);\r\n                break;\r\n            case '++': // next sibling and previous sibling\r\n                var prev = previousSibling(elm, cond, true),\r\n                    next = nextSibling(elm, cond, true);\r\n                if (prev) {\r\n                    nodes.push(prev);\r\n                }\r\n                if (next) {\r\n                    nodes.push(next);\r\n                }\r\n                break;\r\n            case '~~': // next siblings and previous siblings\r\n                nodes = siblings(elm, cond);\r\n                break;\r\n            case '!': // all parent nodes up to document\r\n                nodes = ancestors(elm, cond);\r\n                break;\r\n            case '!>': // direct parent (one level)\r\n                node1 = parent(elm, cond);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '!+': // previous sibling\r\n                nodes = previousSibling(elm, cond, true);\r\n                break;\r\n            case '!^': // last child\r\n                node1 = lastChild(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '!~': // previous siblings\r\n                nodes = previousSiblings(elm, cond);\r\n                break;\r\n            default:\r\n                var divided = this.divide(bit);\r\n                nodes = slice.call(elm.querySelectorAll(divided.nativeSelector));\r\n                if (divided.customPseudos) {\r\n                    for (var i = divided.customPseudos.length - 1; i >= 0; i--) {\r\n                        nodes = filter.call(nodes, function(item, idx) {\r\n                            return local.check(item, {\r\n                                pseudos: [divided.customPseudos[i]]\r\n                            }, idx, nodes)\r\n                        });\r\n                    }\r\n                }\r\n                break;\r\n\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    local.query = function(node, selector, single) {\r\n\r\n\r\n        var parsed = this.Slick.parse(selector);\r\n\r\n        var\r\n            founds = [],\r\n            currentExpression, currentBit,\r\n            expressions = parsed.expressions;\r\n\r\n        for (var i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            var currentItems = [node],\r\n                found;\r\n            for (var j = 0;\r\n                (currentBit = currentExpression[j]); j++) {\r\n                found = langx.map(currentItems, function(item, i) {\r\n                    return local.combine(item, currentBit)\r\n                });\r\n                if (found) {\r\n                    currentItems = found;\r\n                }\r\n            }\r\n            if (found) {\r\n                founds = founds.concat(found);\r\n            }\r\n        }\r\n\r\n        return founds;\r\n    }\r\n\r\n\r\n    function ancestor(node, selector, root) {\r\n        var rootIsSelector = root && langx.isString(root);\r\n        while (node = node.parentNode) {\r\n            if (matches(node, selector)) {\r\n                return node;\r\n            }\r\n            if (root) {\r\n                if (rootIsSelector) {\r\n                    if (matches(node,root)) {\r\n                        break;\r\n                    }\r\n                } else if (node == root) {\r\n                    break;\r\n                }\r\n            } \r\n        }\r\n        return null;\r\n    }\r\n\r\n    function ancestors(node, selector,root) {\r\n        var ret = [],\r\n            rootIsSelector = root && langx.isString(root);\r\n        while (node = node.parentNode) {\r\n            if (matches(node, selector)) {\r\n                ret.push(node);\r\n            }\r\n            if (root) {\r\n                if (rootIsSelector) {\r\n                    if (matches(node,root)) {\r\n                        break;\r\n                    }\r\n                } else if (node == root) {\r\n                    break;\r\n                }\r\n            } \r\n\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function byId(id, doc) {\r\n        doc = doc || noder.doc();\r\n        return doc.getElementById(id);\r\n    }\r\n\r\n    function children(node, selector) {\r\n        var childNodes = node.childNodes,\r\n            ret = [];\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            var node = childNodes[i];\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function closest(node, selector) {\r\n        while (node && !(matches(node, selector))) {\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    function descendants(elm, selector) {\r\n        // Selector\r\n        try {\r\n            return slice.call(elm.querySelectorAll(selector));\r\n        } catch (matchError) {\r\n            //console.log(matchError);\r\n        }\r\n        return local.query(elm, selector);\r\n    }\r\n\r\n    function descendant(elm, selector) {\r\n        // Selector\r\n        try {\r\n            return elm.querySelector(selector);\r\n        } catch (matchError) {\r\n            //console.log(matchError);\r\n        }\r\n        var nodes = local.query(elm, selector);\r\n        if (nodes.length > 0) {\r\n            return nodes[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function find(selector) {\r\n        return descendant(document.body, selector);\r\n    }\r\n\r\n    function findAll(selector) {\r\n        return descendants(document.body, selector);\r\n    }\r\n\r\n    function firstChild(elm, selector, first) {\r\n        var childNodes = elm.childNodes,\r\n            node = childNodes[0];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (first) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function lastChild(elm, selector, last) {\r\n        var childNodes = elm.childNodes,\r\n            node = childNodes[childNodes.length - 1];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (last) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function matches(elm, selector) {\r\n        if (!selector || !elm || elm.nodeType !== 1) {\r\n            return false\r\n        }\r\n\r\n        if (langx.isString(selector)) {\r\n            try {\r\n                return nativeMatchesSelector.call(elm, selector.replace(/\\[([^=]+)=\\s*([^'\"\\]]+?)\\s*\\]/g, '[$1=\"$2\"]'));\r\n            } catch (matchError) {\r\n                //console.log(matchError);\r\n            }\r\n            return local.match(elm, selector);\r\n        } else if (langx.isArrayLike(selector)) {\r\n            return langx.inArray(elm,selector);\r\n        } else if (langx.isPlainObject(selector)){    \r\n            return local.check(elm, selector);\r\n        } else {\r\n            return elm === selector;\r\n        }\r\n\r\n    }\r\n\r\n    function nextSibling(elm, selector, adjacent) {\r\n        var node = elm.nextSibling;\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (adjacent) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function nextSiblings(elm, selector) {\r\n        var node = elm.nextSibling,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n\r\n    function parent(elm, selector) {\r\n        var node = elm.parentNode;\r\n        if (node && (!selector || matches(node, selector))) {\r\n            return node;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function previousSibling(elm, selector, adjacent) {\r\n        var node = elm.previousSibling;\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (adjacent) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function previousSiblings(elm, selector) {\r\n        var node = elm.previousSibling,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function siblings(elm, selector) {\r\n        var node = elm.parentNode.firstChild,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1 && node !== elm) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    var finder = function() {\r\n        return finder;\r\n    };\r\n\r\n    langx.mixin(finder, {\r\n\r\n        ancestor: ancestor,\r\n\r\n        ancestors: ancestors,\r\n\r\n        byId: byId,\r\n\r\n        children: children,\r\n\r\n        closest: closest,\r\n\r\n        descendant: descendant,\r\n\r\n        descendants: descendants,\r\n\r\n        find: find,\r\n\r\n        findAll: findAll,\r\n\r\n        firstChild: firstChild,\r\n\r\n        lastChild: lastChild,\r\n\r\n        matches: matches,\r\n\r\n        nextSibling: nextSibling,\r\n\r\n        nextSiblings: nextSiblings,\r\n\r\n        parent: parent,\r\n\r\n        previousSibling: previousSibling,\r\n\r\n        previousSiblings: previousSiblings,\r\n\r\n        pseudos: local.pseudos,\r\n\r\n        siblings: siblings\r\n    });\r\n\r\n    return skylark.finder = finder;\r\n});\r\n"]}