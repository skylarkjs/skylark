{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","noder","datax","finder","geom","eventer","styler","draggable","elm","params","Draggable","droppable","Droppable","dnd","DndManager","on","off","attr","removeAttr","pagePosition","addClass","height","Evented","inherit","klassName","init","prepare","e","create","dragSource","dragHandle","trigger","start","event","p","this","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","removeClass","manager","self","clone","forEach","eventName","isFunction","mousedown","handle","closest","target","source","mouseup","dragstart","dragend","stop","hoverClass","activeClass","acceptable","_params","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","mixin"],"mappings":"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","file":"../dnd.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n], function(skylark, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = langx.Evented.inherit({\r\n        klassName: \"DndManager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new DndManager(),\r\n        draggingHeight,\r\n        placeholders = [];\r\n\r\n\r\n\r\n    var Draggable = langx.Evented.inherit({\r\n        klassName: \"Draggable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this;\r\n\r\n            self.elm = elm;\r\n            self.draggingClass = params.draggingClass || \"dragging\",\r\n                self.params = langx.clone(params);\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var params = self.params;\r\n                    if (params.handle) {\r\n                        self.dragHandle = finder.closest(e.target, params.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (params.source) {\r\n                        self.dragSource = finder.closest(e.target, params.source);\r\n                    } else {\r\n                        self.dragSource = self.elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n\r\n    var Droppable = langx.Evented.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        init: function(elm, params) {\r\n            var self = this,\r\n                draggingClass = params.draggingClass || \"dragging\",\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            self.elm = elm;\r\n            self._params = params;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(params[eventName])) {\r\n                    self.on(eventName, params[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var params = self._params,\r\n                        elm = self.elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n\r\n    /*   \r\n     * Make the specified element be in a moveable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function draggable(elm, params) {\r\n        return new Draggable(elm, params);\r\n    }\r\n\r\n    /*   \r\n     * Make the specified element be in a droppable state.\r\n     * @param {HTMLElement} elm  \r\n     * @param { } params\r\n     */\r\n    function droppable(elm, params) {\r\n        return new Droppable(elm, params);\r\n    }\r\n\r\n\r\n    function dnd() {\r\n        return dnd;\r\n    }\r\n\r\n    langx.mixin(dnd, {\r\n        //params ： {\r\n        //  target : Element or string or function\r\n        //  handle : Element\r\n        //  copy : boolean\r\n        //  placeHolder : \"div\"\r\n        //  hoverClass : \"hover\"\r\n        //  start : function\r\n        //  enter : function\r\n        //  over : function\r\n        //  leave : function\r\n        //  drop : function\r\n        //  end : function\r\n        //\r\n        //\r\n        //}\r\n        draggable: draggable,\r\n\r\n        //params ： {\r\n        //  accept : string or function\r\n        //  placeHolder\r\n        //\r\n        //\r\n        //\r\n        //}\r\n        droppable: droppable,\r\n\r\n        manager: manager\r\n\r\n\r\n    });\r\n\r\n    return skylark.dnd = dnd;\r\n});"]}