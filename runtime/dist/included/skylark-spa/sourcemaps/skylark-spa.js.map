{"version":3,"sources":["skylark-spa.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","resolved","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","router","createEvent","type","props","e","CustomEvent","safeMixin","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","forceRefresh","data","self","eventName","isFunction","on","_entering","ctx","force","_prepared","prepare","getConfigData","key","getNamedValue","location","pathname","match","regex","d","_setting","controllerSetting","controller","contentPath","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","undefined","isString","innerHTML","appendChild","Plugin","hookers","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","URL","baseURI","homePath","getConfig","go","path","promises0","all","promises1","lazy","promises2","concat","run","start","main"],"mappings":"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","file":"../skylark-spa.js","sourcesContent":["define('skylark-spa/spa',[\n    \"skylark-langx/skylark\",\n    \"skylark-langx/langx\",\n    \"skylark-router/router\"\n], function(skylark, langx, router) {\n    var Deferred = langx.Deferred;\n\n    function createEvent(type, props) {\n        var e = new CustomEvent(type, props);\n        return langx.safeMixin(e, props);\n    }\n\n    var Route = router.Route = router.Route.inherit({\n        klassName: \"SpaRoute\",\n\n        init: function(name, setting) {\n            this.overrided(name, setting);\n            this.content = setting.content;\n            this.forceRefresh = setting.forceRefresh;\n            this.data = setting.data;\n            //this.lazy = !!setting.lazy;\n            var self = this;\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\n                if (langx.isFunction(setting[eventName])) {\n                    self.on(eventName, setting[eventName]);\n                }\n            });\n        },\n\n        _entering: function(ctx) {\n            if (this.forceRefresh || ctx.force || !this._prepared) {\n                return this.prepare();\n            }\n            return this;\n        },\n\n        getConfigData: function(key) {\n            return key ? this.data[key] : this.data;\n        },\n\n        getNamedValue: function() {\n            return window.location.pathname.match(this.regex);\n        },\n\n        prepare: function() {\n            var d = new Deferred(),\n                setting = this._setting,\n                controllerSetting = setting.controller,\n                controller = this.controller,\n\n                self = this,\n                content = setting.content,\n                contentPath = setting.contentPath;\n\n            require([controllerSetting.type], function(type) {\n                controller = self.controller = new type(controllerSetting);\n                d.resolve();\n            });\n\n            return d.then(function() {\n                var e = createEvent(\"preparing\", {\n                    route: self,\n                    result: true\n                });\n                self.trigger(e);\n                return Deferred.when(e.result).then(function() {\n                    self._prepared = true;\n                });\n            });\n        },\n\n        render: function(ctx) {\n            var e = createEvent(\"rendering\", {\n                route: this,\n                context: ctx,\n                content: this.content\n            });\n            this.trigger(e);\n            return e.content;\n        },\n\n        trigger: function(e) {\n            var controller = this.controller;\n            if (controller) {\n                return controller.perform(e);\n            } else {\n                return this.overrided(e);\n            }\n        }\n    });\n\n    var RouteController = langx.Evented.inherit({\n        klassName: \"SpaRouteController\",\n\n        init: function(route, setting) {\n            setting = setting || {};\n            this.content = setting.content;\n            this.data = setting.data;\n        },\n\n        getConfigData: function(key) {\n            return key ? this.data[key] : this.data;\n        },\n\n        perform: function(e) {\n            var eventName = e.type;\n            if (this[eventName]) {\n                return this[eventName].call(this, e);\n            }\n\n        }\n    });\n\n    var Page = langx.Evented.inherit({\n        klassName: \"SpaPage\",\n\n        init: function(params) {\n            params = langx.mixin({\n                \"routeViewer\": \"body\"\n            }, params);\n\n            this._params = params;\n            this._rvc = document.querySelector(params.routeViewer);\n            this._router = router;\n\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\n        },\n\n        prepare: function() {\n\n        },\n\n        //Refreshes the route\n        refresh: function() {\n            var curCtx = router.current(),\n                prevCtx = router.previous();\n            var content = curCtx.route.render(curCtx);\n            if (content === undefined || content === null) {\n                return;\n            }\n            if (langx.isString(content)) {\n                this._rvc.innerHTML = content;\n            } else {\n                this._rvc.innerHTML = \"\";\n                this._rvc.appendChild(content);\n            }\n            curCtx.route.trigger(createEvent(\"rendered\", {\n                route: curCtx.route,\n                content: content\n            }));\n        }\n    });\n\n    var Plugin = langx.Evented.inherit({\n        klassName: \"SpaPlugin\",\n\n        init: function(name, setting) {\n            this.name = name;\n\n            if (langx.isString(setting.hookers)) {\n                setting.hookers = setting.hookers.split(\" \");\n            }\n            this._setting = setting;\n        },\n\n        isHooked: function(eventName) {\n            var hookers = this._setting.hookers || [];\n            return hookers.indexOf(eventName) > -1;\n        },\n\n        prepare: function() {\n            var d = new Deferred(),\n                setting = this._setting,\n                controllerSetting = setting.controller,\n                controller = this.controller,\n                self = this;\n            require([controllerSetting.type], function(type) {\n                controller = self.controller = new type(controllerSetting);\n                router.on(setting.hookers, {\n                    plugin: self\n                }, langx.proxy(controller.perform, controller));\n                d.resolve();\n            });\n            return d.then(function() {\n                var e = createEvent(\"preparing\", {\n                    plugin: self,\n                    result: true\n                });\n                self.trigger(e);\n                return Deferred.when(e.result).then(function() {\n                    self._prepared = true;\n                });\n            });\n        },\n\n        trigger: function(e) {\n            var controller = this.controller;\n            if (controller) {\n                return controller.perform(e);\n            } else {\n                return this.overrided(e);\n            }\n        }\n    });\n\n    var PluginController = langx.Evented.inherit({\n        klassName: \"SpaPluginController\",\n\n        init: function(plugin) {\n            this.plugin = plugin;\n        },\n\n        perform: function(e) {\n            var eventName = e.type;\n            if (this[eventName]) {\n                return this[eventName].call(this, e);\n            }\n\n        }\n    });\n\n    var Application = langx.Evented.inherit({\n        klassName: \"SpaApplication\",\n\n        init: function(config) {\n            if (app) {\n                return app;\n            }\n            var plugins = this._plugins = {};\n\n            config = this._config = langx.mixin({\n                plugins: {}\n            }, config, true);\n\n            langx.each(config.plugins, function(pluginName, setting) {\n                plugins[pluginName] = new Plugin(pluginName, setting);\n            });\n\n            router.routes(config.routes);\n\n            this._router = router;\n\n            this._page = new spa.Page(config.page);\n\n            document.title = config.title;\n            var baseUrl = config.baseUrl;\n            if (baseUrl === undefined) {\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\n            }\n            router.baseUrl(baseUrl);\n\n            if (config.homePath) {\n                router.homePath(config.homePath);\n            }\n\n            app = this;\n        },\n\n        getConfig: function(key) {\n            return key ? this._config[key] : this._config;\n        },\n\n        go: function(path, force) {\n            router.go(path, force);\n            return this;\n        },\n\n        page: function() {\n            return this._page;\n        },\n\n        prepare: function() {\n            if (this._prepared) {\n                return Deferred.resolve();\n            }\n            var self = this;\n\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\n                if (plugin.isHooked(\"starting\")) {\n                    return plugin.prepare();\n                }\n            });\n\n            return Deferred.all(promises0).then(function() {\n                router.trigger(createEvent(\"starting\", {\n                    spa: self\n                }));\n                var promises1 = langx.map(router.routes(), function(route, name) {\n                        if (route.lazy === false) {\n                            return route.prepare();\n                        }\n                    }),\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\n                        if (!plugin.isHooked(\"starting\")) {\n                            return plugin.prepare();\n                        }\n                    });\n\n\n                return Deferred.all(promises1.concat(promises2)).then(function() {\n                    self._prepared = true;\n                });\n            });\n        },\n\n        run: function() {\n            this._router.start();\n            router.trigger(createEvent(\"started\", {\n                spa: this\n            }));\n        }\n    });\n\n    var app;\n    var spa = function(config) {\n        if (!app) {\n            window[config.name || \"app\"] = app = new spa.Application(config);\n        }\n\n        return app;\n    }\n\n    langx.mixin(spa, {\n        \"Application\": Application,\n\n        \"Page\": Page,\n\n        \"Plugin\": Plugin,\n        \"PluginController\": PluginController,\n\n        \"Route\": Route,\n        \"RouteController\": RouteController\n\n    });\n\n    return skylark.spa = spa;\n});\ndefine('skylark-spa/main',[\n    \"skylark-langx/skylark\",\n    \"./spa\"\n], function(skylark) {\n    return skylark;\n});\n\ndefine('skylark-spa', ['skylark-spa/main'], function (main) { return main; });\n\n"]}