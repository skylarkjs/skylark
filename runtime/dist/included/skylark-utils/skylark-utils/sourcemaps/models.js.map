{"version":3,"sources":["models.js"],"names":["define","skylark","langx","ajax","models","methodMap","create","update","patch","delete","read","sync","method","entity","options","type","defaults","emulateHTTP","emulateJSON","params","dataType","url","result","urlError","data","contentType","JSON","stringify","attrs","toJSON","_method","beforeSend","xhr","setRequestHeader","apply","this","arguments","processData","error","textStatus","errorThrown","call","context","mixin","trigger","Entity","Stateful","inherit","matches","isMatch","attributes","fetch","parse","success","resp","serverAttrs","set","wrapError","save","key","val","validate","wait","_validate","isNew","destroy","clone","stopListening","collection","defer","base","id","get","idAttribute","replace","encodeURIComponent","Collection","Evented","init","entities","comparator","_reset","reset","silent","setOptions","add","remove","merge","addOptions","splice","array","insert","at","Math","min","max","length","i","tail","Array","partial","initialize","map","singular","isArray","slice","removed","_removeEntitys","changes","added","merged","_isEntity","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","isString","existing","push","hasChanged","cid","_prepareEntity","_addReference","orderChanged","some","m","index","_removeReference","previousEntitys","pop","unshift","shift","obj","_byId","entityId","has","where","first","findWhere","Error","isFunction","proxy","sortBy","pluck","attr","callbackOpts","constructor","prototype","validationError","indexOf","on","_onEntityEvent","off","event","prevId","previousAttributes"],"mappings":";;;;;;;AAAAA,QACI,YACA,UACA,UACD,SAASC,EAAQC,EAAMC,GAuoBtB,QAASC,KACL,MAAOA,GAroBb,GAAIC,IACFC,OAAU,OACVC,OAAU,MACVC,MAAS,QACTC,SAAU,SACVC,KAAQ,OAINC,EAAO,SAASC,EAAQC,EAAQC,GAClC,GAAIC,GAAOV,EAAUO,EAGrBV,GAAMc,SAASF,IAAYA,OACzBG,YAAab,EAAOa,YACpBC,YAAad,EAAOc,aAItB,IAAIC,IAAUJ,KAAMA,EAAMK,SAAU,OAqBpC,IAlBKN,EAAQO,MACXF,EAAOE,IAAMnB,EAAMoB,OAAOT,EAAQ,QAAUU,YAI1B,MAAhBT,EAAQU,OAAgBX,GAAsB,WAAXD,GAAkC,WAAXA,GAAkC,UAAXA,IACnFO,EAAOM,YAAc,mBACrBN,EAAOK,KAAOE,KAAKC,UAAUb,EAAQc,OAASf,EAAOgB,OAAOf,KAI1DA,EAAQI,cACVC,EAAOM,YAAc,oCACrBN,EAAOK,KAAOL,EAAOK,MAAQX,OAAQM,EAAOK,UAK1CV,EAAQG,cAAyB,QAATF,GAA2B,WAATA,GAA8B,UAATA,GAAmB,CACpFI,EAAOJ,KAAO,OACVD,EAAQI,cAAaC,EAAOK,KAAKM,QAAUf,EAC/C,IAAIgB,GAAajB,EAAQiB,UACzBjB,GAAQiB,WAAa,SAASC,GAE5B,GADAA,EAAIC,iBAAiB,yBAA0BlB,GAC3CgB,EAAY,MAAOA,GAAWG,MAAMC,KAAMC,YAK9B,QAAhBjB,EAAOJ,MAAmBD,EAAQI,cACpCC,EAAOkB,aAAc,EAIvB,IAAIC,GAAQxB,EAAQwB,KACpBxB,GAAQwB,MAAQ,SAASN,EAAKO,EAAYC,GACxC1B,EAAQyB,WAAaA,EACrBzB,EAAQ0B,YAAcA,EAClBF,GAAOA,EAAMG,KAAK3B,EAAQ4B,QAASV,EAAKO,EAAYC,GAI1D,IAAIR,GAAMlB,EAAQkB,IAAM7B,EAAKD,EAAMyC,MAAMxB,EAAQL,GAEjD,OADAD,GAAO+B,QAAQ,UAAW/B,EAAQmB,EAAKlB,GAChCkB,GAILa,EAAS3C,EAAM4C,SAASC,SAC1BpC,KAAM,WACJ,MAAOP,GAAOO,KAAKuB,MAAMC,KAAMC,YASjCY,QAAS,SAASpB,GAChB,MAAO1B,GAAM+C,QAAQd,KAAKe,WAAWtB,IAKvCuB,MAAO,SAASrC,GACdA,EAAUZ,EAAMyC,OAAOS,OAAO,GAAOtC,EACrC,IAAID,GAASsB,KACTkB,EAAUvC,EAAQuC,OAQtB,OAPAvC,GAAQuC,QAAU,SAASC,GACzB,GAAIC,GAAczC,EAAQsC,MAAQvC,EAAOuC,MAAME,EAAMxC,GAAWwC,CAChE,SAAKzC,EAAO2C,IAAID,EAAazC,KACzBuC,GAASA,EAAQZ,KAAK3B,EAAQ4B,QAAS7B,EAAQyC,EAAMxC,OACzDD,GAAO+B,QAAQ,OAAQ/B,EAAQyC,EAAMxC,KAEvC2C,UAAUtB,KAAMrB,GACTqB,KAAKxB,KAAK,OAAQwB,KAAMrB,IAMjC4C,KAAM,SAASC,EAAKC,EAAK9C,GAEvB,GAAIc,EACO,OAAP+B,GAA8B,gBAARA,IACxB/B,EAAQ+B,EACR7C,EAAU8C,IAEThC,MAAY+B,GAAOC,EAGtB9C,EAAUZ,EAAMyC,OAAOkB,UAAU,EAAMT,OAAO,GAAOtC,EACrD,IAAIgD,GAAOhD,EAAQgD,IAKnB,IAAIlC,IAAUkC,GACZ,IAAK3B,KAAKqB,IAAI5B,EAAOd,GAAU,OAAO,MACjC,KAAKqB,KAAK4B,UAAUnC,EAAOd,GAChC,OAAO,CAKT,IAAID,GAASsB,KACTkB,EAAUvC,EAAQuC,QAClBH,EAAaf,KAAKe,UACtBpC,GAAQuC,QAAU,SAASC,GAEzBzC,EAAOqC,WAAaA,CACpB,IAAIK,GAAczC,EAAQsC,MAAQvC,EAAOuC,MAAME,EAAMxC,GAAWwC,CAEhE,OADIQ,KAAMP,EAAcrD,EAAMyC,SAAUf,EAAO2B,MAC3CA,IAAgB1C,EAAO2C,IAAID,EAAazC,MACxCuC,GAASA,EAAQZ,KAAK3B,EAAQ4B,QAAS7B,EAAQyC,EAAMxC,OACzDD,GAAO+B,QAAQ,OAAQ/B,EAAQyC,EAAMxC,KAEvC2C,UAAUtB,KAAMrB,GAGZc,GAASkC,IAAM3B,KAAKe,WAAahD,EAAMyC,SAAUO,EAAYtB,GAEjE,IAAIhB,GAASuB,KAAK6B,QAAU,SAAYlD,EAAQN,MAAQ,QAAU,QACnD,WAAXI,GAAuBE,EAAQc,QAAOd,EAAQc,MAAQA,EAC1D,IAAII,GAAMG,KAAKxB,KAAKC,EAAQuB,KAAMrB,EAKlC,OAFAqB,MAAKe,WAAaA,EAEXlB,GAMTiC,QAAS,SAASnD,GAChBA,EAAUA,EAAUZ,EAAMgE,MAAMpD,KAChC,IAAID,GAASsB,KACTkB,EAAUvC,EAAQuC,QAClBS,EAAOhD,EAAQgD,KAEfG,EAAU,WACZpD,EAAOsD,gBACPtD,EAAO+B,QAAQ,UAAW/B,EAAQA,EAAOuD,WAAYtD,GAGvDA,GAAQuC,QAAU,SAASC,GACrBQ,GAAMG,IACNZ,GAASA,EAAQZ,KAAK3B,EAAQ4B,QAAS7B,EAAQyC,EAAMxC,GACpDD,EAAOmD,SAASnD,EAAO+B,QAAQ,OAAQ/B,EAAQyC,EAAMxC,GAG5D,IAAIkB,IAAM,CAQV,OAPIG,MAAK6B,QACP9D,EAAMmE,MAAMvD,EAAQuC,UAEpBI,UAAUtB,KAAMrB,GAChBkB,EAAMG,KAAKxB,KAAK,SAAUwB,KAAMrB,IAE7BgD,GAAMG,IACJjC,GAMTX,IAAK,WACH,GAAIiD,GACFpE,EAAMoB,OAAOa,KAAM,YACnBjC,EAAMoB,OAAOa,KAAKiC,WAAY,QAC9B7C,UACF,IAAIY,KAAK6B,QAAS,MAAOM,EACzB,IAAIC,GAAKpC,KAAKqC,IAAIrC,KAAKsC,YACvB,OAAOH,GAAKI,QAAQ,SAAU,OAASC,mBAAmBJ,IAK5DnB,MAAO,SAASE,EAAMxC,GACpB,MAAOwC,MAIPsB,EAAc1E,EAAM2E,QAAQ9B,SAC9B+B,KAAS,SAASC,EAAUjE,GAC1BA,IAAYA,MACRA,EAAQD,SAAQsB,KAAKtB,OAASC,EAAQD,QACf,SAAvBC,EAAQkE,aAAuB7C,KAAK6C,WAAalE,EAAQkE,YAC7D7C,KAAK8C,SACDF,GAAU5C,KAAK+C,MAAMH,EAAU7E,EAAMyC,OAAOwC,QAAQ,GAAOrE,OAK/DsE,GAAcC,KAAK,EAAMC,QAAQ,EAAMC,OAAO,GAC9CC,GAAcH,KAAK,EAAMC,QAAQ,GAGjCG,EAAS,SAASC,EAAOC,EAAQC,GACnCA,EAAKC,KAAKC,IAAID,KAAKE,IAAIH,EAAI,GAAIF,EAAMM,OACrC,IAEIC,GAFAC,EAAOC,MAAMT,EAAMM,OAASJ,GAC5BI,EAASL,EAAOK,MAEpB,KAAKC,EAAI,EAAGA,EAAIC,EAAKF,OAAQC,IAAKC,EAAKD,GAAKP,EAAMO,EAAIL,EACtD,KAAKK,EAAI,EAAGA,EAAID,EAAQC,IAAKP,EAAMO,EAAIL,GAAMD,EAAOM,EACpD,KAAKA,EAAI,EAAGA,EAAIC,EAAKF,OAAQC,IAAKP,EAAMO,EAAID,EAASJ,GAAMM,EAAKD,GAqbhE,OAjbFrB,GAAWwB,SAITvF,OAAQgC,EAIRwD,WAAY,aAIZxE,OAAQ,SAASf,GACf,MAAOqB,MAAKmE,IAAI,SAASzF,GAAU,MAAOA,GAAOgB,OAAOf,MAI1DH,KAAM,WACJ,MAAOP,GAAOO,KAAKuB,MAAMC,KAAMC,YAMjCiD,IAAK,SAASN,EAAUjE,GACtB,MAAOqB,MAAKqB,IAAIuB,EAAU7E,EAAMyC,OAAO4C,OAAO,GAAQzE,EAAS0E,KAIjEF,OAAQ,SAASP,EAAUjE,GACzBA,EAAUZ,EAAMyC,SAAU7B,EAC1B,IAAIyF,IAAYrG,EAAMsG,QAAQzB,EAC9BA,GAAWwB,GAAYxB,GAAYA,EAAS0B,OAC5C,IAAIC,GAAUvE,KAAKwE,eAAe5B,EAAUjE,EAK5C,QAJKA,EAAQqE,QAAUuB,EAAQV,SAC7BlF,EAAQ8F,SAAWC,SAAWC,UAAYJ,QAASA,GACnDvE,KAAKS,QAAQ,SAAUT,KAAMrB,IAExByF,EAAWG,EAAQ,GAAKA,GAOjClD,IAAK,SAASuB,EAAUjE,GACtB,GAAgB,MAAZiE,EAAJ,CAEAjE,EAAUZ,EAAMyC,SAAUyC,EAAYtE,GAClCA,EAAQsC,QAAUjB,KAAK4E,UAAUhC,KACnCA,EAAW5C,KAAKiB,MAAM2B,EAAUjE,OAGlC,IAAIyF,IAAYrG,EAAMsG,QAAQzB,EAC9BA,GAAWwB,GAAYxB,GAAYA,EAAS0B,OAE5C,IAAIb,GAAK9E,EAAQ8E,EACP,OAANA,IAAYA,GAAMA,GAClBA,EAAKzD,KAAK6D,SAAQJ,EAAKzD,KAAK6D,QAC5BJ,EAAK,IAAGA,GAAMzD,KAAK6D,OAAS,EAEhC,IAgBInF,GAAQoF,EAhBRzC,KACAwD,KACAC,KACAC,KACAC,KAEA9B,EAAMvE,EAAQuE,IACdE,EAAQzE,EAAQyE,MAChBD,EAASxE,EAAQwE,OAEjB8B,GAAO,EACPC,EAAWlF,KAAK6C,YAAoB,MAANY,GAAc9E,EAAQsG,QAAS,EAC7DE,EAAWpH,EAAMqH,SAASpF,KAAK6C,YAAc7C,KAAK6C,WAAa,IAKnE,KAAKiB,EAAI,EAAGA,EAAIlB,EAASiB,OAAQC,IAAK,CACpCpF,EAASkE,EAASkB,EAIlB,IAAIuB,GAAWrF,KAAKqC,IAAI3D,EACxB,IAAI2G,EAAU,CACZ,GAAIjC,GAAS1E,IAAW2G,EAAU,CAChC,GAAI5F,GAAQO,KAAK4E,UAAUlG,GAAUA,EAAOqC,WAAarC,CACrDC,GAAQsC,QAAOxB,EAAQ4F,EAASpE,MAAMxB,EAAOd,IACjD0G,EAAShE,IAAI5B,EAAOd,GACpBmG,EAAQQ,KAAKD,GACTH,IAAaD,IAAMA,EAAOI,EAASE,WAAWJ,IAE/CH,EAASK,EAASG,OACrBR,EAASK,EAASG,MAAO,EACzBnE,EAAIiE,KAAKD,IAEXzC,EAASkB,GAAKuB,MAGLnC,KACTxE,EAASkE,EAASkB,GAAK9D,KAAKyF,eAAe/G,EAAQC,GAC/CD,IACFmG,EAAMS,KAAK5G,GACXsB,KAAK0F,cAAchH,EAAQC,GAC3BqG,EAAStG,EAAO8G,MAAO,EACvBnE,EAAIiE,KAAK5G,KAMf,GAAIyE,EAAQ,CACV,IAAKW,EAAI,EAAGA,EAAI9D,KAAK6D,OAAQC,IAC3BpF,EAASsB,KAAK4C,SAASkB,GAClBkB,EAAStG,EAAO8G,MAAMT,EAASO,KAAK5G,EAEvCqG,GAASlB,QAAQ7D,KAAKwE,eAAeO,EAAUpG,GAIrD,GAAIgH,IAAe,EACfpD,GAAW2C,GAAYhC,GAAOC,CAkBlC,IAjBI9B,EAAIwC,QAAUtB,GAChBoD,EAAe3F,KAAK6D,SAAWxC,EAAIwC,QAAU7D,KAAK4C,SAASgD,KAAK,SAASC,EAAGC,GAC1E,MAAOD,KAAMxE,EAAIyE,KAEnB9F,KAAK4C,SAASiB,OAAS,EACvBP,EAAOtD,KAAK4C,SAAUvB,EAAK,GAC3BrB,KAAK6D,OAAS7D,KAAK4C,SAASiB,QACnBgB,EAAMhB,SACXqB,IAAUD,GAAO,GACrB3B,EAAOtD,KAAK4C,SAAUiC,EAAa,MAANpB,EAAazD,KAAK6D,OAASJ,GACxDzD,KAAK6D,OAAS7D,KAAK4C,SAASiB,QAI1BoB,GAAMjF,KAAKiF,MAAMjC,QAAQ,KAGxBrE,EAAQqE,OAAQ,CACnB,IAAKc,EAAI,EAAGA,EAAIe,EAAMhB,OAAQC,IAClB,MAANL,IAAY9E,EAAQmH,MAAQrC,EAAKK,GACrCpF,EAASmG,EAAMf,GACfpF,EAAO+B,QAAQ,MAAO/B,EAAQsB,KAAMrB,IAElCsG,GAAQU,IAAc3F,KAAKS,QAAQ,OAAQT,KAAMrB,IACjDkG,EAAMhB,QAAUkB,EAASlB,QAAUiB,EAAQjB,UAC7ClF,EAAQ8F,SACNC,MAAOG,EACPN,QAASQ,EACTJ,OAAQG,GAEV9E,KAAKS,QAAQ,SAAUT,KAAMrB,IAKjC,MAAOyF,GAAWxB,EAAS,GAAKA,IAOlCG,MAAO,SAASH,EAAUjE,GACxBA,EAAUA,EAAUZ,EAAMgE,MAAMpD,KAChC,KAAK,GAAImF,GAAI,EAAGA,EAAI9D,KAAK4C,SAASiB,OAAQC,IACxC9D,KAAK+F,iBAAiB/F,KAAK4C,SAASkB,GAAInF,EAM1C,OAJAA,GAAQqH,gBAAkBhG,KAAK4C,SAC/B5C,KAAK8C,SACLF,EAAW5C,KAAKkD,IAAIN,EAAU7E,EAAMyC,OAAOwC,QAAQ,GAAOrE,IACrDA,EAAQqE,QAAQhD,KAAKS,QAAQ,QAAST,KAAMrB,GAC1CiE,GAIT0C,KAAM,SAAS5G,EAAQC,GACrB,MAAOqB,MAAKkD,IAAIxE,EAAQX,EAAMyC,OAAOiD,GAAIzD,KAAK6D,QAASlF,KAIzDsH,IAAK,SAAStH,GACZ,GAAID,GAASsB,KAAKyD,GAAGzD,KAAK6D,OAAS,EACnC,OAAO7D,MAAKmD,OAAOzE,EAAQC,IAI7BuH,QAAS,SAASxH,EAAQC,GACxB,MAAOqB,MAAKkD,IAAIxE,EAAQX,EAAMyC,OAAOiD,GAAI,GAAI9E,KAI/CwH,MAAO,SAASxH,GACd,GAAID,GAASsB,KAAKyD,GAAG,EACrB,OAAOzD,MAAKmD,OAAOzE,EAAQC,IAI7B2F,MAAO,WACL,MAAOA,OAAMvE,MAAMC,KAAK4C,SAAU3C,YAKpCoC,IAAK,SAAS+D,GACZ,GAAW,MAAPA,EACJ,MAAOpG,MAAKqG,MAAMD,IAChBpG,KAAKqG,MAAMrG,KAAKsG,SAASF,EAAIrF,YAAcqF,KAC3CA,EAAIZ,KAAOxF,KAAKqG,MAAMD,EAAIZ,MAI9Be,IAAK,SAASH,GACZ,MAAwB,OAAjBpG,KAAKqC,IAAI+D,IAIlB3C,GAAI,SAASqC,GAEX,MADIA,GAAQ,IAAGA,GAAS9F,KAAK6D,QACtB7D,KAAK4C,SAASkD,IAKvBU,MAAO,SAAS/G,EAAOgH,GACrB,MAAOzG,MAAKyG,EAAQ,OAAS,UAAUhH,IAKzCiH,UAAW,SAASjH,GAClB,MAAOO,MAAKwG,MAAM/G,GAAO,IAM3BwF,KAAM,SAAStG,GACb,GAAIkE,GAAa7C,KAAK6C,UACtB,KAAKA,EAAY,KAAM,IAAI8D,OAAM,yCACjChI,KAAYA,KAEZ,IAAIkF,GAAShB,EAAWgB,MAUxB,OATI9F,GAAM6I,WAAW/D,KAAaA,EAAa9E,EAAM8I,MAAMhE,EAAY7C,OAGxD,IAAX6D,GAAgB9F,EAAMqH,SAASvC,GACjC7C,KAAK4C,SAAW5C,KAAK8G,OAAOjE,GAE5B7C,KAAK4C,SAASqC,KAAKpC,GAEhBlE,EAAQqE,QAAQhD,KAAKS,QAAQ,OAAQT,KAAMrB,GACzCqB,MAIT+G,MAAO,SAASC,GACd,MAAOhH,MAAKmE,IAAI6C,EAAO,KAMzBhG,MAAO,SAASrC,GACdA,EAAUZ,EAAMyC,OAAOS,OAAO,GAAOtC,EACrC,IAAIuC,GAAUvC,EAAQuC,QAClBe,EAAajC,IAQjB,OAPArB,GAAQuC,QAAU,SAASC,GACzB,GAAI1C,GAASE,EAAQoE,MAAQ,QAAU,KACvCd,GAAWxD,GAAQ0C,EAAMxC,GACrBuC,GAASA,EAAQZ,KAAK3B,EAAQ4B,QAAS0B,EAAYd,EAAMxC,GAC7DsD,EAAWxB,QAAQ,OAAQwB,EAAYd,EAAMxC,IAE/C2C,UAAUtB,KAAMrB,GACTqB,KAAKxB,KAAK,OAAQwB,KAAMrB,IAMjCR,OAAQ,SAASO,EAAQC,GACvBA,EAAUA,EAAUZ,EAAMgE,MAAMpD,KAChC,IAAIgD,GAAOhD,EAAQgD,IAEnB,IADAjD,EAASsB,KAAKyF,eAAe/G,EAAQC,IAChCD,EAAQ,OAAO,CACfiD,IAAM3B,KAAKkD,IAAIxE,EAAQC,EAC5B,IAAIsD,GAAajC,KACbkB,EAAUvC,EAAQuC,OAMtB,OALAvC,GAAQuC,QAAU,SAAS2E,EAAG1E,EAAM8F,GAC9BtF,GAAMM,EAAWiB,IAAI2C,EAAGoB,GACxB/F,GAASA,EAAQZ,KAAK2G,EAAa1G,QAASsF,EAAG1E,EAAM8F,IAE3DvI,EAAO6C,KAAK,KAAM5C,GACXD,GAKTuC,MAAO,SAASE,EAAMxC,GACpB,MAAOwC,IAITY,MAAO,WACL,MAAO,IAAI/B,MAAKkH,YAAYlH,KAAK4C,UAC/BlE,OAAQsB,KAAKtB,OACbmE,WAAY7C,KAAK6C,cAKrByD,SAAU,SAAS7G,GACjB,MAAOA,GAAMO,KAAKtB,OAAOyI,UAAU7E,aAAe,OAKpDQ,OAAQ,WACN9C,KAAK6D,OAAS,EACd7D,KAAK4C,YACL5C,KAAKqG,UAKPZ,eAAgB,SAAShG,EAAOd,GAC9B,GAAIqB,KAAK4E,UAAUnF,GAEjB,MADKA,GAAMwC,aAAYxC,EAAMwC,WAAajC,MACnCP,CAETd,GAAUA,EAAUZ,EAAMgE,MAAMpD,MAChCA,EAAQsD,WAAajC,IACrB,IAAItB,GAAS,GAAIsB,MAAKtB,OAAOe,EAAOd,EACpC,OAAKD,GAAO0I,iBACZpH,KAAKS,QAAQ,UAAWT,KAAMtB,EAAO0I,gBAAiBzI,IAC/C,GAF6BD,GAMtC8F,eAAgB,SAAS5B,EAAUjE,GAEjC,IAAK,GADD4F,MACKT,EAAI,EAAGA,EAAIlB,EAASiB,OAAQC,IAAK,CACxC,GAAIpF,GAASsB,KAAKqC,IAAIO,EAASkB,GAC/B,IAAKpF,EAAL,CAEA,GAAIoH,GAAQ9F,KAAKqH,QAAQ3I,EACzBsB,MAAK4C,SAASU,OAAOwC,EAAO,GAC5B9F,KAAK6D,eAIE7D,MAAKqG,MAAM3H,EAAO8G,IACzB,IAAIpD,GAAKpC,KAAKsG,SAAS5H,EAAOqC,WACpB,OAANqB,SAAmBpC,MAAKqG,MAAMjE,GAE7BzD,EAAQqE,SACXrE,EAAQmH,MAAQA,EAChBpH,EAAO+B,QAAQ,SAAU/B,EAAQsB,KAAMrB,IAGzC4F,EAAQe,KAAK5G,GACbsB,KAAK+F,iBAAiBrH,EAAQC,IAEhC,MAAO4F,IAKTK,UAAW,SAASlG,GAClB,MAAOA,aAAkBgC,IAI3BgF,cAAe,SAAShH,EAAQC,GAC9BqB,KAAKqG,MAAM3H,EAAO8G,KAAO9G,CACzB,IAAI0D,GAAKpC,KAAKsG,SAAS5H,EAAOqC,WACpB,OAANqB,IAAYpC,KAAKqG,MAAMjE,GAAM1D,GACjCA,EAAO4I,GAAG,MAAOtH,KAAKuH,eAAgBvH,OAIxC+F,iBAAkB,SAASrH,EAAQC,SAC1BqB,MAAKqG,MAAM3H,EAAO8G,IACzB,IAAIpD,GAAKpC,KAAKsG,SAAS5H,EAAOqC,WACpB,OAANqB,SAAmBpC,MAAKqG,MAAMjE,GAC9BpC,OAAStB,EAAOuD,kBAAmBvD,GAAOuD,WAC9CvD,EAAO8I,IAAI,MAAOxH,KAAKuH,eAAgBvH,OAOzCuH,eAAgB,SAASE,EAAO/I,EAAQuD,EAAYtD,GAClD,GAAID,EAAQ,CACV,IAAe,QAAV+I,GAA6B,WAAVA,IAAuBxF,IAAejC,KAAM,MAEpE,IADc,YAAVyH,GAAqBzH,KAAKmD,OAAOzE,EAAQC,GAC/B,WAAV8I,EAAoB,CACtB,GAAIC,GAAS1H,KAAKsG,SAAS5H,EAAOiJ,sBAC9BvF,EAAKpC,KAAKsG,SAAS5H,EAAOqC,WAC1B2G,KAAWtF,IACC,MAAVsF,SAAuB1H,MAAKqG,MAAMqB,GAC5B,MAANtF,IAAYpC,KAAKqG,MAAMjE,GAAM1D,KAIvCsB,KAAKS,QAAQV,MAAMC,KAAMC,cAS3BlC,EAAMyC,MAAMvC,GAERa,aAAc,EAMdC,aAAc,EAEdP,KAAOA,EAEPkC,OAAQA,EACR+B,WAAaA,IAIV3E,EAAQG,OAASA","file":"../models.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./ajax\"\r\n], function(skylark,langx,ajax) {\r\n\r\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'patch': 'PATCH',\r\n    'delete': 'DELETE',\r\n    'read': 'GET'\r\n  };\r\n  \r\n\r\n  var sync = function(method, entity, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    langx.defaults(options || (options = {}), {\r\n      emulateHTTP: models.emulateHTTP,\r\n      emulateJSON: models.emulateJSON\r\n    });\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = langx.result(entity, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (options.data == null && entity && (method === 'create' || method === 'update' || method === 'patch')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(options.attrs || entity.toJSON(options));\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (options.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {entity: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n      params.type = 'POST';\r\n      if (options.emulateJSON) params.data._method = type;\r\n      var beforeSend = options.beforeSend;\r\n      options.beforeSend = function(xhr) {\r\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        if (beforeSend) return beforeSend.apply(this, arguments);\r\n      };\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !options.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Pass along `textStatus` and `errorThrown` from jQuery.\r\n    var error = options.error;\r\n    options.error = function(xhr, textStatus, errorThrown) {\r\n      options.textStatus = textStatus;\r\n      options.errorThrown = errorThrown;\r\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\r\n    };\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    var xhr = options.xhr = ajax(langx.mixin(params, options));\r\n    entity.trigger('request', entity, xhr, options);\r\n    return xhr;\r\n  };\r\n\r\n\r\n  var Entity = langx.Stateful.inherit({\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    //escape: function(attr) {\r\n    //  return _.escape(this.get(attr));\r\n    //},\r\n\r\n    // Special-cased proxy to underscore's `_.matches` method.\r\n    matches: function(attrs) {\r\n      return langx.isMatch(this.attributes,attrs);\r\n    },\r\n\r\n    // Fetch the entity from the server, merging the response with the entity's\r\n    // local attributes. Any changed attributes will trigger a \"change\" event.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var entity = this;\r\n      var success = options.success;\r\n      options.success = function(resp) {\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (!entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Set a hash of entity attributes, and sync the entity to the server.\r\n    // If the server returns an attributes hash that differs, the entity's\r\n    // state will be `set` again.\r\n    save: function(key, val, options) {\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      var attrs;\r\n      if (key == null || typeof key === 'object') {\r\n        attrs = key;\r\n        options = val;\r\n      } else {\r\n        (attrs = {})[key] = val;\r\n      }\r\n\r\n      options = langx.mixin({validate: true, parse: true}, options);\r\n      var wait = options.wait;\r\n\r\n      // If we're not waiting and attributes exist, save acts as\r\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\r\n      // the entity will be valid when the attributes, if any, are set.\r\n      if (attrs && !wait) {\r\n        if (!this.set(attrs, options)) return false;\r\n      } else if (!this._validate(attrs, options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var entity = this;\r\n      var success = options.success;\r\n      var attributes = this.attributes;\r\n      options.success = function(resp) {\r\n        // Ensure attributes are restored during synchronous saves.\r\n        entity.attributes = attributes;\r\n        var serverAttrs = options.parse ? entity.parse(resp, options) : resp;\r\n        if (wait) serverAttrs = langx.mixin({}, attrs, serverAttrs);\r\n        if (serverAttrs && !entity.set(serverAttrs, options)) return false;\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        entity.trigger('sync', entity, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n\r\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\r\n      if (attrs && wait) this.attributes = langx.mixin({}, attributes, attrs);\r\n\r\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\r\n      var xhr = this.sync(method, this, options);\r\n\r\n      // Restore attributes.\r\n      this.attributes = attributes;\r\n\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this entity on the server if it was already persisted.\r\n    // Optimistically removes the entity from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var entity = this;\r\n      var success = options.success;\r\n      var wait = options.wait;\r\n\r\n      var destroy = function() {\r\n        entity.stopListening();\r\n        entity.trigger('destroy', entity, entity.collection, options);\r\n      };\r\n\r\n      options.success = function(resp) {\r\n        if (wait) destroy();\r\n        if (success) success.call(options.context, entity, resp, options);\r\n        if (!entity.isNew()) entity.trigger('sync', entity, resp, options);\r\n      };\r\n\r\n      var xhr = false;\r\n      if (this.isNew()) {\r\n        langx.defer(options.success);\r\n      } else {\r\n        wrapError(this, options);\r\n        xhr = this.sync('delete', this, options);\r\n      }\r\n      if (!wait) destroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the entity's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base =\r\n        langx.result(this, 'urlRoot') ||\r\n        langx.result(this.collection, 'url') ||\r\n        urlError();\r\n      if (this.isNew()) return base;\r\n      var id = this.get(this.idAttribute);\r\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the entity. The default implementation is just to pass the response along.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    }\r\n  });\r\n\r\n  var Collection  = langx.Evented.inherit({\r\n    \"init\" : function(entities, options) {\r\n      options || (options = {});\r\n      if (options.entity) this.entity = options.entity;\r\n      if (options.comparator !== void 0) this.comparator = options.comparator;\r\n      this._reset();\r\n      if (entities) this.reset(entities, langx.mixin({silent: true}, options));\r\n    }\r\n  }); \r\n\r\n  // Default options for `Collection#set`.\r\n  var setOptions = {add: true, remove: true, merge: true};\r\n  var addOptions = {add: true, remove: false};\r\n\r\n  // Splices `insert` into `array` at index `at`.\r\n  var splice = function(array, insert, at) {\r\n    at = Math.min(Math.max(at, 0), array.length);\r\n    var tail = Array(array.length - at);\r\n    var length = insert.length;\r\n    var i;\r\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\r\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n  };\r\n\r\n  // Define the Collection's inheritable methods.\r\n  Collection.partial({\r\n\r\n    // The default entity for a collection is just a **Entity**.\r\n    // This should be overridden in most cases.\r\n    entity: Entity,\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // The JSON representation of a Collection is an array of the\r\n    // entities' attributes.\r\n    toJSON: function(options) {\r\n      return this.map(function(entity) { return entity.toJSON(options); });\r\n    },\r\n\r\n    // Proxy `models.sync` by default.\r\n    sync: function() {\r\n      return models.sync.apply(this, arguments);\r\n    },\r\n\r\n    // Add a entity, or list of entities to the set. `entities` may be Backbone\r\n    // Entitys or raw JavaScript objects to be converted to Entitys, or any\r\n    // combination of the two.\r\n    add: function(entities, options) {\r\n      return this.set(entities, langx.mixin({merge: false}, options, addOptions));\r\n    },\r\n\r\n    // Remove a entity, or a list of entities from the set.\r\n    remove: function(entities, options) {\r\n      options = langx.mixin({}, options);\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n      var removed = this._removeEntitys(entities, options);\r\n      if (!options.silent && removed.length) {\r\n        options.changes = {added: [], merged: [], removed: removed};\r\n        this.trigger('update', this, options);\r\n      }\r\n      return singular ? removed[0] : removed;\r\n    },\r\n\r\n    // Update a collection by `set`-ing a new list of entities, adding new ones,\r\n    // removing entities that are no longer present, and merging entities that\r\n    // already exist in the collection, as necessary. Similar to **Entity#set**,\r\n    // the core operation for updating the data contained by the collection.\r\n    set: function(entities, options) {\r\n      if (entities == null) return;\r\n\r\n      options = langx.mixin({}, setOptions, options);\r\n      if (options.parse && !this._isEntity(entities)) {\r\n        entities = this.parse(entities, options) || [];\r\n      }\r\n\r\n      var singular = !langx.isArray(entities);\r\n      entities = singular ? [entities] : entities.slice();\r\n\r\n      var at = options.at;\r\n      if (at != null) at = +at;\r\n      if (at > this.length) at = this.length;\r\n      if (at < 0) at += this.length + 1;\r\n\r\n      var set = [];\r\n      var toAdd = [];\r\n      var toMerge = [];\r\n      var toRemove = [];\r\n      var modelMap = {};\r\n\r\n      var add = options.add;\r\n      var merge = options.merge;\r\n      var remove = options.remove;\r\n\r\n      var sort = false;\r\n      var sortable = this.comparator && at == null && options.sort !== false;\r\n      var sortAttr = langx.isString(this.comparator) ? this.comparator : null;\r\n\r\n      // Turn bare objects into entity references, and prevent invalid entities\r\n      // from being added.\r\n      var entity, i;\r\n      for (i = 0; i < entities.length; i++) {\r\n        entity = entities[i];\r\n\r\n        // If a duplicate is found, prevent it from being added and\r\n        // optionally merge it into the existing entity.\r\n        var existing = this.get(entity);\r\n        if (existing) {\r\n          if (merge && entity !== existing) {\r\n            var attrs = this._isEntity(entity) ? entity.attributes : entity;\r\n            if (options.parse) attrs = existing.parse(attrs, options);\r\n            existing.set(attrs, options);\r\n            toMerge.push(existing);\r\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\r\n          }\r\n          if (!modelMap[existing.cid]) {\r\n            modelMap[existing.cid] = true;\r\n            set.push(existing);\r\n          }\r\n          entities[i] = existing;\r\n\r\n        // If this is a new, valid entity, push it to the `toAdd` list.\r\n        } else if (add) {\r\n          entity = entities[i] = this._prepareEntity(entity, options);\r\n          if (entity) {\r\n            toAdd.push(entity);\r\n            this._addReference(entity, options);\r\n            modelMap[entity.cid] = true;\r\n            set.push(entity);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove stale entities.\r\n      if (remove) {\r\n        for (i = 0; i < this.length; i++) {\r\n          entity = this.entities[i];\r\n          if (!modelMap[entity.cid]) toRemove.push(entity);\r\n        }\r\n        if (toRemove.length) this._removeEntitys(toRemove, options);\r\n      }\r\n\r\n      // See if sorting is needed, update `length` and splice in new entities.\r\n      var orderChanged = false;\r\n      var replace = !sortable && add && remove;\r\n      if (set.length && replace) {\r\n        orderChanged = this.length !== set.length || this.entities.some(function(m, index) {\r\n          return m !== set[index];\r\n        });\r\n        this.entities.length = 0;\r\n        splice(this.entities, set, 0);\r\n        this.length = this.entities.length;\r\n      } else if (toAdd.length) {\r\n        if (sortable) sort = true;\r\n        splice(this.entities, toAdd, at == null ? this.length : at);\r\n        this.length = this.entities.length;\r\n      }\r\n\r\n      // Silently sort the collection if appropriate.\r\n      if (sort) this.sort({silent: true});\r\n\r\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\r\n      if (!options.silent) {\r\n        for (i = 0; i < toAdd.length; i++) {\r\n          if (at != null) options.index = at + i;\r\n          entity = toAdd[i];\r\n          entity.trigger('add', entity, this, options);\r\n        }\r\n        if (sort || orderChanged) this.trigger('sort', this, options);\r\n        if (toAdd.length || toRemove.length || toMerge.length) {\r\n          options.changes = {\r\n            added: toAdd,\r\n            removed: toRemove,\r\n            merged: toMerge\r\n          };\r\n          this.trigger('update', this, options);\r\n        }\r\n      }\r\n\r\n      // Return the added (or merged) entity (or entities).\r\n      return singular ? entities[0] : entities;\r\n    },\r\n\r\n    // When you have more items than you want to add or remove individually,\r\n    // you can reset the entire set with a new list of entities, without firing\r\n    // any granular `add` or `remove` events. Fires `reset` when finished.\r\n    // Useful for bulk operations and optimizations.\r\n    reset: function(entities, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      for (var i = 0; i < this.entities.length; i++) {\r\n        this._removeReference(this.entities[i], options);\r\n      }\r\n      options.previousEntitys = this.entities;\r\n      this._reset();\r\n      entities = this.add(entities, langx.mixin({silent: true}, options));\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return entities;\r\n    },\r\n\r\n    // Add a entity to the end of the collection.\r\n    push: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: this.length}, options));\r\n    },\r\n\r\n    // Remove a entity from the end of the collection.\r\n    pop: function(options) {\r\n      var entity = this.at(this.length - 1);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Add a entity to the beginning of the collection.\r\n    unshift: function(entity, options) {\r\n      return this.add(entity, langx.mixin({at: 0}, options));\r\n    },\r\n\r\n    // Remove a entity from the beginning of the collection.\r\n    shift: function(options) {\r\n      var entity = this.at(0);\r\n      return this.remove(entity, options);\r\n    },\r\n\r\n    // Slice out a sub-array of entities from the collection.\r\n    slice: function() {\r\n      return slice.apply(this.entities, arguments);\r\n    },\r\n\r\n    // Get a entity from the set by id, cid, entity object with id or cid\r\n    // properties, or an attributes object that is transformed through entityId.\r\n    get: function(obj) {\r\n      if (obj == null) return void 0;\r\n      return this._byId[obj] ||\r\n        this._byId[this.entityId(obj.attributes || obj)] ||\r\n        obj.cid && this._byId[obj.cid];\r\n    },\r\n\r\n    // Returns `true` if the entity is in the collection.\r\n    has: function(obj) {\r\n      return this.get(obj) != null;\r\n    },\r\n\r\n    // Get the entity at the given index.\r\n    at: function(index) {\r\n      if (index < 0) index += this.length;\r\n      return this.entities[index];\r\n    },\r\n\r\n    // Return entities with matching attributes. Useful for simple cases of\r\n    // `filter`.\r\n    where: function(attrs, first) {\r\n      return this[first ? 'find' : 'filter'](attrs);\r\n    },\r\n\r\n    // Return the first entity with matching attributes. Useful for simple cases\r\n    // of `find`.\r\n    findWhere: function(attrs) {\r\n      return this.where(attrs, true);\r\n    },\r\n\r\n    // Force the collection to re-sort itself. You don't need to call this under\r\n    // normal circumstances, as the set will maintain sort order as each item\r\n    // is added.\r\n    sort: function(options) {\r\n      var comparator = this.comparator;\r\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\r\n      options || (options = {});\r\n\r\n      var length = comparator.length;\r\n      if (langx.isFunction(comparator)) comparator = langx.proxy(comparator, this);\r\n\r\n      // Run sort based on type of `comparator`.\r\n      if (length === 1 || langx.isString(comparator)) {\r\n        this.entities = this.sortBy(comparator);\r\n      } else {\r\n        this.entities.sort(comparator);\r\n      }\r\n      if (!options.silent) this.trigger('sort', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Pluck an attribute from each entity in the collection.\r\n    pluck: function(attr) {\r\n      return this.map(attr + '');\r\n    },\r\n\r\n    // Fetch the default set of entities for this collection, resetting the\r\n    // collection when they arrive. If `reset: true` is passed, the response\r\n    // data will be passed through the `reset` method instead of `set`.\r\n    fetch: function(options) {\r\n      options = langx.mixin({parse: true}, options);\r\n      var success = options.success;\r\n      var collection = this;\r\n      options.success = function(resp) {\r\n        var method = options.reset ? 'reset' : 'set';\r\n        collection[method](resp, options);\r\n        if (success) success.call(options.context, collection, resp, options);\r\n        collection.trigger('sync', collection, resp, options);\r\n      };\r\n      wrapError(this, options);\r\n      return this.sync('read', this, options);\r\n    },\r\n\r\n    // Create a new instance of a entity in this collection. Add the entity to the\r\n    // collection immediately, unless `wait: true` is passed, in which case we\r\n    // wait for the server to agree.\r\n    create: function(entity, options) {\r\n      options = options ? langx.clone(options) : {};\r\n      var wait = options.wait;\r\n      entity = this._prepareEntity(entity, options);\r\n      if (!entity) return false;\r\n      if (!wait) this.add(entity, options);\r\n      var collection = this;\r\n      var success = options.success;\r\n      options.success = function(m, resp, callbackOpts) {\r\n        if (wait) collection.add(m, callbackOpts);\r\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\r\n      };\r\n      entity.save(null, options);\r\n      return entity;\r\n    },\r\n\r\n    // **parse** converts a response into a list of entities to be added to the\r\n    // collection. The default implementation is just to pass it through.\r\n    parse: function(resp, options) {\r\n      return resp;\r\n    },\r\n\r\n    // Create a new collection with an identical list of entities as this one.\r\n    clone: function() {\r\n      return new this.constructor(this.entities, {\r\n        entity: this.entity,\r\n        comparator: this.comparator\r\n      });\r\n    },\r\n\r\n    // Define how to uniquely identify entities in the collection.\r\n    entityId: function(attrs) {\r\n      return attrs[this.entity.prototype.idAttribute || 'id'];\r\n    },\r\n\r\n    // Private method to reset all internal state. Called when the collection\r\n    // is first initialized or reset.\r\n    _reset: function() {\r\n      this.length = 0;\r\n      this.entities = [];\r\n      this._byId  = {};\r\n    },\r\n\r\n    // Prepare a hash of attributes (or other entity) to be added to this\r\n    // collection.\r\n    _prepareEntity: function(attrs, options) {\r\n      if (this._isEntity(attrs)) {\r\n        if (!attrs.collection) attrs.collection = this;\r\n        return attrs;\r\n      }\r\n      options = options ? langx.clone(options) : {};\r\n      options.collection = this;\r\n      var entity = new this.entity(attrs, options);\r\n      if (!entity.validationError) return entity;\r\n      this.trigger('invalid', this, entity.validationError, options);\r\n      return false;\r\n    },\r\n\r\n    // Internal method called by both remove and set.\r\n    _removeEntitys: function(entities, options) {\r\n      var removed = [];\r\n      for (var i = 0; i < entities.length; i++) {\r\n        var entity = this.get(entities[i]);\r\n        if (!entity) continue;\r\n\r\n        var index = this.indexOf(entity);\r\n        this.entities.splice(index, 1);\r\n        this.length--;\r\n\r\n        // Remove references before triggering 'remove' event to prevent an\r\n        // infinite loop. #3693\r\n        delete this._byId[entity.cid];\r\n        var id = this.entityId(entity.attributes);\r\n        if (id != null) delete this._byId[id];\r\n\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          entity.trigger('remove', entity, this, options);\r\n        }\r\n\r\n        removed.push(entity);\r\n        this._removeReference(entity, options);\r\n      }\r\n      return removed;\r\n    },\r\n\r\n    // Method for checking whether an object should be considered a entity for\r\n    // the purposes of adding to the collection.\r\n    _isEntity: function(entity) {\r\n      return entity instanceof Entity;\r\n    },\r\n\r\n    // Internal method to create a entity's ties to a collection.\r\n    _addReference: function(entity, options) {\r\n      this._byId[entity.cid] = entity;\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) this._byId[id] = entity;\r\n      entity.on('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method to sever a entity's ties to a collection.\r\n    _removeReference: function(entity, options) {\r\n      delete this._byId[entity.cid];\r\n      var id = this.entityId(entity.attributes);\r\n      if (id != null) delete this._byId[id];\r\n      if (this === entity.collection) delete entity.collection;\r\n      entity.off('all', this._onEntityEvent, this);\r\n    },\r\n\r\n    // Internal method called every time a entity in the set fires an event.\r\n    // Sets need to update their indexes when entities change ids. All other\r\n    // events simply proxy through. \"add\" and \"remove\" events that originate\r\n    // in other collections are ignored.\r\n    _onEntityEvent: function(event, entity, collection, options) {\r\n      if (entity) {\r\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n        if (event === 'destroy') this.remove(entity, options);\r\n        if (event === 'change') {\r\n          var prevId = this.entityId(entity.previousAttributes());\r\n          var id = this.entityId(entity.attributes);\r\n          if (prevId !== id) {\r\n            if (prevId != null) delete this._byId[prevId];\r\n            if (id != null) this._byId[id] = entity;\r\n          }\r\n        }\r\n      }\r\n      this.trigger.apply(this, arguments);\r\n    }\r\n\r\n  });\r\n\r\n    function models() {\r\n        return models;\r\n    }\r\n\r\n    langx.mixin(models, {\r\n        // set a `X-Http-Method-Override` header.\r\n        emulateHTTP : false,\r\n\r\n        // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n        // `application/json` requests ... this will encode the body as\r\n        // `application/x-www-form-urlencoded` instead and will send the model in a\r\n        // form param named `model`.\r\n        emulateJSON : false,\r\n\r\n        sync : sync,\r\n\r\n        Entity: Entity,\r\n        Collection : Collection\r\n    });\r\n\r\n\r\n    return skylark.models = models;\r\n});\r\n"]}