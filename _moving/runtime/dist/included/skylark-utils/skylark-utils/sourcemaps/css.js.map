{"version":3,"sources":["css.js"],"names":["define","skylark","langx","noder","_createStyleSheet","external","options","node","props","type","id","count","media","create","mixin","rel","async","createElement","append","head","sheetsById","createStyleSheet","css","sheetId","addSheetRules","deleteSheetRule","rule","sheet","isNumber","deleteRuleFunc","call","each","rulesPropName","i","_rule","this","deleteRule","defaultSheetId","removeStyleSheet","Error","remove","insertRule","selector","index","insertSheetRule","addRules","rules","length","insertRuleFunc","isString","toString","createTextNode","isAtRule","str","startsWith","json","adjust","parentName","name","depth","strNode","values","atFlg","SPACE","repeat","trim","isArray","n","value","adjusted","document","getElementsByTagName","defaultSheet","removeRule","_insertRule","addRule"],"mappings":"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","file":"../css.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\"\r\n], function(skylark, langx, noder) {\r\n\r\n    var head = document.getElementsByTagName(\"head\")[0],\r\n        count = 0,\r\n        sheetsByUrl = {},\r\n        sheetsById = {},\r\n        defaultSheetId = _createStyleSheet(),\r\n        defaultSheet = sheetsById[defaultSheetId],\r\n        rulesPropName = (\"cssRules\" in defaultSheet) ? \"cssRules\" : \"rules\",\r\n        insertRuleFunc,\r\n        deleteRuleFunc = defaultSheet.deleteRule || defaultSheet.removeRule;\r\n\r\n    if (defaultSheet.insertRule) {\r\n        var _insertRule = defaultSheet.insertRule;\r\n        insertRuleFunc = function(selector, css, index) {\r\n            _insertRule.call(this, selector + \"{\" + css + \"}\", index);\r\n        };\r\n    } else {\r\n        insertRuleFunc = defaultSheet.addRule;\r\n    }\r\n\r\n    function normalizeSelector(selectorText) {\r\n        var selector = [],\r\n            last, len;\r\n        last = defaultSheet[rulesPropName].length;\r\n        insertRuleFunc.call(defaultSheet, selectorText, ';');\r\n        len = defaultSheet[rulesPropName].length;\r\n        for (var i = len - 1; i >= last; i--) {\r\n            selector.push(_sheet[_rules][i].selectorText);\r\n            deleteRuleFunc.call(defaultSheet, i);\r\n        }\r\n        return selector.reverse().join(', ');\r\n    }\r\n\r\n    /*\r\n     * create a stylesheet element.\r\n     * @param {Boolean} external\r\n     * @param {Object} options\r\n     * @param {String} [options.media = null]\r\n     */\r\n    function _createStyleSheet(external,options ) {\r\n        var node,\r\n            props = {\r\n                type : \"text/css\"\r\n            },\r\n            id = (count++);\r\n\r\n        options = options || {};\r\n        if (options.media) {\r\n            props.media = options.media;\r\n        }\r\n\r\n        if (external) {\r\n            node = noder.create(\"link\",langx.mixin(props,{\r\n                rel  : \"stylesheet\",\r\n                async : false\r\n            }));\r\n        } else {\r\n            node = noder.createElement(\"style\",props);\r\n        }\r\n\r\n        noder.append(head,node);\r\n        sheetsById[id] = {\r\n            id : id,\r\n            node :node\r\n        };\r\n\r\n        return id;\r\n    }\r\n\r\n    function createStyleSheet(css,options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var sheetId = _createStyleSheet(false,options);\r\n        if (css) {\r\n            addSheetRules(sheetId,css);\r\n        }\r\n\r\n        return sheetId;\r\n    }\r\n\r\n    function loadStyleSheet(url, options) {\r\n        var sheet = sheetsByUrl[url];\r\n        if (!sheet) {\r\n            var sheetId = _createStyleSheet(true,options);\r\n\r\n            sheet = sheetsByUrl[url] = sheetsById[sheetId];\r\n            langx.mixin(sheet,{\r\n                state: 0, //0:unload,1:loaded,-1:loaderror\r\n                url : url,\r\n                deferred : new langx.Deferred()\r\n            });\r\n\r\n            var node = sheet.node;\r\n\r\n            startTime = new Date().getTime();\r\n\r\n            node.onload = function() {\r\n                sheet.state = 1;\r\n                sheet.deferred.resolve(sheet.id);\r\n            },\r\n            node.onerror = function(e) {\r\n                sheet.state = -1;\r\n                sheet.deferred.reject(e);\r\n            };\r\n\r\n            node.href = sheet.url;\r\n        }\r\n        return sheet.deferred.promise;\r\n    }\r\n\r\n    function deleteSheetRule(sheetId, rule) {\r\n        var sheet = sheetsById[sheetId];\r\n        if (langx.isNumber(rule)) {\r\n            deleteRuleFunc.call(sheet, rule);\r\n        } else {\r\n            langx.each(sheet[rulesPropName], function(i, _rule) {\r\n                if (rule === _rule) {\r\n                    deleteRuleFunc.call(sheet, i);\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function deleteRule(rule) {\r\n        deleteSheetRule(defaultSheetId, rule);\r\n        return this;\r\n    }\r\n\r\n    function removeStyleSheet(sheetId) {\r\n        if (sheetId === defaultSheetId) {\r\n            throw new Error(\"The default stylesheet can not be deleted\");\r\n        }\r\n        var sheet = sheetsById[sheetId];\r\n        delete sheetsById[sheetId];\r\n\r\n        noder.remove(sheet.node);\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the default stylesheet.\r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertRule(selector, css, index) {\r\n        return this.insertSheetRule(defaultSheetId, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add rules to the default stylesheet.\r\n     * @param {Object} rules\r\n     */\r\n    function addRules(rules) {\r\n        return this.addRules(defaultSheetId,rules);\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the stylesheet specified by sheetId.\r\n     * @param {Number} sheetId  \r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertSheetRule(sheetId, selector, css, index) {\r\n        if (!selector || !css) {\r\n            return -1;\r\n        }\r\n\r\n        var sheet = sheetsById[sheetId];\r\n        index = index || sheet[rulesPropName].length;\r\n\r\n        return insertRuleFunc.call(sheet, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add  rules to stylesheet.\r\n     * @param {Number} sheetId  \r\n     * @param {Object|String} rules\r\n     * @return this\r\n     * @example insertSheetRules(sheetId,{\r\n     * \r\n     * });\r\n     */\r\n    function addSheetRules(sheetId,rules) {\r\n        var sheet = sheetsById[sheetId],\r\n            css;\r\n        if (langx.isString(rules)) {\r\n            css = rules;\r\n        } else {\r\n            css = toString(rules);\r\n        }\r\n\r\n        noder.append(sheet.node,noder.createTextNode(css));\r\n        \r\n        return this;\r\n    }\r\n\r\n    function isAtRule(str) {\r\n        return str.startsWith(\"@\");\r\n    }\r\n\r\n    function toString(json){\r\n        var adjust = function(parentName,name,depth) {\r\n            if (parentName) {\r\n                if (isAtRule(parentName)) {\r\n                    depth += 1;\r\n                } else {\r\n                    name =  parentName + \" \" + name;\r\n                }                \r\n            }\r\n            return {\r\n                name : name,\r\n                depth : depth\r\n            }\r\n        };\r\n\r\n        var strNode = function (name, values, depth) {\r\n            var str = \"\",\r\n                atFlg = isAtRule(name);\r\n\r\n\r\n            if (isAtRule(name)) {\r\n                // at rule\r\n                if (langx.isString(values)) {\r\n                    // an at rule without block\r\n                    // ex: (1) @charset 'utf8';\r\n                    str = css.SPACE.repeat(depth) + name.trim() + \" \\\"\" + values.trim() + \" \\\";\\n\";\r\n                } else {\r\n                    // an at rule with block, ex :\r\n                    //  @media 'screen' {\r\n                    //  }\r\n                    str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n                    str += strNode(\"\",values,depth+1);\r\n                    str += css.SPACE.repeat(depth) + \" }\\n\";\r\n                }\r\n            } else {\r\n                // a selector or a property\r\n                if (langx.isString(values)) {\r\n                    // a css property \r\n                    // ex : (1) font-color : red;\r\n                    str = css.SPACE.repeat(depth) + name.trim() ;\r\n                    if (atFlg) {\r\n                        str = str +  \" \\\"\" + values.trim() + \" \\\";\\n\";\r\n                    } else {\r\n                        str = str + ': ' + values.trim() + \";\\n\";\r\n                    }\r\n\r\n                } else {\r\n                    // a selector rule \r\n                    // ex : (1) .class1 : {\r\n                    //            font-color : red;\r\n                    //          }\r\n                    if (langx.isArray(values)) {\r\n                        // array for ordering\r\n                        for (var n =0; n<values.length; n ++) {\r\n                           str +=  strNode(name,values[n],depth);\r\n                        }\r\n                    } else {\r\n                        // plain object\r\n\r\n                        if (name) {\r\n                            str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n\r\n                            for (var n in values) {\r\n                                var value =values[n];\r\n                                if (langx.isString(value)) {\r\n                                    // css property\r\n                                    str += strNode(n,value,depth+1)\r\n                                }\r\n                            }\r\n\r\n                            str += css.SPACE.repeat(depth) + \"}\\n\";\r\n                        }\r\n\r\n                        for (var n in values) {\r\n                            var value =values[n];\r\n                            if (!langx.isString(value)) {\r\n                                var adjusted = adjust(name,n,depth);\r\n                                str +=  strNode(adjusted.name,value,adjusted.depth);\r\n                            } \r\n                        }\r\n\r\n                    }\r\n                }\r\n            }   \r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        return strNode(\"\",json,0);\r\n    }\r\n \r\n\r\n    function css() {\r\n        return css;\r\n    }\r\n\r\n    langx.mixin(css, {\r\n        SPACE : \"\\t\",\r\n\r\n        addRules : addRules,\r\n\r\n        addSheetRules : addSheetRules,\r\n\r\n        createStyleSheet: createStyleSheet,\r\n\r\n        deleteSheetRule : deleteSheetRule,\r\n\r\n        deleteRule : deleteRule,\r\n\r\n        insertRule : insertRule,\r\n\r\n        insertSheetRule : insertSheetRule,\r\n\r\n        removeStyleSheet : removeStyleSheet,\r\n\r\n        toString : toString\r\n    });\r\n\r\n    return skylark.css = css;\r\n});\r\n"]}