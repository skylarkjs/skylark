{"version":3,"sources":["finder.js"],"names":["define","skylark","langx","browser","noder","velm","createInputPseudo","type","elem","name","nodeName","toLowerCase","createButtonPseudo","ancestor","node","selector","root","rootIsSelector","isString","parentNode","matches","ancestors","ret","nodeType","push","local","filter","byId","id","doc","getElementById","children","childNodes","i","length","closest","descendants","elm","slice","call","querySelectorAll","matchError","query","descendant","querySelector","nodes","find","document","body","findAll","firstChild","first","nextSibling","lastChild","last","previousSibling","nativeMatchesSelector","replace","match","isArrayLike","inArray","isPlainObject","check","adjacent","nextSiblings","parent","previousSiblings","siblings","Array","prototype","matchesSelector","parser","rawMatch","separator","combinator","combinatorChildren","tagName","className","attributeKey","attributeOperator","attributeQuote","attributeValue","pseudoMarker","pseudoClass","pseudoQuote","pseudoClassQuotedValue","pseudoClassValue","separatorIndex","parsed","expressions","combinatorIndex","currentSeparator","reversed","reverseCombinator","tag","currentParsed","reUnescape","classList","classes","value","regexp","RegExp","escapeRegExp","pseudos","key","test","indexOf","attributes","operator","cache","reverseCache","parse","expression","isReversed","Slick","currentCache","raw","reverse","this","exp","parts","j","cexp","from","to","string","apply","rinputs","rheader","parseSelector","button","checked","contains","idx","text","$","disabled","enabled","eq","even","focus","activeElement","href","tabindex","gt","has","sel","header","hidden","input","lt","not","odd","selected","visible","offsetWidth","forEach","item","isArrayFilter","radio","checkbox","file","password","image","submit","reset","divide","cond","nativeSelector","customPseudos","JSON","stringify","part","undefined","toUpperCase","arrayFilte","cls","pseudo","getAttribute","hasAttribute","currentExpression","simpleExpCounter","filterSingle","matchs","Error","uniq","concat","combine","bit","node1","op","prev","next","divided","single","currentBit","founds","found","currentItems","map","finder","mixin"],"mappings":"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","file":"../finder.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./browser\",\r\n    \"./noder\"\r\n], function(skylark, langx, browser, noder, velm) {\r\n    var local = {},\r\n        filter = Array.prototype.filter,\r\n        slice = Array.prototype.slice,\r\n        nativeMatchesSelector = browser.matchesSelector;\r\n\r\n    /*\r\n    ---\r\n    name: Slick.Parser\r\n    description: Standalone CSS3 Selector parser\r\n    provides: Slick.Parser\r\n    ...\r\n    */\r\n    ;\r\n    (function() {\r\n\r\n        var parsed,\r\n            separatorIndex,\r\n            combinatorIndex,\r\n            reversed,\r\n            cache = {},\r\n            reverseCache = {},\r\n            reUnescape = /\\\\/g;\r\n\r\n        var parse = function(expression, isReversed) {\r\n            if (expression == null) return null;\r\n            if (expression.Slick === true) return expression;\r\n            expression = ('' + expression).replace(/^\\s+|\\s+$/g, '');\r\n            reversed = !!isReversed;\r\n            var currentCache = (reversed) ? reverseCache : cache;\r\n            if (currentCache[expression]) return currentCache[expression];\r\n            parsed = {\r\n                Slick: true,\r\n                expressions: [],\r\n                raw: expression,\r\n                reverse: function() {\r\n                    return parse(this.raw, true);\r\n                }\r\n            };\r\n            separatorIndex = -1;\r\n            while (expression != (expression = expression.replace(regexp, parser)));\r\n            parsed.length = parsed.expressions.length;\r\n            return currentCache[parsed.raw] = (reversed) ? reverse(parsed) : parsed;\r\n        };\r\n\r\n        var reverseCombinator = function(combinator) {\r\n            if (combinator === '!') return ' ';\r\n            else if (combinator === ' ') return '!';\r\n            else if ((/^!/).test(combinator)) return combinator.replace(/^!/, '');\r\n            else return '!' + combinator;\r\n        };\r\n\r\n        var reverse = function(expression) {\r\n            var expressions = expression.expressions;\r\n            for (var i = 0; i < expressions.length; i++) {\r\n                var exp = expressions[i];\r\n                var last = {\r\n                    parts: [],\r\n                    tag: '*',\r\n                    combinator: reverseCombinator(exp[0].combinator)\r\n                };\r\n\r\n                for (var j = 0; j < exp.length; j++) {\r\n                    var cexp = exp[j];\r\n                    if (!cexp.reverseCombinator) cexp.reverseCombinator = ' ';\r\n                    cexp.combinator = cexp.reverseCombinator;\r\n                    delete cexp.reverseCombinator;\r\n                }\r\n\r\n                exp.reverse().push(last);\r\n            }\r\n            return expression;\r\n        };\r\n\r\n        var escapeRegExp = (function() {\r\n            // Credit: XRegExp 0.6.1 (c) 2007-2008 Steven Levithan <http://stevenlevithan.com/regex/xregexp/> MIT License\r\n            var from = /(?=[\\-\\[\\]{}()*+?.\\\\\\^$|,#\\s])/g,\r\n                to = '\\\\';\r\n            return function(string) {\r\n                return string.replace(from, to)\r\n            }\r\n        }())\r\n\r\n        var regexp = new RegExp(\r\n            \"^(?:\\\\s*(,)\\\\s*|\\\\s*(<combinator>+)\\\\s*|(\\\\s+)|(<unicode>+|\\\\*)|\\\\#(<unicode>+)|\\\\.(<unicode>+)|\\\\[\\\\s*(<unicode1>+)(?:\\\\s*([*^$!~|]?=)(?:\\\\s*(?:([\\\"']?)(.*?)\\\\9)))?\\\\s*\\\\](?!\\\\])|(:+)(<unicode>+)(?:\\\\((?:(?:([\\\"'])([^\\\\13]*)\\\\13)|((?:\\\\([^)]+\\\\)|[^()]*)+))\\\\))?)\"\r\n            .replace(/<combinator>/, '[' + escapeRegExp(\">+~`!@$%^&={}\\\\;</\") + ']')\r\n            .replace(/<unicode>/g, '(?:[\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n            .replace(/<unicode1>/g, '(?:[:\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n        );\r\n\r\n        function parser(\r\n            rawMatch,\r\n\r\n            separator,\r\n            combinator,\r\n            combinatorChildren,\r\n\r\n            tagName,\r\n            id,\r\n            className,\r\n\r\n            attributeKey,\r\n            attributeOperator,\r\n            attributeQuote,\r\n            attributeValue,\r\n\r\n            pseudoMarker,\r\n            pseudoClass,\r\n            pseudoQuote,\r\n            pseudoClassQuotedValue,\r\n            pseudoClassValue\r\n        ) {\r\n            if (separator || separatorIndex === -1) {\r\n                parsed.expressions[++separatorIndex] = [];\r\n                combinatorIndex = -1;\r\n                if (separator) return '';\r\n            }\r\n\r\n            if (combinator || combinatorChildren || combinatorIndex === -1) {\r\n                combinator = combinator || ' ';\r\n                var currentSeparator = parsed.expressions[separatorIndex];\r\n                if (reversed && currentSeparator[combinatorIndex])\r\n                    currentSeparator[combinatorIndex].reverseCombinator = reverseCombinator(combinator);\r\n                currentSeparator[++combinatorIndex] = {\r\n                    combinator: combinator,\r\n                    tag: '*'\r\n                };\r\n            }\r\n\r\n            var currentParsed = parsed.expressions[separatorIndex][combinatorIndex];\r\n\r\n            if (tagName) {\r\n                currentParsed.tag = tagName.replace(reUnescape, '');\r\n\r\n            } else if (id) {\r\n                currentParsed.id = id.replace(reUnescape, '');\r\n\r\n            } else if (className) {\r\n                className = className.replace(reUnescape, '');\r\n\r\n                if (!currentParsed.classList) currentParsed.classList = [];\r\n                if (!currentParsed.classes) currentParsed.classes = [];\r\n                currentParsed.classList.push(className);\r\n                currentParsed.classes.push({\r\n                    value: className,\r\n                    regexp: new RegExp('(^|\\\\s)' + escapeRegExp(className) + '(\\\\s|$)')\r\n                });\r\n\r\n            } else if (pseudoClass) {\r\n                pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue;\r\n                pseudoClassValue = pseudoClassValue ? pseudoClassValue.replace(reUnescape, '') : null;\r\n\r\n                if (!currentParsed.pseudos) currentParsed.pseudos = [];\r\n                currentParsed.pseudos.push({\r\n                    key: pseudoClass.replace(reUnescape, ''),\r\n                    value: pseudoClassValue,\r\n                    type: pseudoMarker.length == 1 ? 'class' : 'element'\r\n                });\r\n\r\n            } else if (attributeKey) {\r\n                attributeKey = attributeKey.replace(reUnescape, '');\r\n                attributeValue = (attributeValue || '').replace(reUnescape, '');\r\n\r\n                var test, regexp;\r\n\r\n                switch (attributeOperator) {\r\n                    case '^=':\r\n                        regexp = new RegExp('^' + escapeRegExp(attributeValue));\r\n                        break;\r\n                    case '$=':\r\n                        regexp = new RegExp(escapeRegExp(attributeValue) + '$');\r\n                        break;\r\n                    case '~=':\r\n                        regexp = new RegExp('(^|\\\\s)' + escapeRegExp(attributeValue) + '(\\\\s|$)');\r\n                        break;\r\n                    case '|=':\r\n                        regexp = new RegExp('^' + escapeRegExp(attributeValue) + '(-|$)');\r\n                        break;\r\n                    case '=':\r\n                        test = function(value) {\r\n                            return attributeValue == value;\r\n                        };\r\n                        break;\r\n                    case '*=':\r\n                        test = function(value) {\r\n                            return value && value.indexOf(attributeValue) > -1;\r\n                        };\r\n                        break;\r\n                    case '!=':\r\n                        test = function(value) {\r\n                            return attributeValue != value;\r\n                        };\r\n                        break;\r\n                    default:\r\n                        test = function(value) {\r\n                            return !!value;\r\n                        };\r\n                }\r\n\r\n                if (attributeValue == '' && (/^[*$^]=$/).test(attributeOperator)) test = function() {\r\n                    return false;\r\n                };\r\n\r\n                if (!test) test = function(value) {\r\n                    return value && regexp.test(value);\r\n                };\r\n\r\n                if (!currentParsed.attributes) currentParsed.attributes = [];\r\n                currentParsed.attributes.push({\r\n                    key: attributeKey,\r\n                    operator: attributeOperator,\r\n                    value: attributeValue,\r\n                    test: test\r\n                });\r\n\r\n            }\r\n\r\n            return '';\r\n        };\r\n\r\n        // Slick NS\r\n\r\n        var Slick = (this.Slick || {});\r\n\r\n        Slick.parse = function(expression) {\r\n            return parse(expression);\r\n        };\r\n\r\n        Slick.escapeRegExp = escapeRegExp;\r\n\r\n        if (!this.Slick) this.Slick = Slick;\r\n\r\n    }).apply(local);\r\n\r\n\r\n    var simpleClassSelectorRE = /^\\.([\\w-]*)$/,\r\n        simpleIdSelectorRE = /^#([\\w-]*)$/,\r\n        rinputs = /^(?:input|select|textarea|button)$/i,\r\n        rheader = /^h\\d$/i,\r\n        slice = Array.prototype.slice;\r\n\r\n\r\n    local.parseSelector = local.Slick.parse;\r\n\r\n\r\n    var pseudos = local.pseudos = {\r\n        // custom pseudos\r\n        \"button\": function( elem ) {\r\n            var name = elem.nodeName.toLowerCase();\r\n            return name === \"input\" && elem.type === \"button\" || name === \"button\";\r\n        },\r\n\r\n        'checked': function(elm) {\r\n            return !!elm.checked;\r\n        },\r\n\r\n        'contains': function(elm, idx, nodes, text) {\r\n            if ($(this).text().indexOf(text) > -1) return this\r\n        },\r\n\r\n        'disabled': function(elm) {\r\n            return !!elm.disabled;\r\n        },\r\n\r\n        'enabled': function(elm) {\r\n            return !elm.disabled;\r\n        },\r\n\r\n        'eq': function(elm, idx, nodes, value) {\r\n            return (idx == value);\r\n        },\r\n\r\n        'even' : function(elm, idx, nodes, value) {\r\n            return (idx % 2) === 1;\r\n        },\r\n\r\n        'focus': function(elm) {\r\n            return document.activeElement === elm && (elm.href || elm.type || elm.tabindex);\r\n        },\r\n\r\n        'first': function(elm, idx) {\r\n            return (idx === 0);\r\n        },\r\n\r\n        'gt': function(elm, idx, nodes, value) {\r\n            return (idx > value);\r\n        },\r\n\r\n        'has': function(elm, idx, nodes, sel) {\r\n            return find(elm, sel);\r\n        },\r\n\r\n        // Element/input types\r\n        \"header\": function( elem ) {\r\n            return rheader.test( elem.nodeName );\r\n        },\r\n\r\n        'hidden': function(elm) {\r\n            return !local.pseudos[\"visible\"](elm);\r\n        },\r\n\r\n        \"input\": function( elem ) {\r\n            return rinputs.test( elem.nodeName );\r\n        },\r\n\r\n        'last': function(elm, idx, nodes) {\r\n            return (idx === nodes.length - 1);\r\n        },\r\n\r\n        'lt': function(elm, idx, nodes, value) {\r\n            return (idx < value);\r\n        },\r\n\r\n        'not': function(elm, idx, nodes, sel) {\r\n            return !matches(elm, sel);\r\n        },\r\n\r\n        'odd' : function(elm, idx, nodes, value) {\r\n            return (idx % 2) === 0;\r\n        },\r\n\r\n        'parent': function(elm) {\r\n            return !!elm.parentNode;\r\n        },\r\n\r\n        'selected': function(elm) {\r\n            return !!elm.selected;\r\n        },\r\n\r\n        'text': function(elm){\r\n            return elm.type === \"text\";\r\n        },\r\n\r\n        'visible': function(elm) {\r\n            return elm.offsetWidth && elm.offsetWidth\r\n        }\r\n    };\r\n\r\n    [\"first\",\"eq\",\"last\"].forEach(function(item){\r\n        pseudos[item].isArrayFilter = true;\r\n    });\r\n\r\n\r\n\r\n    pseudos[\"nth\"] = pseudos[\"eq\"];\r\n\r\n    function createInputPseudo( type ) {\r\n        return function( elem ) {\r\n            var name = elem.nodeName.toLowerCase();\r\n            return name === \"input\" && elem.type === type;\r\n        };\r\n    }\r\n\r\n    function createButtonPseudo( type ) {\r\n        return function( elem ) {\r\n            var name = elem.nodeName.toLowerCase();\r\n            return (name === \"input\" || name === \"button\") && elem.type === type;\r\n        };\r\n    }\r\n\r\n    // Add button/input type pseudos\r\n    for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\r\n        pseudos[ i ] = createInputPseudo( i );\r\n    }\r\n    for ( i in { submit: true, reset: true } ) {\r\n        pseudos[ i ] = createButtonPseudo( i );\r\n    }\r\n\r\n\r\n    local.divide = function(cond) {\r\n        var nativeSelector = \"\",\r\n            customPseudos = [],\r\n            tag,\r\n            id,\r\n            classes,\r\n            attributes,\r\n            pseudos;\r\n\r\n\r\n        if (id = cond.id) {\r\n            nativeSelector += (\"#\" + id);\r\n        }\r\n        if (classes = cond.classes) {\r\n            for (var i = classes.length; i--;) {\r\n                nativeSelector += (\".\" + classes[i].value);\r\n            }\r\n        }\r\n        if (attributes = cond.attributes) {\r\n            for (var i = 0; i < attributes.length; i++) {\r\n                if (attributes[i].operator) {\r\n                    nativeSelector += (\"[\" + attributes[i].key + attributes[i].operator + JSON.stringify(attributes[i].value)  +\"]\");\r\n                } else {\r\n                    nativeSelector += (\"[\" + attributes[i].key + \"]\");\r\n                }\r\n            }\r\n        }\r\n        if (pseudos = cond.pseudos) {\r\n            for (i = pseudos.length; i--;) {\r\n                part = pseudos[i];\r\n                if (this.pseudos[part.key]) {\r\n                    customPseudos.push(part);\r\n                } else {\r\n                    if (part.value !== undefined) {\r\n                        nativeSelector += (\":\" + part.key + \"(\" + JSON.stringify(part))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tag = cond.tag) {\r\n            nativeSelector = tag.toUpperCase() + nativeSelector;\r\n        }\r\n\r\n        if (!nativeSelector) {\r\n            nativeSelector = \"*\";\r\n        }\r\n\r\n        return {\r\n            nativeSelector: nativeSelector,\r\n            customPseudos: customPseudos\r\n        }\r\n\r\n    };\r\n\r\n    local.check = function(node, cond, idx, nodes,arrayFilte) {\r\n        var tag,\r\n            id,\r\n            classes,\r\n            attributes,\r\n            pseudos,\r\n\r\n            i, part, cls, pseudo;\r\n\r\n        if (!arrayFilte) {\r\n            if (tag = cond.tag) {\r\n                var nodeName = node.nodeName.toUpperCase();\r\n                if (tag == '*') {\r\n                    if (nodeName < '@') return false; // Fix for comment nodes and closed nodes\r\n                } else {\r\n                    if (nodeName != (tag || \"\").toUpperCase()) return false;\r\n                }\r\n            }\r\n\r\n            if (id = cond.id) {\r\n                if (node.getAttribute('id') != id) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n\r\n            if (classes = cond.classes) {\r\n                for (i = classes.length; i--;) {\r\n                    cls = node.getAttribute('class');\r\n                    if (!(cls && classes[i].regexp.test(cls))) return false;\r\n                }\r\n            }\r\n\r\n            if (attributes = cond.attributes) {\r\n                 for (i = attributes.length; i--;) {\r\n                    part = attributes[i];\r\n                    if (part.operator ? !part.test(node.getAttribute(part.key)) : !node.hasAttribute(part.key)) return false;\r\n                }\r\n            }\r\n\r\n        }\r\n        if (pseudos = cond.pseudos) {\r\n            for (i = pseudos.length; i--;) {\r\n                part = pseudos[i];\r\n                if (pseudo = this.pseudos[part.key]) {\r\n                    if ((arrayFilte && pseudo.isArrayFilter) || (!arrayFilte && !pseudo.isArrayFilter)) {\r\n                        if (!pseudo(node, idx, nodes, part.value)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (!arrayFilte && !nativeMatchesSelector.call(node, part.key)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    local.match = function(node, selector) {\r\n\r\n        var parsed ;\r\n\r\n        if (langx.isString(selector)) {\r\n            parsed = local.Slick.parse(selector);\r\n        } else {\r\n            parsed = selector;            \r\n        }\r\n        \r\n        if (!parsed) {\r\n            return true;\r\n        }\r\n\r\n        // simple (single) selectors\r\n        var expressions = parsed.expressions,\r\n            simpleExpCounter = 0,\r\n            i,\r\n            currentExpression;\r\n        for (i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            if (currentExpression.length == 1) {\r\n                var exp = currentExpression[0];\r\n                if (this.check(node,exp)) {\r\n                    return true;\r\n                }\r\n                simpleExpCounter++;\r\n            }\r\n        }\r\n\r\n        if (simpleExpCounter == parsed.length) {\r\n            return false;\r\n        }\r\n\r\n        var nodes = this.query(document, parsed),\r\n            item;\r\n        for (i = 0; item = nodes[i++];) {\r\n            if (item === node) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n\r\n    local.filterSingle = function(nodes, exp){\r\n        var matchs = filter.call(nodes, function(node, idx) {\r\n            return local.check(node, exp, idx, nodes,false);\r\n        });    \r\n\r\n        matchs = filter.call(matchs, function(node, idx) {\r\n            return local.check(node, exp, idx, matchs,true);\r\n        }); \r\n        return matchs;\r\n    };\r\n\r\n    local.filter = function(nodes, selector) {\r\n        var parsed;\r\n\r\n        if (langx.isString(selector)) {\r\n            parsed = local.Slick.parse(selector);\r\n        } else {\r\n            return local.filterSingle(nodes,selector);           \r\n        }\r\n\r\n        // simple (single) selectors\r\n        var expressions = parsed.expressions,\r\n            i,\r\n            currentExpression,\r\n            ret = [];\r\n        for (i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            if (currentExpression.length == 1) {\r\n                var exp = currentExpression[0];\r\n\r\n                var matchs = local.filterSingle(nodes,exp);  \r\n\r\n                ret = langx.uniq(ret.concat(matchs));\r\n            } else {\r\n                throw new Error(\"not supported selector:\" + selector);\r\n            }\r\n        }\r\n\r\n        return ret;\r\n \r\n    };    \r\n\r\n    local.combine = function(elm, bit) {\r\n        var op = bit.combinator,\r\n            cond = bit,\r\n            node1,\r\n            nodes = [];\r\n\r\n        switch (op) {\r\n            case '>': // direct children\r\n                nodes = children(elm, cond);\r\n                break;\r\n            case '+': // next sibling\r\n                node1 = nextSibling(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '^': // first child\r\n                node1 = firstChild(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '~': // next siblings\r\n                nodes = nextSiblings(elm, cond);\r\n                break;\r\n            case '++': // next sibling and previous sibling\r\n                var prev = previousSibling(elm, cond, true),\r\n                    next = nextSibling(elm, cond, true);\r\n                if (prev) {\r\n                    nodes.push(prev);\r\n                }\r\n                if (next) {\r\n                    nodes.push(next);\r\n                }\r\n                break;\r\n            case '~~': // next siblings and previous siblings\r\n                nodes = siblings(elm, cond);\r\n                break;\r\n            case '!': // all parent nodes up to document\r\n                nodes = ancestors(elm, cond);\r\n                break;\r\n            case '!>': // direct parent (one level)\r\n                node1 = parent(elm, cond);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '!+': // previous sibling\r\n                nodes = previousSibling(elm, cond, true);\r\n                break;\r\n            case '!^': // last child\r\n                node1 = lastChild(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '!~': // previous siblings\r\n                nodes = previousSiblings(elm, cond);\r\n                break;\r\n            default:\r\n                var divided = this.divide(bit);\r\n                nodes = slice.call(elm.querySelectorAll(divided.nativeSelector));\r\n                if (divided.customPseudos) {\r\n                    for (var i = divided.customPseudos.length - 1; i >= 0; i--) {\r\n                        nodes = filter.call(nodes, function(item, idx) {\r\n                            return local.check(item, {\r\n                                pseudos: [divided.customPseudos[i]]\r\n                            }, idx, nodes,false)\r\n                        });\r\n\r\n                        nodes = filter.call(nodes, function(item, idx) {\r\n                            return local.check(item, {\r\n                                pseudos: [divided.customPseudos[i]]\r\n                            }, idx, nodes,true)\r\n                        });                        \r\n                    }\r\n                }\r\n                break;\r\n\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    local.query = function(node, selector, single) {\r\n\r\n\r\n        var parsed = this.Slick.parse(selector);\r\n\r\n        var\r\n            founds = [],\r\n            currentExpression, currentBit,\r\n            expressions = parsed.expressions;\r\n\r\n        for (var i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            var currentItems = [node],\r\n                found;\r\n            for (var j = 0;\r\n                (currentBit = currentExpression[j]); j++) {\r\n                found = langx.map(currentItems, function(item, i) {\r\n                    return local.combine(item, currentBit)\r\n                });\r\n                if (found) {\r\n                    currentItems = found;\r\n                }\r\n            }\r\n            if (found) {\r\n                founds = founds.concat(found);\r\n            }\r\n        }\r\n\r\n        return founds;\r\n    }\r\n\r\n\r\n    function ancestor(node, selector, root) {\r\n        var rootIsSelector = root && langx.isString(root);\r\n        while (node = node.parentNode) {\r\n            if (matches(node, selector)) {\r\n                return node;\r\n            }\r\n            if (root) {\r\n                if (rootIsSelector) {\r\n                    if (matches(node,root)) {\r\n                        break;\r\n                    }\r\n                } else if (node == root) {\r\n                    break;\r\n                }\r\n            } \r\n        }\r\n        return null;\r\n    }\r\n\r\n    function ancestors(node, selector,root) {\r\n        var ret = [],\r\n            rootIsSelector = root && langx.isString(root);\r\n        while ((node = node.parentNode) && (node.nodeType !== 9)) {\r\n            ret.push(node);\r\n            if (root) {\r\n                if (rootIsSelector) {\r\n                    if (matches(node,root)) {\r\n                        break;\r\n                    }\r\n                } else if (node == root) {\r\n                    break;\r\n                }\r\n            } \r\n\r\n        }\r\n\r\n        if (selector) {\r\n            ret = local.filter(ret,selector);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function byId(id, doc) {\r\n        doc = doc || noder.doc();\r\n        return doc.getElementById(id);\r\n    }\r\n\r\n    function children(node, selector) {\r\n        var childNodes = node.childNodes,\r\n            ret = [];\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            var node = childNodes[i];\r\n            if (node.nodeType == 1) {\r\n                ret.push(node);\r\n            }\r\n        }\r\n        if (selector) {\r\n            ret = local.filter(ret,selector);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function closest(node, selector) {\r\n        while (node && !(matches(node, selector))) {\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    function descendants(elm, selector) {\r\n        // Selector\r\n        try {\r\n            return slice.call(elm.querySelectorAll(selector));\r\n        } catch (matchError) {\r\n            //console.log(matchError);\r\n        }\r\n        return local.query(elm, selector);\r\n    }\r\n\r\n    function descendant(elm, selector) {\r\n        // Selector\r\n        try {\r\n            return elm.querySelector(selector);\r\n        } catch (matchError) {\r\n            //console.log(matchError);\r\n        }\r\n        var nodes = local.query(elm, selector);\r\n        if (nodes.length > 0) {\r\n            return nodes[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function find(elm,selector) {\r\n        if (!selector) {\r\n            selector = elm;\r\n            elm = document.body;\r\n        }\r\n        if (matches(elm,selector)) {\r\n            return elm;\r\n        } else {\r\n            return descendant(elm, selector);\r\n        }\r\n    }\r\n\r\n    function findAll(elm,selector) {\r\n        if (!selector) {\r\n            selector = elm;\r\n            elm = document.body;\r\n        }\r\n        return descendants(elm, selector);\r\n    }\r\n\r\n    function firstChild(elm, selector, first) {\r\n        var childNodes = elm.childNodes,\r\n            node = childNodes[0];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (first) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function lastChild(elm, selector, last) {\r\n        var childNodes = elm.childNodes,\r\n            node = childNodes[childNodes.length - 1];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (last) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function matches(elm, selector) {\r\n        if (!selector || !elm || elm.nodeType !== 1) {\r\n            return false\r\n        }\r\n\r\n        if (langx.isString(selector)) {\r\n            try {\r\n                return nativeMatchesSelector.call(elm, selector.replace(/\\[([^=]+)=\\s*([^'\"\\]]+?)\\s*\\]/g, '[$1=\"$2\"]'));\r\n            } catch (matchError) {\r\n                //console.log(matchError);\r\n            }\r\n            return local.match(elm, selector);\r\n        } else if (langx.isArrayLike(selector)) {\r\n            return langx.inArray(elm,selector) > -1;\r\n        } else if (langx.isPlainObject(selector)){    \r\n            return local.check(elm, selector);\r\n        } else {\r\n            return elm === selector;\r\n        }\r\n\r\n    }\r\n\r\n    function nextSibling(elm, selector, adjacent) {\r\n        var node = elm.nextSibling;\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (adjacent) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function nextSiblings(elm, selector) {\r\n        var node = elm.nextSibling,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n\r\n    function parent(elm, selector) {\r\n        var node = elm.parentNode;\r\n        if (node && (!selector || matches(node, selector))) {\r\n            return node;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function previousSibling(elm, selector, adjacent) {\r\n        var node = elm.previousSibling;\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (adjacent) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function previousSiblings(elm, selector) {\r\n        var node = elm.previousSibling,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function siblings(elm, selector) {\r\n        var node = elm.parentNode.firstChild,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1 && node !== elm) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    var finder = function() {\r\n        return finder;\r\n    };\r\n\r\n    langx.mixin(finder, {\r\n\r\n        ancestor: ancestor,\r\n\r\n        ancestors: ancestors,\r\n\r\n        byId: byId,\r\n\r\n        children: children,\r\n\r\n        closest: closest,\r\n\r\n        descendant: descendant,\r\n\r\n        descendants: descendants,\r\n\r\n        find: find,\r\n\r\n        findAll: findAll,\r\n\r\n        firstChild: firstChild,\r\n\r\n        lastChild: lastChild,\r\n\r\n        matches: matches,\r\n\r\n        nextSibling: nextSibling,\r\n\r\n        nextSiblings: nextSiblings,\r\n\r\n        parent: parent,\r\n\r\n        previousSibling: previousSibling,\r\n\r\n        previousSiblings: previousSiblings,\r\n\r\n        pseudos: local.pseudos,\r\n\r\n        siblings: siblings\r\n    });\r\n\r\n    return skylark.finder = finder;\r\n});\r\n"]}