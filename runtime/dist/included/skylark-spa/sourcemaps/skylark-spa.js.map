{"version":3,"sources":["skylark-spa.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","resolved","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","router","createEvent","type","props","e","CustomEvent","safeMixin","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","data","self","eventName","isFunction","on","_entering","ctx","_prepared","prepare","getConfigData","key","getNamedValue","location","pathname","match","regex","d","_setting","controllerSetting","controller","contentPath","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","isString","innerHTML","appendChild","Plugin","hookers","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","undefined","URL","baseURI","homePath","getConfig","go","path","force","promises0","all","promises1","lazy","promises2","concat","run","start","main"],"mappings":"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","file":"../skylark-spa.js","sourcesContent":["define('skylark-spa/spa',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-router/router\"\r\n], function(skylark, langx, router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (!this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        getNamedValue: function() {\r\n            return window.location.pathname.match(this.regex);\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                d.resolve();\r\n            });\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var RouteController = langx.Evented.inherit({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.Evented.inherit({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._rvc = document.querySelector(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            var content = curCtx.route.render(curCtx);\r\n            if (langx.isString(content)) {\r\n                this._rvc.innerHTML = content;\r\n            } else {\r\n                this._rvc.innerHTML = \"\";\r\n                this._rvc.appendChild(content);\r\n            }\r\n            curCtx.route.trigger(createEvent(\"rendered\", {\r\n                route: curCtx.route,\r\n                content: content\r\n            }));\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n\r\n            if (langx.isString(setting.hookers)) {\r\n                setting.hookers = setting.hookers.split(\" \");\r\n            }\r\n            this._setting = setting;\r\n        },\r\n\r\n        isHooked: function(eventName) {\r\n            var hookers = this._setting.hookers || [];\r\n            return hookers.indexOf(eventName) > -1;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                router.on(setting.hookers, {\r\n                    plugin: self\r\n                }, langx.proxy(controller.perform, controller));\r\n                d.resolve();\r\n            });\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    plugin: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.Evented.inherit({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl;\r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path, force) {\r\n            router.go(path, force);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            if (this._prepared) {\r\n                return Deferred.resolve();\r\n            }\r\n            var self = this;\r\n\r\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\r\n                if (plugin.isHooked(\"starting\")) {\r\n                    return plugin.prepare();\r\n                }\r\n            });\r\n\r\n            return Deferred.all(promises0).then(function() {\r\n                router.trigger(createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n                var promises1 = langx.map(router.routes(), function(route, name) {\r\n                        if (route.lazy === false) {\r\n                            return route.prepare();\r\n                        }\r\n                    }),\r\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\r\n                        if (!plugin.isHooked(\"starting\")) {\r\n                            return plugin.prepare();\r\n                        }\r\n                    });\r\n\r\n\r\n                return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n            router.trigger(createEvent(\"started\", {\r\n                spa: this\r\n            }));\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n        \"RouteController\": RouteController\r\n\r\n    });\r\n\r\n    return skylark.spa = spa;\r\n});\r\n\ndefine('skylark-spa/main',[\r\n    \"skylark-langx/skylark\",\r\n    \"./spa\"\r\n], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-spa', ['skylark-spa/main'], function (main) { return main; });\n\n"]}