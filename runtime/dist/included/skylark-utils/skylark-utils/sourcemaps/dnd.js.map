{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","noder","datax","finder","geom","eventer","styler","draggable","elm","params","Draggable","droppable","Droppable","dnd","DndManager","on","off","attr","removeAttr","pagePosition","addClass","height","Evented","inherit","klassName","init","prepare","e","create","dragSource","handleElm","trigger","start","event","p","this","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","effectAllowed","over","end","dropped","removeClass","manager","self","_params","forEach","eventName","isFunction","mousedown","handle","closest","target","prop","mouseup","dragstart","dragend","stop","hoverClass","activeClass","acceptable","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","mixin"],"mappings":"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","file":"../dnd.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n],function(skylark, langx,noder,datax,finder,geom,eventer,styler){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = langx.Evented.inherit({\r\n      klassName : \"DndManager\",\r\n\r\n      init : function() {\r\n\r\n      },\r\n\r\n      prepare : function(draggable) {\r\n          var e = eventer.create(\"preparing\",{\r\n             dragSource : draggable.elm,\r\n             handleElm : draggable.handleElm\r\n          });\r\n          draggable.trigger(e);\r\n          draggable.dragSource = e.dragSource;\r\n      },\r\n\r\n      start : function(draggable,event) {\r\n\r\n        var p = geom.pagePosition(draggable.elm);\r\n        this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n        this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n        var e = eventer.create(\"started\",{\r\n          elm : draggable.elm,\r\n          dragSource : draggable.dragSource,\r\n          handleElm : draggable.handleElm,\r\n          ghost : null,\r\n\r\n          transfer : {\r\n          }\r\n        });\r\n\r\n        draggable.trigger(e);\r\n\r\n\r\n        this.dragging = draggable;\r\n\r\n        if (draggable.draggingClass) {\r\n          styler.addClass(draggable.dragSource,draggable.draggingClass);\r\n        }\r\n\r\n        this.draggingGhost = e.ghost;\r\n        if (!this.draggingGhost) {\r\n          this.draggingGhost = draggable.elm;\r\n        }\r\n\r\n        this.draggingTransfer = e.transfer;\r\n        if (this.draggingTransfer) {\r\n\r\n            langx.each(this.draggingTransfer,function(key,value){\r\n                event.dataTransfer.setData(key, value);\r\n            });\r\n        }\r\n\r\n        event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n        event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n        this.trigger(e);\r\n      },\r\n\r\n      over : function() {\r\n\r\n      },\r\n\r\n      end : function(dropped) {\r\n        var dragging = this.dragging;\r\n        if (dragging) {\r\n          if (dragging.draggingClass) {\r\n            styler.removeClass(dragging.dragSource,dragging.draggingClass);\r\n          }\r\n        }\r\n\r\n        var e = eventer.create(\"ended\",{\r\n        });        \r\n        this.trigger(e);\r\n\r\n\r\n        this.dragging = null;\r\n        this.draggingTransfer = null;\r\n        this.draggingGhost = null;\r\n        this.draggingOffsetX = null;\r\n        this.draggingOffsetY = null;\r\n      }\r\n    });\r\n\r\n    var manager = new DndManager(),\r\n        draggingHeight,\r\n        placeholders = [];\r\n\r\n\r\n\r\n    var Draggable = langx.Evented.inherit({\r\n      klassName : \"Draggable\",\r\n\r\n      init : function (elm,params) {\r\n        var self = this;\r\n\r\n        self.elm = elm;\r\n        self.draggingClass = params.draggingClass || \"dragging\",\r\n        self._params = params;\r\n\r\n        [\"preparing\",\"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n            if (langx.isFunction(params[eventName])) {\r\n                self.on(eventName, params[eventName]);\r\n            }\r\n        });\r\n\r\n\r\n        eventer.on(elm,{\r\n          \"mousedown\" : function(e) {\r\n            if (params.handle) {\r\n              self.handleElm = finder.closest(e.target,params.handle);\r\n              if (!self.handleElm) {\r\n                return;\r\n              }\r\n            }\r\n            manager.prepare(self);\r\n            if (self.dragSource) {\r\n              datax.prop(self.dragSource, \"draggable\", true);\r\n            }\r\n          },\r\n\r\n          \"mouseup\" :   function(e) {\r\n            if (self.dragSource) {\r\n              datax.prop(self.dragSource, \"draggable\", false);\r\n              self.dragSource = null;\r\n              self.handleElm = null;\r\n            }\r\n          },\r\n\r\n          \"dragstart\":  function(e) {\r\n            datax.prop(self.dragSource, \"draggable\", false);\r\n            manager.start(self, e);\r\n          },\r\n\r\n          \"dragend\":   function(e){\r\n            eventer.stop(e);\r\n\r\n            if (!manager.dragging) {\r\n              return;\r\n            }\r\n\r\n            manager.end(false);\r\n          }\r\n        });\r\n\r\n      }\r\n\r\n    });\r\n\r\n\r\n    var Droppable = langx.Evented.inherit({\r\n      klassName : \"Droppable\",\r\n\r\n      init : function(elm,params) {\r\n        var self = this,\r\n            draggingClass = params.draggingClass || \"dragging\",\r\n            hoverClass,\r\n            activeClass,\r\n            acceptable = true;\r\n\r\n        self.elm = elm;\r\n        self._params = params;\r\n\r\n        [\"started\",\"entered\", \"leaved\", \"dropped\",\"overing\"].forEach(function(eventName) {\r\n            if (langx.isFunction(params[eventName])) {\r\n                self.on(eventName, params[eventName]);\r\n            }\r\n        });\r\n\r\n        eventer.on(elm,{\r\n          \"dragover\" : function(e) {\r\n            e.stopPropagation()\r\n\r\n            if (!acceptable) {\r\n              return\r\n            }\r\n\r\n            var e2 = eventer.create(\"overing\",{\r\n                overElm : e.target,\r\n                transfer : manager.draggingTransfer,\r\n                acceptable : true\r\n            });\r\n            self.trigger(e2);\r\n\r\n            if (e2.acceptable) {\r\n              e.preventDefault() // allow drop\r\n\r\n              e.dataTransfer.dropEffect = \"copyMove\";\r\n            }\r\n\r\n          },\r\n\r\n          \"dragenter\" :   function(e) {\r\n            var params = self._params,\r\n                elm = self.elm;\r\n\r\n            var e2 = eventer.create(\"entered\",{\r\n                transfer : manager.draggingTransfer\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            e.stopPropagation()\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.addClass(elm,hoverClass)\r\n            }\r\n          },\r\n\r\n          \"dragleave\":  function(e) {\r\n            var params = self._params,\r\n                elm = self.elm;\r\n            if (!acceptable) return false\r\n            \r\n            var e2 = eventer.create(\"leaved\",{\r\n                transfer : manager.draggingTransfer\r\n            });\r\n            \r\n            self.trigger(e2);\r\n\r\n            e.stopPropagation()\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.removeClass(elm,hoverClass);\r\n            }\r\n          },\r\n\r\n          \"drop\":   function(e){\r\n            var params = self._params,\r\n                elm = self.elm;\r\n\r\n            eventer.stop(e); // stops the browser from redirecting.\r\n\r\n            if (!manager.dragging) return\r\n\r\n           // manager.dragging.elm.removeClass('dragging');\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.addClass(elm,hoverClass)\r\n            }\r\n\r\n            var e2 = eventer.create(\"dropped\",{\r\n                transfer : manager.draggingTransfer\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            manager.end(true)\r\n          }\r\n        });\r\n\r\n        manager.on(\"started\",function(e){\r\n            var e2 = eventer.create(\"started\",{\r\n                transfer : manager.draggingTransfer,\r\n                acceptable : false\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            acceptable = e2.acceptable;\r\n            hoverClass = e2.hoverClass;\r\n            activeClass = e2.activeClass;\r\n\r\n            if (activeClass && acceptable) {\r\n              styler.addClass(elm,activeClass);\r\n            }\r\n\r\n         }).on(\"ended\" , function(e){\r\n            var e2 = eventer.create(\"ended\",{\r\n                transfer : manager.draggingTransfer,\r\n                acceptable : false\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.removeClass(elm,hoverClass);\r\n            }\r\n            if (activeClass && acceptable) {\r\n              styler.removeClass(elm,activeClass);\r\n            }\r\n\r\n            acceptable = false;\r\n            activeClass = null;\r\n            hoverClass = null;\r\n        });\r\n\r\n      }\r\n    });\r\n\r\n\r\n    function draggable(elm, params) {\r\n      return new Draggable(elm,params);\r\n    }\r\n\r\n    function droppable(elm, params) {\r\n      return new Droppable(elm,params);\r\n    }\r\n\r\n    function dnd(){\r\n      return dnd;\r\n    }\r\n\r\n    langx.mixin(dnd, {\r\n       //params ： {\r\n        //  target : Element or string or function\r\n        //  handle : Element\r\n        //  copy : boolean\r\n        //  placeHolder : \"div\"\r\n        //  hoverClass : \"hover\"\r\n        //  start : function\r\n        //  enter : function\r\n        //  over : function\r\n        //  leave : function\r\n        //  drop : function\r\n        //  end : function\r\n        //\r\n        //\r\n        //}\r\n        draggable   : draggable,\r\n\r\n        //params ： {\r\n        //  accept : string or function\r\n        //  placeHolder\r\n        //\r\n        //\r\n        //\r\n        //}\r\n        droppable : droppable,\r\n\r\n        manager : manager\r\n\r\n\r\n    });\r\n\r\n    return skylark.dnd = dnd;\r\n});\r\n"]}