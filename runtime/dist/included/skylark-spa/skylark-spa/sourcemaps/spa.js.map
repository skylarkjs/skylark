{"version":3,"sources":["spa.js"],"names":["define","skylark","langx","router","createEvent","type","props","e","CustomEvent","safeMixin","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","forceRefresh","data","self","forEach","eventName","isFunction","on","_entering","ctx","force","_prepared","prepare","getConfigData","key","getNamedValue","window","location","pathname","match","regex","d","_setting","controllerSetting","controller","contentPath","require","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","isString","innerHTML","appendChild","Plugin","hookers","split","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","undefined","URL","baseURI","homePath","getConfig","go","path","promises0","map","all","promises1","lazy","promises2","concat","run","start"],"mappings":"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","file":"../spa.js","sourcesContent":["define([\n    \"skylark-langx/skylark\",\n    \"skylark-langx/langx\",\n    \"skylark-router/router\"\n], function(skylark, langx, router) {\n    var Deferred = langx.Deferred;\n\n    function createEvent(type, props) {\n        var e = new CustomEvent(type, props);\n        return langx.safeMixin(e, props);\n    }\n\n    var Route = router.Route = router.Route.inherit({\n        klassName: \"SpaRoute\",\n\n        init: function(name, setting) {\n            this.overrided(name, setting);\n            this.content = setting.content;\n            this.forceRefresh = setting.forceRefresh;\n            this.data = setting.data;\n            //this.lazy = !!setting.lazy;\n            var self = this;\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\n                if (langx.isFunction(setting[eventName])) {\n                    self.on(eventName, setting[eventName]);\n                }\n            });\n        },\n\n        _entering: function(ctx) {\n            if (this.forceRefresh || ctx.force || !this._prepared) {\n                return this.prepare();\n            }\n            return this;\n        },\n\n        getConfigData: function(key) {\n            return key ? this.data[key] : this.data;\n        },\n\n        getNamedValue: function() {\n            return window.location.pathname.match(this.regex);\n        },\n\n        prepare: function() {\n            var d = new Deferred(),\n                setting = this._setting,\n                controllerSetting = setting.controller,\n                controller = this.controller,\n\n                self = this,\n                content = setting.content,\n                contentPath = setting.contentPath;\n\n            require([controllerSetting.type], function(type) {\n                controller = self.controller = new type(controllerSetting);\n                d.resolve();\n            });\n\n            return d.then(function() {\n                var e = createEvent(\"preparing\", {\n                    route: self,\n                    result: true\n                });\n                self.trigger(e);\n                return Deferred.when(e.result).then(function() {\n                    self._prepared = true;\n                });\n            });\n        },\n\n        render: function(ctx) {\n            var e = createEvent(\"rendering\", {\n                route: this,\n                context: ctx,\n                content: this.content\n            });\n            this.trigger(e);\n            return e.content;\n        },\n\n        trigger: function(e) {\n            var controller = this.controller;\n            if (controller) {\n                return controller.perform(e);\n            } else {\n                return this.overrided(e);\n            }\n        }\n    });\n\n    var RouteController = langx.Evented.inherit({\n        klassName: \"SpaRouteController\",\n\n        init: function(route, setting) {\n            setting = setting || {};\n            this.content = setting.content;\n            this.data = setting.data;\n        },\n\n        getConfigData: function(key) {\n            return key ? this.data[key] : this.data;\n        },\n\n        perform: function(e) {\n            var eventName = e.type;\n            if (this[eventName]) {\n                return this[eventName].call(this, e);\n            }\n\n        }\n    });\n\n    var Page = langx.Evented.inherit({\n        klassName: \"SpaPage\",\n\n        init: function(params) {\n            params = langx.mixin({\n                \"routeViewer\": \"body\"\n            }, params);\n\n            this._params = params;\n            this._rvc = document.querySelector(params.routeViewer);\n            this._router = router;\n\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\n        },\n\n        prepare: function() {\n\n        },\n\n        //Refreshes the route\n        refresh: function() {\n            var curCtx = router.current(),\n                prevCtx = router.previous();\n            var content = curCtx.route.render(curCtx);\n            if (langx.isString(content)) {\n                this._rvc.innerHTML = content;\n            } else {\n                this._rvc.innerHTML = \"\";\n                this._rvc.appendChild(content);\n            }\n            curCtx.route.trigger(createEvent(\"rendered\", {\n                route: curCtx.route,\n                content: content\n            }));\n        }\n    });\n\n    var Plugin = langx.Evented.inherit({\n        klassName: \"SpaPlugin\",\n\n        init: function(name, setting) {\n            this.name = name;\n\n            if (langx.isString(setting.hookers)) {\n                setting.hookers = setting.hookers.split(\" \");\n            }\n            this._setting = setting;\n        },\n\n        isHooked: function(eventName) {\n            var hookers = this._setting.hookers || [];\n            return hookers.indexOf(eventName) > -1;\n        },\n\n        prepare: function() {\n            var d = new Deferred(),\n                setting = this._setting,\n                controllerSetting = setting.controller,\n                controller = this.controller,\n                self = this;\n            require([controllerSetting.type], function(type) {\n                controller = self.controller = new type(controllerSetting);\n                router.on(setting.hookers, {\n                    plugin: self\n                }, langx.proxy(controller.perform, controller));\n                d.resolve();\n            });\n            return d.then(function() {\n                var e = createEvent(\"preparing\", {\n                    plugin: self,\n                    result: true\n                });\n                self.trigger(e);\n                return Deferred.when(e.result).then(function() {\n                    self._prepared = true;\n                });\n            });\n        },\n\n        trigger: function(e) {\n            var controller = this.controller;\n            if (controller) {\n                return controller.perform(e);\n            } else {\n                return this.overrided(e);\n            }\n        }\n    });\n\n    var PluginController = langx.Evented.inherit({\n        klassName: \"SpaPluginController\",\n\n        init: function(plugin) {\n            this.plugin = plugin;\n        },\n\n        perform: function(e) {\n            var eventName = e.type;\n            if (this[eventName]) {\n                return this[eventName].call(this, e);\n            }\n\n        }\n    });\n\n    var Application = langx.Evented.inherit({\n        klassName: \"SpaApplication\",\n\n        init: function(config) {\n            if (app) {\n                return app;\n            }\n            var plugins = this._plugins = {};\n\n            config = this._config = langx.mixin({\n                plugins: {}\n            }, config, true);\n\n            langx.each(config.plugins, function(pluginName, setting) {\n                plugins[pluginName] = new Plugin(pluginName, setting);\n            });\n\n            router.routes(config.routes);\n\n            this._router = router;\n\n            this._page = new spa.Page(config.page);\n\n            document.title = config.title;\n            var baseUrl = config.baseUrl;\n            if (baseUrl === undefined) {\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\n            }\n            router.baseUrl(baseUrl);\n\n            if (config.homePath) {\n                router.homePath(config.homePath);\n            }\n\n            app = this;\n        },\n\n        getConfig: function(key) {\n            return key ? this._config[key] : this._config;\n        },\n\n        go: function(path, force) {\n            router.go(path, force);\n            return this;\n        },\n\n        page: function() {\n            return this._page;\n        },\n\n        prepare: function() {\n            if (this._prepared) {\n                return Deferred.resolve();\n            }\n            var self = this;\n\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\n                if (plugin.isHooked(\"starting\")) {\n                    return plugin.prepare();\n                }\n            });\n\n            return Deferred.all(promises0).then(function() {\n                router.trigger(createEvent(\"starting\", {\n                    spa: self\n                }));\n                var promises1 = langx.map(router.routes(), function(route, name) {\n                        if (route.lazy === false) {\n                            return route.prepare();\n                        }\n                    }),\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\n                        if (!plugin.isHooked(\"starting\")) {\n                            return plugin.prepare();\n                        }\n                    });\n\n\n                return Deferred.all(promises1.concat(promises2)).then(function() {\n                    self._prepared = true;\n                });\n            });\n        },\n\n        run: function() {\n            this._router.start();\n            router.trigger(createEvent(\"started\", {\n                spa: this\n            }));\n        }\n    });\n\n    var app;\n    var spa = function(config) {\n        if (!app) {\n            window[config.name || \"app\"] = app = new spa.Application(config);\n        }\n\n        return app;\n    }\n\n    langx.mixin(spa, {\n        \"Application\": Application,\n\n        \"Page\": Page,\n\n        \"Plugin\": Plugin,\n        \"PluginController\": PluginController,\n\n        \"Route\": Route,\n        \"RouteController\": RouteController\n\n    });\n\n    return skylark.spa = spa;\n});\n"]}