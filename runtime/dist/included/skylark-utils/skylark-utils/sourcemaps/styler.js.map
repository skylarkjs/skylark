{"version":3,"sources":["styler.js"],"names":["define","skylark","langx","maybeAddPx","name","value","cssNumber","dasherize","classRE","classReCache","RegExp","className","node","klass","svg","undefined","baseVal","defaultDisplay","nodeName","element","display","elementDisplay","document","createElement","body","appendChild","getComputedStyle","getPropertyValue","parentNode","removeChild","show","elm","styler","css","this","isInvisible","hide","addClass","names","cls","isString","split","forEach","re","match","property","arguments","length","computedStyle","style","camelCase","isArrayLike","props","call","prop","removeProperty","key","cssText","hasClass","removeClass","replace","trim","toggleClass","when","self","Array","prototype","every","column-count","columns","font-weight","line-height","opacity","z-index","zoom","mixin","autocssfix"],"mappings":"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","file":"../styler.js","sourcesContent":["define([\n    \"./skylark\",\n    \"./langx\"\n], function(skylark, langx) {\n    var every = Array.prototype.every,\n        forEach = Array.prototype.forEach,\n        camelCase = langx.camelCase,\n        dasherize = langx.dasherize;\n\n    function maybeAddPx(name, value) {\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\n    }\n\n    var cssNumber = {\n            'column-count': 1,\n            'columns': 1,\n            'font-weight': 1,\n            'line-height': 1,\n            'opacity': 1,\n            'z-index': 1,\n            'zoom': 1\n        },\n        classReCache = {\n\n        };\n\n    function classRE(name) {\n        return name in classReCache ?\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\n    }\n\n    // access className property while respecting SVGAnimatedString\n    function className(node, value) {\n        var klass = node.className || '',\n            svg = klass && klass.baseVal !== undefined\n\n        if (value === undefined) return svg ? klass.baseVal : klass\n        svg ? (klass.baseVal = value) : (node.className = value)\n    }\n\n\n    var elementDisplay = {};\n\n    function defaultDisplay(nodeName) {\n        var element, display\n        if (!elementDisplay[nodeName]) {\n            element = document.createElement(nodeName)\n            document.body.appendChild(element)\n            display = getComputedStyle(element, '').getPropertyValue(\"display\")\n            element.parentNode.removeChild(element)\n            display == \"none\" && (display = \"block\")\n            elementDisplay[nodeName] = display\n        }\n        return elementDisplay[nodeName]\n    }\n\n    function show(elm) {\n        styler.css(elm, \"display\", \"\");\n        if (styler.css(elm, \"display\") == \"none\") {\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\n        }\n        return this;\n    }\n\n    function isInvisible(elm) {\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\n    }\n\n    function hide(elm) {\n        styler.css(elm, \"display\", \"none\");\n        return this;\n    }\n\n    function addClass(elm, name) {\n        if (!name) return this\n        var cls = className(elm),\n            names;\n        if (langx.isString(name)) {\n            names = name.split(/\\s+/g);\n        } else {\n            names = name;\n        }\n        names.forEach(function(klass) {\n            var re = classRE(klass);\n            if (!cls.match(re)) {\n                cls += (cls ? \" \" : \"\") + klass;\n            }\n        });\n\n        className(elm, cls);\n\n        return this;\n    }\n\n    function css(elm, property, value) {\n        if (arguments.length < 3) {\n            var computedStyle,\n                computedStyle = getComputedStyle(elm, '')\n            if (langx.isString(property)) {\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(property)\n            } else if (langx.isArrayLike(property)) {\n                var props = {}\n                forEach.call(property, function(prop) {\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(prop))\n                })\n                return props\n            }\n        }\n\n        var css = '';\n        if (typeof(property) == 'string') {\n            if (!value && value !== 0) {\n                elm.style.removeProperty(dasherize(property));\n            } else {\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\n            }\n        } else {\n            for (key in property) {\n                if (property[key] === undefined) {\n                    continue;\n                }\n                if (!property[key] && property[key] !== 0) {\n                    elm.style.removeProperty(dasherize(key));\n                } else {\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\n                }\n            }\n        }\n\n        elm.style.cssText += ';' + css;\n        return this;\n    }\n\n\n    function hasClass(elm, name) {\n        var re = classRE(name);\n        return elm.className && elm.className.match(re);\n    }\n\n    function removeClass(elm, name) {\n        if (name) {\n            var cls = className(elm),\n                names;\n\n            if (langx.isString(name)) {\n                names = name.split(/\\s+/g);\n            } else {\n                names = name;\n            }\n\n            names.forEach(function(klass) {\n                var re = classRE(klass);\n                if (cls.match(re)) {\n                    cls = cls.replace(re, \" \");\n                }\n            });\n\n            className(elm, cls.trim());\n        } else {\n            className(elm,\"\");\n        }\n\n        return this;\n    }\n\n    function toggleClass(elm, name, when) {\n        var self = this;\n        name.split(/\\s+/g).forEach(function(klass) {\n            if (when === undefined) {\n                when = !self.hasClass(elm, klass);\n            }\n            if (when) {\n                self.addClass(elm, klass);\n            } else {\n                self.removeClass(elm, klass)\n            }\n        });\n\n        return self;\n    }\n\n    var styler = function() {\n        return styler;\n    };\n\n    langx.mixin(styler, {\n        autocssfix: true,\n\n        addClass: addClass,\n        className: className,\n        css: css,\n        hasClass: hasClass,\n        hide: hide,\n        isInvisible: isInvisible,\n        removeClass: removeClass,\n        show: show,\n        toggleClass: toggleClass\n    });\n\n    return skylark.styler = styler;\n});\n"]}