{"version":3,"sources":["resizer.js"],"names":["define","skylark","langx","noder","datax","finder","geom","eventer","mover","styler","$","resizable","elm","params","defaultOptions","touchActionNone","direction","top","left","right","bottom","handle","border","grabber","selector","handleEl","startSize","currentSize","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","isString","find","isHtmlNode","movable","auto","e","size","width","deltaX","height","deltaY","remove","off","resizer","on","attr","removeAttr","pagePosition","addClass","Array","prototype","some","map","fn","this","each","el","mixin"],"mappings":";;;;;;;AAAAA,QACI,YACA,UACA,UACA,UACA,WACA,SACA,YACA,UACA,WACA,WACF,SAASC,EAASC,EAAMC,EAAMC,EAAMC,EAAOC,EAAKC,EAAQC,EAAMC,EAAOC,GAanE,QAASC,GAAUC,EAAKC,GAEpB,GAAIC,IAEAC,iBAAiB,EAEjBC,WACIC,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,QAAQ,GAGZC,QACIC,QAAS,EACTC,QAAS,GACTC,UAAU,GAIlBX,GAASA,KACT,IACIY,GAEAC,EACAC,EAJAN,EAASR,EAAOQ,WAEhBL,EAAYH,EAAOG,WAAaF,EAAeE,UAG/CY,EAAkBf,EAAOgB,QACzBC,EAAiBjB,EAAOkB,OACxBC,EAAkBnB,EAAOoB,OA2C7B,OAzCI/B,GAAMgC,SAASb,GACfI,EAAWpB,EAAO8B,KAAKvB,EAAIS,GACpBnB,EAAMkC,WAAWf,KACxBI,EAAWJ,GAEfb,EAAM6B,QAAQZ,GACVa,MAAO,EACPT,QAAU,SAASU,GACfb,EAAYpB,EAAKkC,KAAK5B,GAClBgB,GACAA,EAAgBW,IAGxBR,OAAS,SAASQ,GACdZ,KAEIX,EAAUE,MAAQF,EAAUG,MAC5BQ,EAAYc,MAAQf,EAAUe,MAAQF,EAAEG,OAExCf,EAAYc,MAAQf,EAAUe,MAG9BzB,EAAUC,KAAOD,EAAUI,OAC3BO,EAAYgB,OAASjB,EAAUiB,OAASJ,EAAEK,OAE1CjB,EAAYgB,OAASjB,EAAUiB,OAGnCrC,EAAKkC,KAAK5B,EAAIe,GAEVG,GACAA,EAAeS,IAGvBN,QAAS,SAASM,GACVP,GACAA,EAAgBO,OAOxBM,OAAQ,WACJtC,EAAQuC,IAAIrB,KAYxB,QAASsB,KACP,MAAOA,GAnGAxC,EAAQyC,GACPzC,EAAQuC,IACP1C,EAAM6C,KACA7C,EAAM8C,WACV5C,EAAK6C,aACH1C,EAAO2C,SACT9C,EAAKqC,OACPU,MAAMC,UAAUC,KACjBF,MAAMC,UAAUE,GAkG1B,OAdA9C,GAAE+C,GAAG9C,UAAY,SAASE,GACtB6C,KAAKC,KAAK,SAASC,GACfjD,EAAU+C,KAAK7C,MAQvBX,EAAM2D,MAAMd,GACRpC,UAAWA,IAGRV,EAAQ8C,QAAUA","file":"../resizer.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./mover\",\r\n    \"./styler\",\r\n    \"./query\"\r\n],function(skylark, langx,noder,datax,finder,geom,eventer,mover,styler,$){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n\r\n    function resizable(elm, params) {\r\n\r\n        var defaultOptions = {\r\n            // prevents browser level actions like forward back gestures\r\n            touchActionNone: true,\r\n\r\n            direction : {\r\n                top: false, \r\n                left: false, \r\n                right: true, \r\n                bottom: true\r\n            },\r\n            // selector for handle that starts dragging\r\n            handle : {\r\n                border : true,\r\n                grabber: \"\",\r\n                selector: true\r\n            }\r\n        };\r\n\r\n        params = params || {};\r\n        var handle = params.handle || {},\r\n            handleEl,\r\n            direction = params.direction || defaultOptions.direction,\r\n            startSize,\r\n            currentSize,\r\n            startedCallback = params.started,\r\n            movingCallback = params.moving,\r\n            stoppedCallback = params.stopped;\r\n\r\n        if (langx.isString(handle)) {\r\n            handleEl = finder.find(elm,handle);\r\n        } else if (langx.isHtmlNode(handle)) {\r\n            handleEl = handle;\r\n        }\r\n        mover.movable(handleEl,{\r\n            auto : false,\r\n            started : function(e) {\r\n                startSize = geom.size(elm);\r\n                if (startedCallback) {\r\n                    startedCallback(e);\r\n                }\r\n            },\r\n            moving : function(e) {\r\n                currentSize = {\r\n                };\r\n                if (direction.left || direction.right) {\r\n                    currentSize.width = startSize.width + e.deltaX;\r\n                } else {\r\n                    currentSize.width = startSize.width;\r\n                }\r\n\r\n                if (direction.top || direction.bottom) {\r\n                    currentSize.height = startSize.height + e.deltaY;\r\n                } else {\r\n                    currentSize.height = startSize.height;\r\n                }\r\n\r\n                geom.size(elm,currentSize);\r\n\r\n                if (movingCallback) {\r\n                    movingCallback(e);\r\n                }\r\n            },\r\n            stopped: function(e) {\r\n                if (stoppedCallback) {\r\n                    stoppedCallback(e);\r\n                }                \r\n            }\r\n        });\r\n        \r\n        return {\r\n            // destroys the dragger.\r\n            remove: function() {\r\n                eventer.off(handleEl);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    $.fn.resizable = function(params) {\r\n        this.each(function(el){\r\n            resizable(this,params);\r\n        });\r\n    };\r\n\r\n    function resizer(){\r\n      return resizer;\r\n    }\r\n\r\n    langx.mixin(resizer, {\r\n        resizable: resizable\r\n    });\r\n\r\n    return skylark.resizer = resizer;\r\n});\r\n"]}