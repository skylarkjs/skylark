(function(factory,globals) {
  var define = globals.define,
      require = globals.require,
      isAmd = (typeof define === 'function' && define.amd),
      isCmd = (!isAmd && typeof exports !== 'undefined');

  if (!isAmd && !define) {
    var map = {};
    function absolute(relative, base) {
        if (relative[0]!==".") {
          return relative;
        }
        var stack = base.split("/"),
            parts = relative.split("/");
        stack.pop();
        for (var i=0; i<parts.length; i++) {
            if (parts[i] == ".")
                continue;
            if (parts[i] == "..")
                stack.pop();
            else
                stack.push(parts[i]);
        }
        return stack.join("/");
    }
    define = globals.define = function(id, deps, factory) {
        if (typeof factory == 'function') {
            map[id] = {
                factory: factory,
                deps: deps.map(function(dep){
                  return absolute(dep,id);
                }),
                exports: null
            };
            require(id);
        } else {
            map[id] = factory;
        }
    };
    require = globals.require = function(deps,cb) {
        function requireOne(id) {
            if (!map.hasOwnProperty(id)) {
                throw new Error('Module ' + id + ' has not been defined');
            }
            var module = map[id];
            if (!module.exports) {
                var args = [];

                module.deps.forEach(function(dep){
                    args.push(require(dep));
                })

                module.exports = module.factory.apply(window, args);
            }
            return module.exports;
        }
        var onedep = typeof deps === "string";
        if (!cb && onedep) {
            return requireOne(deps);
        }
        if (onedep) {
            deps = [deps];
        }
        var modules = deps.map(function(id){
            return requireOne(id);
        });
        if (cb) {
            cb.apply(null,modules);
        } else {
            return modules;
        }

    };
  }

  factory(define,require);

  function xhrGet(url,callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function()   {
        if (this.readyState == 4) {
            callback(this.response || this.responseText);
        }
    }
    xhr.open("GET",url,true);
    xhr.send( null );
  }
  if (!isAmd) {
    var skylarkjs = require("skylarkjs");

    if (isCmd) {
      exports = skylarkjs;
    } else {
      globals.skylarkjs = skylarkjs;
    }
  } else {
    require.config({
        baseUrl : "./"
    });
  }

require([
  "skylarkjs"
], function (skylark,http) {
    xhrGet("./slax-config.json",function(res){
        if (!res) {
            console.error("can't find the slax-config.json!");
            return;
        }
        var cfg = JSON.parse(res);
        if (isAmd) {
            require.config(cfg.runtime);
        }

       
        var initApp = function(spa, _cfg) {
            _cfg = _cfg || cfg;
            if (cfg.contextPath) {
              _cfg.baseUrl = cfg.contextPath;
            }
            var app = spa(_cfg);

            globals.go =  function(path, force) {
                app.go(path, force);
            };

            app.prepare().then(function(){
                app.run();
            });
        };
        if(cfg.spaModule) {
            require([cfg.spaModule], function(spa) {
                if(spa._start) {
                    spa._start().then(function(_cfg){
                        initApp(spa, _cfg);
                    });
                } else {
                    initApp(spa);
                }
            });
        } else {
            initApp(skylark.spa);
        }
    });


});

})(function(define,require) {
