{"version":3,"sources":["http.js"],"names":["define","skylark","langx","empty","mimeToDataType","mime","split","scriptTypeRE","test","xmlTypeRE","appendQuery","url","query","replace","serializeData","options","processData","data","isString","$","param","traditional","type","toUpperCase","undefined","ajaxSuccess","xhr","settings","deferred","context","status","success","call","ajaxComplete","ajaxError","error","complete","ajax","mixin","Deferred","safeMixin","ajaxSettings","crossDomain","abortTimeout","dataType","accepts","headers","setHeader","name","value","toLowerCase","protocol","RegExp","$1","window","location","nativeSetHeader","setRequestHeader","mimeType","indexOf","overrideMimeType","contentType","onreadystatechange","readyState","clearTimeout","result","getResponseHeader","responseText","eval","responseXML","blankRE","JSON","parse","e","statusText","async","open","username","password","apply","timeout","setTimeout","abort","send","get","parseArguments","arguments","post","getJSON","http","beforeSend","global","XMLHttpRequest","script","json","xml","html","text","cache","gtJSON"],"mappings":";;;;;;;AAAAA,QACI,YACA,WACF,SAASC,EAASC,GAOhB,QAASC,MAwCT,QAASC,GAAeC,GAIpB,MAHIA,KACAA,EAAOA,EAAKC,MAAM,IAAK,GAAG,IAEvBD,IAAiB,aAARA,EAAsB,OAC1B,oBAARA,EAA6B,OAC7BE,EAAaC,KAAKH,GAAQ,SAC1BI,EAAUD,KAAKH,IAAS,QAAU,OAG1C,QAASK,GAAYC,EAAKC,GACtB,MAAa,IAATA,EACOD,GAEHA,EAAM,IAAMC,GAAOC,QAAQ,YAAa,KA0CpD,QAASC,GAAcC,GACfA,EAAQC,aAAeD,EAAQE,OAASf,EAAMgB,SAASH,EAAQE,QAC/DF,EAAQE,KAAOE,EAAEC,MAAML,EAAQE,KAAMF,EAAQM,eAE7CN,EAAQE,MAAUF,EAAQO,MAAsC,OAA9BP,EAAQO,KAAKC,gBAC/CR,EAAQJ,IAAMD,EAAYK,EAAQJ,IAAKI,EAAQE,MAC/CF,EAAQE,KAAOO,QAIvB,QAASC,GAAYR,EAAMS,EAAKC,EAAUC,GACtC,GAAIC,GAAUF,EAASE,QACnBC,EAAS,SACbH,GAASI,QAAQC,KAAKH,EAASZ,EAAMa,EAAQJ,GAG7CO,EAAaH,EAAQJ,EAAKC,GAG9B,QAASO,GAAUC,EAAOb,EAAMI,EAAKC,EAAUC,GAC3C,GAAIC,GAAUF,EAASE,OACvBF,GAASQ,MAAMH,KAAKH,EAASH,EAAKJ,EAAMa,GAGxCF,EAAaX,EAAMI,EAAKC,GAG5B,QAASM,GAAaH,EAAQJ,EAAKC,GAC/B,GAAIE,GAAUF,EAASE,OACvBF,GAASS,SAASJ,KAAKH,EAASH,EAAKI,GAKzC,QAASO,GAAKtB,GACV,GAAIY,GAAWzB,EAAMoC,SAAUvB,GAC3Ba,EAAW,GAAIW,EAEnBrC,GAAMsC,UAAUb,EAASc,IAGpBd,EAASe,YAId5B,EAAca,EACd,IAQIgB,GARAC,EAAWjB,EAASiB,SAEpBvC,EAAOsB,EAASkB,QAAQD,GACxBE,KACAC,EAAY,SAASC,EAAMC,GAASH,EAAQE,EAAKE,gBAAkBF,EAAMC,IACzEE,EAAW,iBAAiB3C,KAAKmB,EAAShB,KAAOyC,OAAOC,GAAKC,OAAOC,SAASJ,SAC7EzB,EAAMC,EAASD,MACf8B,EAAkB9B,EAAI+B,gBAiB1B,IAZK9B,EAASe,aACVK,EAAU,mBAAoB,kBAElCA,EAAU,SAAU1C,GAAQ,QACxBA,EAAOsB,EAAS+B,UAAYrD,KACxBA,EAAKsD,QAAQ,UAAWtD,EAAOA,EAAKC,MAAM,IAAK,GAAG,IACtDoB,EAAIkC,kBAAoBlC,EAAIkC,iBAAiBvD,KAE7CsB,EAASkC,aAAgBlC,EAASkC,eAAgB,GAASlC,EAASV,MAAuC,OAA/BU,EAASL,KAAKC,gBAC1FwB,EAAU,eAAgBpB,EAASkC,aAAe,qCAGlDlC,EAASmB,QACT,IAAKE,OAAQrB,GAASmB,QAClBC,EAAUC,KAAMrB,EAASmB,QAAQE,MAGzCtB,GAAI+B,iBAAmBV,EAEvBrB,EAAIoC,mBAAqB,WACrB,GAAsB,GAAlBpC,EAAIqC,WAAiB,CACrBrC,EAAIoC,mBAAqB3D,EACzB6D,aAAarB,EACb,IAAIsB,GAAQ9B,GAAQ,CACpB,IAAKT,EAAII,QAAU,KAAOJ,EAAII,OAAS,KAAsB,KAAdJ,EAAII,QAAgC,GAAdJ,EAAII,QAA2B,SAAZqB,EAAsB,CAC1GP,EAAWA,GAAYxC,EAAeuB,EAAS+B,UAAYhC,EAAIwC,kBAAkB,iBACjFD,EAASvC,EAAIyC,YAEb,KAEoB,UAAZvB,GACA,EAAIwB,MAAMH,GACS,OAAZrB,EACPqB,EAASvC,EAAI2C,YACM,QAAZzB,IACPqB,EAASK,EAAQ9D,KAAKyD,GAAU,KAAOM,KAAKC,MAAMP,IAExD,MAAOQ,GACLtC,EAAQsC,EAGRtC,EACAD,EAAUC,EAAO,cAAeT,EAAKC,EAAUC,GAE/CH,EAAYwC,EAAQvC,EAAKC,EAAUC,OAGvCM,GAAUR,EAAIgD,YAAc,KAAMhD,EAAII,OAAS,QAAU,QAASJ,EAAKC,EAAUC,IAe7F,IAAI+C,KAAQ,SAAWhD,KAAWA,EAASgD,KAC3CjD,GAAIkD,KAAKjD,EAASL,KAAMK,EAAShB,IAAKgE,EAAOhD,EAASkD,SAAUlD,EAASmD,SAEzE,KAAK9B,OAAQF,GACTU,EAAgBuB,MAAMrD,EAAKoB,EAAQE,MAavC,OAVIrB,GAASqD,QAAU,IACnBrC,EAAesC,WAAW,WACtBvD,EAAIoC,mBAAqB3D,EACzBuB,EAAIwD,QACJhD,EAAU,KAAM,UAAWR,EAAKC,EAAUC,IAC3CD,EAASqD,UAIhBtD,EAAIyD,KAAKxD,EAASV,KAAOU,EAASV,KAAO,MAClCS,EAIX,QAAS0D,KACL,MAAO/C,GAAKgD,eAAeN,MAAM,KAAMO,YAG3C,QAASC,KACL,GAAIxE,GAAUsE,eAAeN,MAAM,KAAMO,UAEzC,OADAvE,GAAQO,KAAO,OACRe,EAAKtB,GAGhB,QAASyE,KACL,GAAIzE,GAAUsE,eAAeN,MAAM,KAAMO,UAEzC,OADAvE,GAAQ6B,SAAW,OACZP,EAAKtB,GAIhB,QAAS0E,KACP,MAAOA,GArQT,GAAIlD,GAAWrC,EAAMqC,SACjB+B,EAAU,QACV/D,EAAe,qCACfE,EAAY,8BAKZgC,GAEAnB,KAAM,MAENoE,WAAYvF,EAEZ4B,QAAS5B,EAETgC,MAAOhC,EAEPiC,SAAUjC,EAEV0B,QAAS,KAET8D,QAAQ,EAERjE,IAAK,WACD,MAAO,IAAI4B,QAAOsC,gBAItB/C,SACIgD,OAAQ,oEACRC,KAAM,mBACNC,IAAK,4BACLC,KAAM,YACNC,KAAM,cAGVvD,aAAa,EAEbsC,QAAS,EAEThE,aAAa,EAEbkF,OAAO,EAwOX,OAXAhG,GAAMoC,MAAMmD,GACRpD,KAAMA,EAEN+C,IAAKA,EAELe,OAAQX,EAERD,KAAMA,IAIHtF,EAAQwF,KAAOA","file":"../http.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\"\r\n],function(skylark, langx){\r\n    var Deferred = langx.Deferred,\r\n        blankRE = /^\\s*$/,\r\n        scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n        xmlTypeRE = /^(?:text|application)\\/xml/i;\r\n\r\n\r\n    function empty() {}\r\n\r\n    var ajaxSettings = {\r\n        // Default type of request\r\n        type: 'GET',\r\n        // Callback that is executed before request\r\n        beforeSend: empty,\r\n        // Callback that is executed if the request succeeds\r\n        success: empty,\r\n        // Callback that is executed the the server drops error\r\n        error: empty,\r\n        // Callback that is executed on request complete (both: error and success)\r\n        complete: empty,\r\n        // The context for the callbacks\r\n        context: null,\r\n        // Whether to trigger \"global\" Ajax events\r\n        global: true,\r\n        // Transport\r\n        xhr: function() {\r\n            return new window.XMLHttpRequest();\r\n        },\r\n        // MIME types mapping\r\n        // IIS returns Javascript as \"application/x-javascript\"\r\n        accepts: {\r\n            script: 'text/javascript, application/javascript, application/x-javascript',\r\n            json: 'application/json',\r\n            xml: 'application/xml, text/xml',\r\n            html: 'text/html',\r\n            text: 'text/plain'\r\n        },\r\n        // Whether the request is to another domain\r\n        crossDomain: false,\r\n        // Default timeout\r\n        timeout: 0,\r\n        // Whether data should be serialized to string\r\n        processData: true,\r\n        // Whether the browser should be allowed to cache GET responses\r\n        cache: true\r\n    }\r\n\r\n    function mimeToDataType(mime) {\r\n        if (mime) {\r\n            mime = mime.split(';', 2)[0];\r\n        }\r\n        return mime && (mime == 'text/html' ? 'html' :\r\n            mime == 'application/json' ? 'json' :\r\n            scriptTypeRE.test(mime) ? 'script' :\r\n            xmlTypeRE.test(mime) && 'xml') || 'text';\r\n    }\r\n\r\n    function appendQuery(url, query) {\r\n        if (query == '') {\r\n            return url;\r\n        }\r\n        return (url + '&' + query).replace(/[&?]{1,2}/, '?');\r\n    }\r\n\r\n    function serialize(params, obj, traditional, scope) {\r\n        var type, array = langx.isArray(obj),\r\n            hash = langx.isPlainObject(obj)\r\n        langx.each(obj, function(key, value) {\r\n            type = langx.type(value);\r\n            if (scope) {\r\n                key = traditional ? scope :\r\n                        scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']' ;\r\n            }\r\n            // handle data in serializeArray() format\r\n            if (!scope && array) {\r\n                params.add(value.name, value.value);\r\n            // recurse into nested objects\r\n            } else if (type == \"array\" || (!traditional && type == \"object\")) {\r\n                serialize(params, value, traditional, key);\r\n            } else {\r\n                params.add(key, value);\r\n            }\r\n        })\r\n    }    \r\n\r\n    function param(obj, traditional) {\r\n        var params = []\r\n        params.add = function(key, value) {\r\n            if (langx.isFunction(value)) {\r\n                value = value();\r\n            }\r\n            if (value == null) {\r\n                value = \"\";\r\n            }\r\n            this.push(escape(key) + '=' + escape(value));\r\n        }\r\n        \r\n        serialize(params, obj, traditional);\r\n\r\n        return params.join('&').replace(/%20/g, '+')\r\n    }\r\n\r\n    // serialize payload and append it to the URL for GET requests\r\n    function serializeData(options) {\r\n        if (options.processData && options.data && !langx.isString(options.data)) {\r\n            options.data = $.param(options.data, options.traditional)\r\n        }\r\n        if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n            options.url = appendQuery(options.url, options.data);\r\n            options.data = undefined;\r\n        }\r\n    }\r\n\r\n    function ajaxSuccess(data, xhr, settings, deferred) {\r\n        var context = settings.context,\r\n            status = 'success'\r\n        settings.success.call(context, data, status, xhr)\r\n        //if (deferred) deferred.resolveWith(context, [data, status, xhr])\r\n        //triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])\r\n        ajaxComplete(status, xhr, settings)\r\n    }\r\n    // type: \"timeout\", \"error\", \"abort\", \"parsererror\"\r\n    function ajaxError(error, type, xhr, settings, deferred) {\r\n        var context = settings.context\r\n        settings.error.call(context, xhr, type, error)\r\n        //if (deferred) deferred.rejectWith(context, [xhr, type, error])\r\n        //triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type])\r\n        ajaxComplete(type, xhr, settings)\r\n    }\r\n    // status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"\r\n    function ajaxComplete(status, xhr, settings) {\r\n        var context = settings.context\r\n        settings.complete.call(context, xhr, status)\r\n        //triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])\r\n        //ajaxStop(settings)\r\n    }    \r\n\r\n    function ajax(options) {\r\n        var settings = langx.mixin({}, options),\r\n            deferred = new Deferred();\r\n\r\n        langx.safeMixin(settings,ajaxSettings);\r\n\r\n        //ajaxStart(settings)\r\n        if (!settings.crossDomain) {\r\n        //    settings.crossDomain = !langx.isSameOrigin(settings.url);\r\n        }\r\n\r\n        serializeData(settings);\r\n        var dataType = settings.dataType;\r\n\r\n        var mime = settings.accepts[dataType],\r\n            headers = {},\r\n            setHeader = function(name, value) { headers[name.toLowerCase()] = [name, value] },\r\n            protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,\r\n            xhr = settings.xhr(),\r\n            nativeSetHeader = xhr.setRequestHeader,\r\n            abortTimeout;\r\n\r\n        //if (deferred) deferred.promise(xhr)\r\n\r\n        if (!settings.crossDomain) {\r\n            setHeader('X-Requested-With', 'XMLHttpRequest');\r\n        }\r\n        setHeader('Accept', mime || '*/*')\r\n        if (mime = settings.mimeType || mime) {\r\n            if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]\r\n            xhr.overrideMimeType && xhr.overrideMimeType(mime)\r\n        }\r\n        if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET')) {\r\n            setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded')\r\n        }\r\n\r\n        if (settings.headers) {\r\n            for (name in settings.headers) {\r\n                setHeader(name, settings.headers[name]);\r\n            }    \r\n        }\r\n        xhr.setRequestHeader = setHeader;\r\n\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4) {\r\n                xhr.onreadystatechange = empty\r\n                clearTimeout(abortTimeout)\r\n                var result, error = false\r\n                if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {\r\n                    dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'))\r\n                    result = xhr.responseText\r\n\r\n                    try {\r\n                        // http://perfectionkills.com/global-eval-what-are-the-options/\r\n                        if (dataType == 'script') {\r\n                            (1, eval)(result);\r\n                        } else if (dataType == 'xml') {\r\n                            result = xhr.responseXML\r\n                        } else if (dataType == 'json') {\r\n                            result = blankRE.test(result) ? null : JSON.parse(result);\r\n                        }\r\n                    } catch (e) { \r\n                        error = e \r\n                    }\r\n\r\n                    if (error) {\r\n                        ajaxError(error, 'parsererror', xhr, settings, deferred);\r\n                    } else {\r\n                        ajaxSuccess(result, xhr, settings, deferred);\r\n                    }\r\n                } else {\r\n                    ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n        if (ajaxBeforeSend(xhr, settings) === false) {\r\n            xhr.abort()\r\n            ajaxError(null, 'abort', xhr, settings, deferred)\r\n            return xhr\r\n        }\r\n\r\n        if (settings.xhrFields)\r\n            for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]\r\n        */\r\n        var async = 'async' in settings ? settings.async : true\r\n        xhr.open(settings.type, settings.url, async, settings.username, settings.password)\r\n\r\n        for (name in headers) {\r\n            nativeSetHeader.apply(xhr, headers[name]);\r\n        }\r\n\r\n        if (settings.timeout > 0) {\r\n            abortTimeout = setTimeout(function() {\r\n                xhr.onreadystatechange = empty;\r\n                xhr.abort();\r\n                ajaxError(null, 'timeout', xhr, settings, deferred);\r\n            }, settings.timeout);\r\n        }\r\n\r\n        // avoid sending empty string (#319)\r\n        xhr.send(settings.data ? settings.data : null)\r\n        return xhr;\r\n    }\r\n\r\n\r\n    function get( /* url, data, success, dataType */ ) {\r\n        return ajax(parseArguments.apply(null, arguments))\r\n    }\r\n\r\n    function post( /* url, data, success, dataType */ ) {\r\n        var options = parseArguments.apply(null, arguments);\r\n        options.type = 'POST';\r\n        return ajax(options);\r\n    }\r\n\r\n    function getJSON( /* url, data, success */ ) {\r\n        var options = parseArguments.apply(null, arguments);\r\n        options.dataType = 'json';\r\n        return ajax(options);\r\n    }    \r\n\r\n\r\n    function http(){\r\n      return http;\r\n    }\r\n\r\n    langx.mixin(http, {\r\n        ajax: ajax,\r\n\r\n        get: get,\r\n        \r\n        gtJSON: getJSON,\r\n\r\n        post: post\r\n\r\n    });\r\n\r\n    return skylark.http = http;\r\n});\r\n"]}