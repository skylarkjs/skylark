{"version":3,"sources":["filer.001.js"],"names":["define","skylark","langx","datax","eventer","styler","dropzone","elm","params","hoverClass","droppedCallback","dropped","enterdCount","on","e","dataTransfer","types","indexOf","stop","addClass","removeClass","items","length","webkitGetAsEntry","getAsEntry","webentry","all","map","item","then","files","this","pastezone","pastedCallback","pasted","originalEvent","clipboardData","each","index","file","getAsFile","push","picker","preventDefault","select","selectFiles","pickedFiles","i","size","maxFileSize","splice","fileSelected","multiple","picked","fileInput","input","document","createElement","type","style","position","left","top","opacity","body","appendChild","onchange","entries","target","webkitEntries","Array","prototype","slice","call","value","webkitdirectory","directory","click","concat","Deferred","attr","one","entry","path","d","onError","reject","isFile","relativePath","resolve","isDirectory","dirReader","createReader","readEntries","name","promise","apply","arguments","filer","Evented","inherit","init","options","mixin","upload","readFile","reader","FileReader","onload","evt","result","onerror","code","error","alert","asArrayBuffer","readAsArrayBuffer","asDataUrl","readAsDataURL","asText","readAsText","writeFile","data","window","navigator","msSaveBlob","isString","dataURItoBlob","a","Blob","URL","createObjectURL","href","setAttribute","dispatchEvent","CustomEvent"],"mappings":"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","file":"../filer.001.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./datax\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n], function(skylark, langx, datax, eventer,styler) {\r\n    var concat = Array.prototype.concat,\r\n        on = eventer.on,\r\n        attr = eventer.attr,\r\n        Deferred = langx.Deferred,\r\n\r\n        fileInput,\r\n        fileInputForm,\r\n        fileSelected,\r\n        maxFileSize = 1 / 0;\r\n\r\n\r\n    var webentry = (function(){\r\n        function  one(entry, path) {\r\n            var d = new Deferred(),\r\n                onError = function(e) {\r\n                    d.reject(e);\r\n                };\r\n\r\n            path = path || '';\r\n            if (entry.isFile) {\r\n                entry.file(function (file) {\r\n                    file.relativePath = path;\r\n                    d.resolve(file);\r\n                }, onError);\r\n            } else if (entry.isDirectory) {\r\n                var dirReader = entry.createReader();\r\n                dirReader.readEntries(function (entries) {\r\n                    all(\r\n                        entries,\r\n                        path + entry.name + '/'\r\n                    ).then(function (files) {\r\n                        d.resolve(files);\r\n                    }).catch(onError);\r\n                }, onError);\r\n            } else {\r\n                // Return an empy list for file system items\r\n                // other than files or directories:\r\n                d.resolve([]);\r\n            }\r\n            return d.promise;\r\n        }\r\n\r\n        function all(entries, path) {\r\n            return Deferred.all(\r\n                langx.map(entries, function (entry) {\r\n                    return one(entry, path);\r\n                })\r\n            ).then(function(){\r\n                return concat.apply([],arguments);\r\n            });\r\n        }\r\n\r\n        return {\r\n            one : one,\r\n            all : all\r\n        };\r\n    })();\r\n\r\n    function dataURLtoBlob(dataurl) {\r\n        var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\r\n        while(n--){\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        return new Blob([u8arr], {type:mime});\r\n    }\r\n\r\n    var Uploader =  langx.Evented.inherit({\r\n        init :function(options) {\r\n        }\r\n    });\r\n\r\n    function dropzone(elm, params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"dropzone\", // \r\n            droppedCallback = params.dropped;\r\n\r\n        var enterdCount = 0;\r\n        on(elm, \"dragenter\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\r\n                eventer.stop(e);\r\n                enterdCount ++;\r\n                styler.addClass(elm,hoverClass)\r\n            }\r\n        });\r\n\r\n        on(elm, \"dragover\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\r\n                eventer.stop(e);\r\n            }\r\n        });\r\n\r\n        on(elm, \"dragleave\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\r\n                enterdCount--\r\n                if (enterdCount==0) {\r\n                    styler.removeClass(elm,hoverClass);\r\n                }\r\n            }\r\n        });\r\n\r\n        on(elm, \"drop\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\")>-1) {\r\n                styler.removeClass(elm,hoverClass)\r\n                eventer.stop(e);\r\n                if (droppedCallback) {\r\n                    var items = e.dataTransfer.items;\r\n                    if (items && items.length && (items[0].webkitGetAsEntry ||\r\n                        items[0].getAsEntry)) {\r\n                        webentry.all(\r\n                            langx.map(items, function (item) {\r\n                                if (item.webkitGetAsEntry) {\r\n                                    return item.webkitGetAsEntry();\r\n                                }\r\n                                return item.getAsEntry();\r\n                            })\r\n                        ).then(droppedCallback);\r\n                    } else {\r\n                        droppedCallback(e.dataTransfer.files);\r\n                    }                    \r\n                }\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    function pastezone(elm,params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"pastezone\",\r\n            pastedCallback = params.pasted;\r\n\r\n        on(elm, \"paste\", function(e) {\r\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\r\n                    e.originalEvent.clipboardData.items,\r\n                files = [];\r\n            if (items && items.length) {\r\n                langx.each(items, function (index, item) {\r\n                    var file = item.getAsFile && item.getAsFile();\r\n                    if (file) {\r\n                        files.push(file);\r\n                    }\r\n                });\r\n            }\r\n            if (pastedCallback && files.length) {\r\n                pastedCallback(files);\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n   \r\n    function picker(elm, params) {\r\n        on(elm, \"click\", function(e) {\r\n            e.preventDefault();\r\n            select(params);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function select(params) {\r\n        params = params || {};\r\n        var multiple = params.multiple || false,\r\n            fileSelected = params.picked;\r\n        if (!fileInput) {\r\n            var input = fileInput = document.createElement(\"input\");\r\n\r\n            function selectFiles(pickedFiles) {\r\n                for (var i = pickedFiles.length; i--;) {\r\n                    if (pickedFiles[i].size > maxFileSize) {\r\n                        pickedFiles.splice(i, 1);\r\n                    }\r\n                }\r\n                fileSelected(pickedFiles);\r\n            }\r\n\r\n            input.type = \"file\";\r\n            input.style.position = \"fixed\",\r\n                input.style.left = 0,\r\n                input.style.top = 0,\r\n                input.style.opacity = .001,\r\n                document.body.appendChild(input);\r\n\r\n            input.onchange = function(e) {\r\n                var entries = e.target.webkitEntries || e.target.entries;\r\n\r\n                if (entries && entries.length) {\r\n                    webentry.all(entries).then(function(files) {\r\n                        selectFiles(files);\r\n                    });\r\n                } else {\r\n                    selectFiles(Array.prototype.slice.call(e.target.files));\r\n                }\r\n                // reset to \"\", so selecting the same file next time still trigger the change handler\r\n                input.value = \"\";\r\n            };\r\n        }\r\n        fileInput.multiple = multiple;\r\n        fileInput.webkitdirectory = directory;\r\n        fileInput.click();\r\n    }\r\n\r\n    function upload(files, url, params) {\r\n        params = params || {};\r\n        var chunkSize = params.chunkSize || 0,\r\n            maxSize = params.maxSize || 0,\r\n            progressCallback = params.progress,\r\n            errorCallback = params.error,\r\n            completedCallback = params.completed,\r\n            uploadedCallback = params.uploaded;\r\n\r\n        function createFormData(e) {\r\n            var t = new FormData();\r\n            t.append(\"file\", e);\r\n            return t;\r\n        }\r\n\r\n        function uploadOneFile(fileItem,oneFileloadedSize, fileItems) {\r\n            function handleProcess(nowLoadedSize) {\r\n                var t;\r\n                speed = Math.ceil(oneFileloadedSize + nowLoadedSize / ((now() - uploadStartedTime) / 1e3)), \r\n                percent = Math.round((oneFileloadedSize + nowLoadedSize) / file.size * 100); \r\n                if (progressCallback) {\r\n                    progressCallback({\r\n                        name: file.name,\r\n                        loaded: oneFileloadedSize + nowLoadedSize,\r\n                        total: file.size,\r\n                        percent: percent,\r\n                        bytesPerSecond: speed,\r\n                        global: {\r\n                            loaded: allLoadedSize + oneFileloadedSize + nowLoadedSize,\r\n                            total: totalSize\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            var file = fileItem.file,\r\n                uploadChunkSize = chunkSize || file.size,\r\n                chunk = file.slice(oneFileloadedSize, oneFileloadedSize + uploadChunkSize);\r\n\r\n            xhr = createXmlHttpRequest();\r\n            //xhr.open(\"POST\", url + \r\n            //                \"?action=upload&path=\" + \r\n            //                encodeURIComponent(path) + \r\n            //                \"&name=\" + encodeURIComponent(file.name) + \r\n            //                \"&loaded=\" + oneFileloadedSize + \r\n            //                \"&total=\" + file.size + \r\n            //                \"&id=\" + id + \r\n            //                \"&csrf=\" + encodeURIComponent(token) + \r\n            //                \"&resolution=\" + \r\n            //                encodeURIComponent(fileItem.type));\r\n            xhr.upload.onprogress = function(event) {\r\n                handleProcess(event.loaded - (event.total - chunk.size))\r\n            };\r\n            xhr.onload = function() {\r\n                var response, i;\r\n                xhr.upload.onprogress({\r\n                    loaded: chunk.size,\r\n                    total: chunk.size\r\n                });\r\n                try {\r\n                    response = JSON.parse(xhr.responseText);\r\n                } catch (e) {\r\n                    i = {\r\n                        code: -1,\r\n                        message: \"Error response is not proper JSON\\n\\nResponse:\\n\" + xhr.responseText,\r\n                        data: {\r\n                            fileName: file.name,\r\n                            fileSize: file.size,\r\n                            maxSize: uploadMaxSize,\r\n                            extensions: extensions.join(\", \")\r\n                        },\r\n                        extra: extra\r\n                    };\r\n                    errorFileInfos.push(i);\r\n                    if (errorCallback) {\r\n                        errorCallback(i);\r\n                    }\r\n                    return uploadFiles(fileItems)\r\n                }\r\n                if (response.error) {\r\n\r\n                    i = {\r\n                        code: response.error.code,\r\n                        message: response.error.message,\r\n                        data: {\r\n                            fileName: file.name,\r\n                            fileSize: file.size,\r\n                            maxSize: uploadMaxSize,\r\n                            extensions: extensions.join(\", \")\r\n                        },\r\n                        extra: extra\r\n                    }; \r\n                    errorFileInfos.push(i); \r\n                    if (errorCallback) {\r\n                        errorCallback(i);\r\n                    }\r\n                    uploadFiles(fileItems);\r\n                } else {\r\n                    if (!response.error && oneFileloadedSize + uploadChunkSize < file.size) {\r\n                        uploadOneFile(fileItem, oneFileloadedSize + uploadChunkSize, fileItems);\r\n                    } else {\r\n                        if (response.result) {\r\n                            utils.each(response.result, function(e) {\r\n                                e = File.fromJSON(e);\r\n                                uploadFileItems.push(e);\r\n\r\n                                if (uploadedCallback) {\r\n                                    uploadedCallback({\r\n                                        file: e\r\n                                    });\r\n                                }\r\n                            }); \r\n\r\n                        } \r\n                        allLoadedSize += file.size;\r\n                        response.result && k.push(response.result);\r\n                        uploadFiles(fileItems);\r\n                    }                            \r\n                }     \r\n\r\n            };\r\n            handleProcess(0);\r\n            xhr.send(createFormData(chunk));\r\n        }\r\n\r\n        function uploadFiles(fileItems) {\r\n            var fileItem = fileItems.shift();\r\n            processedFilesCount++; \r\n            if (fileItem && fileItem.file.error) {\r\n                uploadFiles(fileItem);\r\n            } else {\r\n                if (uploadingFile) {\r\n                    uploadOneFile(fileItem, null, 0, fileItems);\r\n                } else {\r\n\r\n                    if (completedCallback) {\r\n                        completedCallback({\r\n                            files: new FileCollection(uploadFileItems),\r\n                            bytesPerSecond: I,\r\n                            errors: E(D),\r\n                            extra: extra\r\n                        });\r\n                    }\r\n                }  \r\n            }\r\n        }\r\n\r\n        var self = this,\r\n            fileItems = [],\r\n            processedFilesCount = -1,\r\n            xhr, \r\n            totalSize = 0,\r\n            allLoadedSize = 0,\r\n            k = [],\r\n            errorFileInfos = [],\r\n            startedTime = now(),\r\n            I = 0,\r\n            uploadFileItems = [];\r\n\r\n        for ( var  i = 0; i < files.length; i++) {\r\n            totalSize += files[i].size;\r\n            fileItems.push({\r\n                file : files[i]\r\n            });\r\n        }        \r\n\r\n        uploadFiles(fileItems);\r\n    }\r\n\r\n    var filer = function() {\r\n        return filer;\r\n    };\r\n\r\n    langx.mixin(filer , {\r\n        dropzone: dropzone,\r\n\r\n        pastezone: pastezone,\r\n\r\n        picker: picker,\r\n\r\n        select : select,\r\n\r\n        upload  : function() {\r\n\r\n        },\r\n\r\n        readFile : function(file,params) {\r\n            params = params || {};\r\n            var d = new Deferred,\r\n                reader = new FileReader();\r\n            \r\n            reader.onload = function(evt) {\r\n                d.resolve(evt.target.result);\r\n            };\r\n            reader.onerror = function(e) {\r\n                var code = e.target.error.code;\r\n                if (code === 2) {\r\n                    alert('please don\\'t open this page using protocol fill:///');\r\n                } else {\r\n                    alert('error code: ' + code);\r\n                }\r\n            };\r\n            \r\n            if (params.asArrayBuffer){\r\n                reader.readAsArrayBuffer(file);\r\n            } else if (params.asDataUrl) {\r\n                reader.readAsDataURL(file);                \r\n            } else if (params.asText) {\r\n                reader.readAsText(file);\r\n            } else {\r\n                reader.readAsArrayBuffer(file);\r\n            }\r\n\r\n            return d.promise;\r\n        },\r\n         \r\n        writeFile : function(data,name) {\r\n            if (window.navigator.msSaveBlob) { \r\n               if (langx.isString(data)) {\r\n                   data = dataURItoBlob(data);\r\n               }\r\n               window.navigator.msSaveBlob(data, name);\r\n            } else {\r\n                var a = document.createElement('a');\r\n                if (data instanceof Blob) {\r\n                    data = langx.URL.createObjectURL(data);\r\n                }\r\n                a.href = data;\r\n                a.setAttribute('download', name || 'noname');\r\n                a.dispatchEvent(new CustomEvent('click'));\r\n            }              \r\n        }\r\n\r\n    });\r\n\r\n    return skylark.filer = filer;\r\n});\r\n"]}