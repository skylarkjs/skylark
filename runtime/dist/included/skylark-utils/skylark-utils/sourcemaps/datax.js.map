{"version":3,"sources":["datax.js"],"names":["define","skylark","langx","finder","setAttribute","elm","name","value","removeAttribute","attr","undefined","this","attrName","hasAttribute","getAttribute","_attributeData","store","each","attributes","i","indexOf","camelCase","replace","deserializeValue","_store","confirm","_getData","camelName","capitalRE","toLowerCase","_setData","data","dataAttrName","removeData","names","isString","split","forEach","pluck","nodes","property","map","call","prop","propMap","removeAttr","removeProp","text","txt","textContent","val","multiple","selectedOptions","filter","find","option","selected","datax","Array","prototype","tabindex","readonly","for","class","maxlength","cellspacing","cellpadding","rowspan","colspan","usemap","frameborder","contenteditable","mixin"],"mappings":"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","file":"../datax.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./finder\"\r\n], function(skylark, langx, finder) {\r\n    var map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        camelCase = langx.camelCase,\r\n        deserializeValue = langx.deserializeValue,\r\n\r\n        capitalRE = /([A-Z])/g,\r\n        propMap = {\r\n            'tabindex': 'tabIndex',\r\n            'readonly': 'readOnly',\r\n            'for': 'htmlFor',\r\n            'class': 'className',\r\n            'maxlength': 'maxLength',\r\n            'cellspacing': 'cellSpacing',\r\n            'cellpadding': 'cellPadding',\r\n            'rowspan': 'rowSpan',\r\n            'colspan': 'colSpan',\r\n            'usemap': 'useMap',\r\n            'frameborder': 'frameBorder',\r\n            'contenteditable': 'contentEditable'\r\n        };\r\n\r\n    function setAttribute(elm, name, value) {\r\n        if (value == null) {\r\n            elm.removeAttribute(name);\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    function attr(elm, name, value) {\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var attrName in name) {\r\n                    attr(elm, attrName, name[attrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                if (elm.hasAttribute(name)) {\r\n                    return elm.getAttribute(name);\r\n                }\r\n            }\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    // Read all \"data-*\" attributes from a node\r\n    function _attributeData(elm) {\r\n        var store = {}\r\n        langx.each(elm.attributes || [], function(i, attr) {\r\n            if (attr.name.indexOf('data-') == 0) {\r\n                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);\r\n            }\r\n        })\r\n        return store;\r\n    }\r\n\r\n    function _store(elm, confirm) {\r\n        var store = elm[\"_$_store\"];\r\n        if (!store && confirm) {\r\n            store = elm[\"_$_store\"] = _attributeData(elm);\r\n        }\r\n        return store;\r\n    }\r\n\r\n    function _getData(elm, name) {\r\n        if (name === undefined) {\r\n            return _store(elm, true);\r\n        } else {\r\n            var store = _store(elm);\r\n            if (store) {\r\n                if (name in store) {\r\n                    return store[name];\r\n                }\r\n                var camelName = camelCase(name);\r\n                if (camelName in store) {\r\n                    return store[camelName];\r\n                }\r\n            }\r\n            var attrName = 'data-' + name.replace(capitalRE, \"-$1\").toLowerCase()\r\n            return attr(elm, attrName);\r\n        }\r\n\r\n    }\r\n\r\n    function _setData(elm, name, value) {\r\n        var store = _store(elm, true);\r\n        store[camelCase(name)] = value;\r\n    }\r\n\r\n\r\n    function data(elm, name, value) {\r\n\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var dataAttrName in name) {\r\n                    _setData(elm, dataAttrName, name[dataAttrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                return _getData(elm, name);\r\n            }\r\n        } else {\r\n            _setData(elm, name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function removeData(elm, names) {\r\n        if (langx.isString(names)) {\r\n            names = names.split(/\\s+/);\r\n        }\r\n        var store = _store(elm, true);\r\n        names.forEach(function(name) {\r\n            delete store[name];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function pluck(nodes, property) {\r\n        return map.call(nodes, function(elm) {\r\n            return elm[property];\r\n        });\r\n    }\r\n\r\n    function prop(elm, name, value) {\r\n        name = propMap[name] || name;\r\n        if (value === undefined) {\r\n            return elm[name];\r\n        } else {\r\n            elm[name] = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function removeAttr(elm, name) {\r\n        name.split(' ').forEach(function(attr) {\r\n            setAttribute(elm, attr);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function removeProp(elm, name) {\r\n        name.split(' ').forEach(function(prop) {\r\n            delete elm[prop];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    function text(elm, txt) {\r\n        if (txt === undefined) {\r\n            return elm.textContent;\r\n        } else {\r\n            elm.textContent = txt == null ? '' : '' + txt;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function val(elm, value) {\r\n        if (value === undefined) {\r\n            if (elm.multiple) {\r\n                // select multiple values\r\n                var selectedOptions = filter.call(finder.find(elm, \"option\"), (function(option) {\r\n                    return option.selected;\r\n                }));\r\n                return pluck(selectedOptions, \"value\");\r\n            } else {\r\n                return elm.value;\r\n            }\r\n        } else {\r\n            elm.value = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function datax() {\r\n        return datax;\r\n    }\r\n\r\n    langx.mixin(datax, {\r\n        attr: attr,\r\n\r\n        data: data,\r\n\r\n        pluck: pluck,\r\n\r\n        prop: prop,\r\n\r\n        removeAttr: removeAttr,\r\n\r\n        removeData: removeData,\r\n\r\n        removeProp: removeProp,\r\n\r\n        text: text,\r\n\r\n        val: val\r\n    });\r\n\r\n    return skylark.datax = datax;\r\n});\r\n"]}