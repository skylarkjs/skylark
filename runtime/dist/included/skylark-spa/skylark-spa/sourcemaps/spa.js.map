{"version":3,"sources":["spa.js"],"names":["define","skylark","langx","router","createEvent","type","props","e","CustomEvent","safeMixin","app","Deferred","Route","inherit","klassName","init","name","setting","this","overrided","content","data","self","forEach","eventName","isFunction","on","_entering","ctx","_prepared","prepare","getConfigData","key","getNamedValue","window","location","pathname","match","regex","d","_setting","controllerSetting","controller","contentPath","require","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","isString","innerHTML","appendChild","Plugin","hookers","split","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","undefined","URL","baseURI","homePath","getConfig","go","path","force","promises0","map","all","promises1","lazy","promises2","concat","run","start"],"mappings":"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","file":"../spa.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-router/router\"\r\n], function(skylark, langx, router) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (!this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        getNamedValue: function() {\r\n            return window.location.pathname.match(this.regex);\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                d.resolve();\r\n            });\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var RouteController = langx.Evented.inherit({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.Evented.inherit({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._rvc = document.querySelector(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            var content = curCtx.route.render(curCtx);\r\n            if (langx.isString(content)) {\r\n                this._rvc.innerHTML = content;\r\n            } else {\r\n                this._rvc.innerHTML = \"\";\r\n                this._rvc.appendChild(content);\r\n            }\r\n            curCtx.route.trigger(createEvent(\"rendered\", {\r\n                route: curCtx.route,\r\n                content: content\r\n            }));\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n\r\n            if (langx.isString(setting.hookers)) {\r\n                setting.hookers = setting.hookers.split(\" \");\r\n            }\r\n            this._setting = setting;\r\n        },\r\n\r\n        isHooked: function(eventName) {\r\n            var hookers = this._setting.hookers || [];\r\n            return hookers.indexOf(eventName) > -1;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                router.on(setting.hookers, {\r\n                    plugin: self\r\n                }, langx.proxy(controller.perform, controller));\r\n                d.resolve();\r\n            });\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    plugin: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.Evented.inherit({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl;\r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path, force) {\r\n            router.go(path, force);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            if (this._prepared) {\r\n                return Deferred.resolve();\r\n            }\r\n            var self = this;\r\n\r\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\r\n                if (plugin.isHooked(\"starting\")) {\r\n                    return plugin.prepare();\r\n                }\r\n            });\r\n\r\n            return Deferred.all(promises0).then(function() {\r\n                router.trigger(createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n                var promises1 = langx.map(router.routes(), function(route, name) {\r\n                        if (route.lazy === false) {\r\n                            return route.prepare();\r\n                        }\r\n                    }),\r\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\r\n                        if (!plugin.isHooked(\"starting\")) {\r\n                            return plugin.prepare();\r\n                        }\r\n                    });\r\n\r\n\r\n                return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n            router.trigger(createEvent(\"started\", {\r\n                spa: this\r\n            }));\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n        \"RouteController\": RouteController\r\n\r\n    });\r\n\r\n    return skylark.spa = spa;\r\n});\r\n"]}